import{_ as s,o as a,c as l,V as p}from"./chunks/framework.bd00fe0c.js";const F=JSON.parse('{"title":"浮点数精度问题","description":"","frontmatter":{},"headers":[],"relativePath":"面试复盘/JavaScript/18. 浮点数精度问题/浮点数精度问题.md","filePath":"面试复盘/JavaScript/18. 浮点数精度问题/浮点数精度问题.md","lastUpdated":1712573589000}'),n={name:"面试复盘/JavaScript/18. 浮点数精度问题/浮点数精度问题.md"},e=p(`<h1 id="浮点数精度问题" tabindex="-1">浮点数精度问题 <a class="header-anchor" href="#浮点数精度问题" aria-label="Permalink to &quot;浮点数精度问题&quot;">​</a></h1><h2 id="经典真题" tabindex="-1">经典真题 <a class="header-anchor" href="#经典真题" aria-label="Permalink to &quot;经典真题&quot;">​</a></h2><ul><li>为什么 <em>console.log(0.2+0.1==0.3)</em> 得到的值为 <em>false</em></li></ul><h2 id="浮点数精度常见问题" tabindex="-1">浮点数精度常见问题 <a class="header-anchor" href="#浮点数精度常见问题" aria-label="Permalink to &quot;浮点数精度常见问题&quot;">​</a></h2><p>在 <em>JavaScript</em> 中整数和浮点数都属于 <em>number</em> 数据类型，所有数字都是以 <em>64</em> 位浮点数形式储存，即便整数也是如此。 所以我们在打印 <em>1.00</em> 这样的浮点数的结果是 <em>1</em> 而非 <em>1.00</em> 。</p><p>在一些特殊的数值表示中，例如金额，这样看上去有点别扭，但是至少值是正确了。</p><p>然而要命的是，当浮点数做数学运算的时候，你经常会发现一些问题，举几个例子：</p><p><strong>场景一</strong>：进行浮点值运算结果的判断</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 加法 </span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0.1</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0.2</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 0.30000000000000004</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0.7</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0.1</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 0.7999999999999999</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0.2</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0.4</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 0.6000000000000001</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">2.22</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0.1</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 2.3200000000000003</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 减法</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1.5</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1.2</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 0.30000000000000004</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0.3</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0.2</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 0.09999999999999998</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 乘法 </span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">19.9</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">100</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 1989.9999999999998</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">19.9</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 1990</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">9.7</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">100</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 969.9999999999999</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">39.7</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">100</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 3970.0000000000005</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 除法 </span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0.3</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0.1</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 2.9999999999999996</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0.69</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 0.06899999999999999</span></span></code></pre></div><p><strong>场景二</strong>：将小数乘以 <em>10</em> 的 <em>n</em> 次方取整</p><p>比如将钱币的单位，从元转化成分，经常写出来的是 <em>parseInt(yuan*100, 10)</em></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#82AAFF;">parseInt</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0.58</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 57</span></span></code></pre></div><p><strong>场景三</strong>：四舍五入保留 <em>n</em> 位小数</p><p>例如我们会写出 <em>(number).toFixed(2)</em>，但是看下面的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">((</span><span style="color:#F78C6C;">1.335</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 1.33</span></span></code></pre></div><p>在上面的例子中，我们得出的结果是 <em>1.33</em>，而不是预期结果 <em>1.34</em>。</p><h2 id="为什么会有这样的问题" tabindex="-1">为什么会有这样的问题 <a class="header-anchor" href="#为什么会有这样的问题" aria-label="Permalink to &quot;为什么会有这样的问题&quot;">​</a></h2><p>似乎是不可思议。小学生都会算的题目，<em>JavaScript</em> 不会？</p><p>我们来看看其真正的原因，到底为什么会产生精度丢失的问题呢？</p><p>计算机底层只有 <em>0</em> 和 <em>1</em>， 所以所有的运算最后实际上都是二进制运算。</p><p>十进制整数利用辗转相除的方法可以准确地转换为二进制数，但浮点数呢？</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9fc493d0e2e84274b8445d8c5df405ae~tplv-k3u1fbpfcp-watermark.awebp" alt="img" style="zoom:50%;"><p><em>JavaScript</em> 里的数字是采用 <em>IEEE 754</em> 标准的 <em>64</em> 位双精度浮点数。</p><p>先看下面一张图：</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-09-29-060439.png" alt="preview"></p><p>该规范定义了浮点数的格式，对于 <em>64</em> 位的浮点数在内存中的表示，最高的 <em>1</em> 位是符号位，接着的 <em>11</em> 位是指数，剩下的 <em>52</em> 位为有效数字，具体如下：</p><ul><li>符号位 <em>S</em>：第 <em>1</em> 位是正负数符号位（<em>sign</em>），<em>0</em> 代表正数，<em>1</em> 代表负数</li><li>指数位 <em>E</em>：中间的 <em>11</em> 位存储指数（<em>exponent</em>），用来表示次方数</li><li>尾数位 <em>M</em>：最后的 <em>52</em> 位是尾数（<em>mantissa</em>），储存小数部分，超出的部分自动进一舍零</li></ul><p>也就是说，浮点数最终在运算的时候实际上是一个符合该标准的二进制数</p><p>符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。</p><p><em>IEEE 754</em> 规定，有效数字第一位默认总是 <em>1</em>，不保存在 <em>64</em> 位浮点数之中。也就是说，有效数字总是 <em>1.xx…xx</em> 的形式，其中 <em>xx…xx</em> 的部分保存在 <em>64</em> 位浮点数之中，最长可能为 <em>52</em> 位。因此，<em>JavaScript</em> 提供的有效数字最长为 <em>53</em> 个二进制位（<em>64</em> 位浮点的后 <em>52</em> 位 + 有效数字第一位的 <em>1</em>）。</p><p>既然限定位数，必然有截断的可能。</p><p>我们可以看一个例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0.1</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0.2</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 0.30000000000000004</span></span></code></pre></div><p>为了验证该例子，我们得先知道怎么将浮点数转换为二进制，整数我们可以用除 <em>2</em> 取余的方式，小数我们则可以用乘 <em>2</em> 取整的方式。</p><p><em>0.1</em> 转换为二进制：</p><p><em>0.1 * 2</em>，值为 <em>0.2</em>，小数部分 <em>0.2</em>，整数部分 <em>0</em></p><p><em>0.2 * 2</em>，值为 <em>0.4</em>，小数部分 <em>0.4</em>，整数部分 <em>0</em></p><p><em>0.4 * 2</em>，值为0.8，小数部分0.8，整数部分0</p><p><em>0.8 * 2</em>，值为 <em>1.6</em>，小数部分 <em>0.6</em>，整数部分 <em>1</em></p><p><em>0.6 * 2</em>，值为 <em>1.2</em>，小数部分 <em>0.2</em>，整数部分 <em>1</em></p><p><em>0.2 * 2</em>，值为 <em>0.4</em>，小数部分 <em>0.4</em>，整数部分 <em>0</em></p><p>从 <em>0.2</em> 开始循环</p><p><em>0.2</em> 转换为二进制可以直接参考上述，肯定最后也是一个循环的情况</p><p>所以最终我们能得到两个循环的二进制数：</p><p><em>0.1：0.0001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1100 ...</em></p><p><em>0.2：0.0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 ...</em></p><p>这两个的和的二进制就是：</p><p><em>sum：0.0100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 ...</em></p><p>最终我们只能得到和的近似值（按照 <em>IEEE 754</em> 标准保留 <em>52</em> 位，按 <em>0</em> 舍 <em>1</em> 入来取值），然后转换为十进制数变成：</p><p>sum ≈ 0.30000000000000004</p><p>再例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">((</span><span style="color:#F78C6C;">1.335</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 1.33</span></span></code></pre></div><p>因为 <em>1.335</em> 其实是 <em>1.33499999999999996447286321199</em>，<em>toFixed</em> 虽然是四舍五入，但是是对 <em>1.33499999999999996447286321199</em> 进行四五入，所以得出 <em>1.33</em>。</p><p>在 <em>Javascript</em> 中，整数精度同样存在问题，先来看看问题：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">19571992547450991</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 19571992547450990</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">19571992547450991</span><span style="color:#89DDFF;">===</span><span style="color:#F78C6C;">19571992547450992</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><p>同样的原因，在 <em>JavaScript</em> 中 <em>number</em> 类型统一按浮点数处理，整数是按最大 <em>54</em> 位来算，</p><ul><li>最大( <em>2<sup>53</sup> - 1</em>，<em>Number.MAX_SAFE_INTEGER</em>、<em>9007199254740991</em>)</li><li>最小( <em>-(2<sup>53</sup> - 1)</em>，<em>Number.MIN_SAFE_INTEGER</em>、<em>-9007199254740991</em>)</li></ul><p>所以只要超过这个范围，就会存在被舍去的精度问题。</p><p>当然这个问题并不只是在 <em>Javascript</em> 中才会出现，几乎所有的编程语言都采用了 <em>IEEE-754</em> 浮点数表示法，任何使用二进制浮点数的编程语言都会有这个问题。</p><p>只不过在很多其他语言中已经封装好了方法来避免精度的问题，而 <em>JavaScript</em> 是一门弱类型的语言，从设计思想上就没有对浮点数有个严格的数据类型，所以精度误差的问题就显得格外突出。</p><p>通常这种对精度要求高的计算都应该交给后端去计算和存储，因为后端有成熟的库来解决这种计算问题。</p><p>前端也有几个不错的类库：</p><p><em><strong>Math.js</strong></em></p><p><em>Math.js</em> 是专门为 <em>JavaScript</em> 和 <em>Node.js</em> 提供的一个广泛的数学库。它具有灵活的表达式解析器，支持符号计算，配有大量内置函数和常量，并提供集成解决方案来处理不同的数据类型。</p><p>像数字，大数字（超出安全数的数字），复数，分数，单位和矩阵。 功能强大，易于使用。</p><p><em><strong>decimal.js</strong></em></p><p>为 <em>JavaScript</em> 提供十进制类型的任意精度数值。</p><p><em><strong>big.js</strong></em></p><p>不仅能够支持处理 <em>Long</em> 类型的数据，也能够准确的处理小数的运算。</p><h2 id="真题解答" tabindex="-1">真题解答 <a class="header-anchor" href="#真题解答" aria-label="Permalink to &quot;真题解答&quot;">​</a></h2><ul><li>为什么 <em>console.log(0.2+0.1==0.3)</em> 得到的值为 <em>false</em></li></ul><blockquote><p>参考答案：</p><p>因为浮点数的计算存在 <em>round-off</em> 问题，也就是浮点数不能够进行精确的计算。并且：</p><ul><li>不仅 <em>JavaScript</em>，所有遵循 <em>IEEE 754</em> 规范的语言都是如此；</li><li>在 <em>JavaScript</em> 中，所有的 <em>Number</em> 都是以 <em>64-bit</em> 的双精度浮点数存储的；</li><li>双精度的浮点数在这 <em>64</em> 位上划分为 <em>3</em> 段，而这 <em>3</em> 段也就确定了一个浮点数的值，<em>64bit</em> 的划分是“<em>1-11-52</em>”的模式，具体来说： <ul><li>就是 <em>1</em> 位最高位（最左边那一位）表示符号位，<em>0</em> 表示正，<em>1</em> 表示负；</li><li><em>11</em> 位表示指数部分；</li><li><em>52</em> 位表示尾数部分，也就是有效域部分</li></ul></li></ul></blockquote><p>-<em>EOF</em>-</p>`,73),o=[e];function t(c,r,m,y,B,D){return a(),l("div",null,o)}const A=s(n,[["render",t]]);export{F as __pageData,A as default};
