import{_ as l,o as e,c as i,V as t}from"./chunks/framework.bd00fe0c.js";const S=JSON.parse('{"title":"面试题","description":"","frontmatter":{},"headers":[],"relativePath":"面试复盘/网络/12. 输入url地址后/课件.md","filePath":"面试复盘/网络/12. 输入url地址后/课件.md","lastUpdated":1712573589000}'),o={name:"面试复盘/网络/12. 输入url地址后/课件.md"},a=t('<h1 id="面试题" tabindex="-1">面试题 <a class="header-anchor" href="#面试题" aria-label="Permalink to &quot;面试题&quot;">​</a></h1><p>在浏览器地址栏输入地址，并按下回车键后，发生了哪些事情？</p><blockquote><p>参考答案：</p><ol><li>浏览器自动补全协议、端口</li><li>浏览器自动完成url编码</li><li>浏览器根据url地址查找本地缓存，根据缓存规则看是否命中缓存，若命中缓存则直接使用缓存，不再发出请求</li><li>通过DNS解析找到服务器的IP地址</li><li>浏览器向服务器发出建立TCP连接的申请，完成三次握手后，连接通道建立</li><li>若使用了HTTPS协议，则还会进行SSL握手，建立加密信道。使用SSL握手时，会确定是否使用HTTP2</li><li>浏览器决定要附带哪些cookie到请求头中</li><li>浏览器自动设置好请求头、协议版本、cookie，发出GET请求</li><li>服务器处理请求，进入后端处理流程。完成处理后，服务器响应一个HTTP报文给浏览器。</li><li>浏览器根据使用的协议版本，以及Connection字段的约定，决定是否要保留TCP连接。</li><li>浏览器根据响应状态码决定如何处理这一次响应</li><li>浏览器根据响应头中的Content-Type字段识别响应类型，如果是text/html，则对响应体的内容进行HTML解析，否则做其他处理</li><li>浏览器根据响应头的其他内容完成缓存、cookie的设置</li><li>浏览器开始从上到下解析HTML，若遇到外部资源链接，则进一步请求资源</li><li>解析过程中生成DOM树、CSSOM树，然后一边生成，一边把二者合并为渲染树（rendering tree），随后对渲染树中的每个节点计算位置和大小（reflow），最后把每个节点利用GPU绘制到屏幕（repaint）</li><li>在解析过程中还会触发一系列的事件，当DOM树完成后会触发DOMContentLoaded事件，当所有资源加载完毕后会触发load事件</li></ol></blockquote>',3),r=[a];function n(_,c,s,d,p,T){return e(),i("div",null,r)}const h=l(o,[["render",n]]);export{S as __pageData,h as default};
