import{_ as s,o as n,c as a,V as l}from"./chunks/framework.bd00fe0c.js";const E=JSON.parse('{"title":"React 中的位运算","description":"","frontmatter":{},"headers":[],"relativePath":"面试复盘/React/React中的位运算.md","filePath":"面试复盘/React/React中的位运算.md","lastUpdated":1710918713000}'),p={name:"面试复盘/React/React中的位运算.md"},t=l(`<h1 id="react-中的位运算" tabindex="-1">React 中的位运算 <a class="header-anchor" href="#react-中的位运算" aria-label="Permalink to &quot;React 中的位运算&quot;">​</a></h1><blockquote><p>面试题：React 中哪些地方用到了位运算？</p></blockquote><h2 id="位运算的基础知识" tabindex="-1">位运算的基础知识 <a class="header-anchor" href="#位运算的基础知识" aria-label="Permalink to &quot;位运算的基础知识&quot;">​</a></h2><p>所谓二进制，指的就是以二为底的一种计数方式。</p><table><thead><tr><th>十进制</th><th style="text-align:center;">0</th><th style="text-align:center;">1</th><th style="text-align:center;">2</th><th style="text-align:center;">3</th><th style="text-align:center;">4</th><th style="text-align:center;">5</th><th style="text-align:center;">6</th><th style="text-align:center;">7</th><th style="text-align:center;">8</th><th style="text-align:center;">9</th><th style="text-align:center;">10</th><th style="text-align:center;">11</th><th style="text-align:center;">12</th><th style="text-align:center;">13</th><th style="text-align:center;">14</th><th style="text-align:center;">15</th></tr></thead><tbody><tr><td>二进制</td><td style="text-align:center;">0000</td><td style="text-align:center;">0001</td><td style="text-align:center;">0010</td><td style="text-align:center;">0011</td><td style="text-align:center;">0100</td><td style="text-align:center;">0101</td><td style="text-align:center;">0110</td><td style="text-align:center;">0111</td><td style="text-align:center;">1000</td><td style="text-align:center;">1001</td><td style="text-align:center;">1010</td><td style="text-align:center;">1011</td><td style="text-align:center;">1100</td><td style="text-align:center;">1101</td><td style="text-align:center;">1110</td><td style="text-align:center;">1111</td></tr><tr><td>八进制</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">5</td><td style="text-align:center;">6</td><td style="text-align:center;">7</td><td style="text-align:center;">10</td><td style="text-align:center;">11</td><td style="text-align:center;">12</td><td style="text-align:center;">13</td><td style="text-align:center;">14</td><td style="text-align:center;">15</td><td style="text-align:center;">16</td><td style="text-align:center;">17</td></tr><tr><td>十六进制</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">5</td><td style="text-align:center;">6</td><td style="text-align:center;">7</td><td style="text-align:center;">8</td><td style="text-align:center;">9</td><td style="text-align:center;">A</td><td style="text-align:center;">B</td><td style="text-align:center;">C</td><td style="text-align:center;">D</td><td style="text-align:center;">E</td><td style="text-align:center;">F</td></tr></tbody></table><p>我们经常会使用二进制来进行计算，基于二进制的位运算能够很方便的表达“增、删、查、改”。</p><p>例如一个后台管理系统，一般的话会有针对权限的控制，一般权限的控制就使用的是二进制：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;"># 各个权限</span></span>
<span class="line"><span style="color:#BABED8;">permissions </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">SYS_SETTING</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b10000000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">info</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">系统重要设置权限</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">DATA_ADMIN</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b01000000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">info</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">数据库管理权限</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">USER_MANG</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b00100000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">info</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">用户管理权限</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">POST_EDIT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b00010000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">info</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">文章编辑操作权限</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">POST_VIEW</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b00001000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">info</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">文章查看权限</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>再例如，在 linux 操作系统里面，x 代表可执行权限，w 代表可写权限，r 代表可读权限，对应的权限值分别就是 1、2、4（2 的幂次方）</p><p>使用二进制来表示权限，首先速度上面会更快一些，其次在表示多种权限的时候，会更加方便一些。</p><p>比如，现在有 3 个权限 A、B、C...</p><p>根据不同的权限做不同的事情：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (value </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> A) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (value </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> B) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在上面的代码中，会有一个问题，目前仅仅只是一对一的关系，但是在实际开发中，往往有很多一对多的关系，一个 value 可能会对应好几个值。</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2023-01-03-055329.png" alt="image-20230103135329257" style="zoom:33%;"><p>复习一下和二进制相关的运算：</p><ul><li>与（ &amp; ）：只要有一位数为 0，那么最终结果就是 0，也就是说，必须两位都是 1，最终结果才是 1</li><li>或（ | ）: 只要有一位数是 1，那么最终结果就是 1，也就是说必须两个都是 0，最终才是 0</li><li>非 （ ~ ）: 对一个二进制数逐位取反，也就是说 0、1 互换</li><li>异或（ ^ ）: 如果两个二进制位不相同，那么结果就为 1，相同就为 0</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">1</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">0000</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0001</span></span>
<span class="line"><span style="color:#F78C6C;">0000</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0001</span></span>
<span class="line"><span style="color:#89DDFF;">---------</span></span>
<span class="line"><span style="color:#F78C6C;">0000</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0001</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">0000</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0001</span></span>
<span class="line"><span style="color:#F78C6C;">0000</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0000</span></span>
<span class="line"><span style="color:#89DDFF;">---------</span></span>
<span class="line"><span style="color:#F78C6C;">0000</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">0000</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0001</span></span>
<span class="line"><span style="color:#F78C6C;">0000</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0000</span></span>
<span class="line"><span style="color:#89DDFF;">---------</span></span>
<span class="line"><span style="color:#F78C6C;">0000</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0001</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">^</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">0000</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0001</span></span>
<span class="line"><span style="color:#F78C6C;">0000</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0000</span></span>
<span class="line"><span style="color:#89DDFF;">---------</span></span>
<span class="line"><span style="color:#F78C6C;">0000</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0001</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">~</span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#F78C6C;">0000</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0011</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 逐位取反</span></span>
<span class="line"><span style="color:#F78C6C;">1111</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1100</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 计算结果最终为 -4（涉及到补码的知识）</span></span></code></pre></div><p>接下来我们来看一下位运算在权限系统里面的实际运用：</p><table><thead><tr><th style="text-align:center;">下载</th><th style="text-align:center;">打印</th><th style="text-align:center;">查看</th><th style="text-align:center;">审核</th><th style="text-align:center;">详细</th><th style="text-align:center;">删除</th><th style="text-align:center;">编辑</th><th style="text-align:center;">创建</th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr></tbody></table><p>如果是 0，代表没有权限，如果是 1，代表有权限</p><p>0000 0001 代表只有创建的权限，0010 0011 代表有查看、编辑以及创建的权限</p><p><strong>添加权限</strong></p><p>直接使用或运算即可。</p><p>0000 0011 目前有创建和编辑的权限，我们要给他添加一个查看的权限 0010 0000</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">0000</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0011</span></span>
<span class="line"><span style="color:#F78C6C;">0010</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0000</span></span>
<span class="line"><span style="color:#89DDFF;">---------</span></span>
<span class="line"><span style="color:#F78C6C;">0010</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0011</span></span></code></pre></div><p><strong>删除权限</strong></p><p>可以使用异或</p><p>0010 0011 目前有查看、编辑和创建，取消编辑的权限 0000 0010</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">0010</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0011</span></span>
<span class="line"><span style="color:#F78C6C;">0000</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0010</span></span>
<span class="line"><span style="color:#89DDFF;">---------</span></span>
<span class="line"><span style="color:#F78C6C;">0010</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0001</span></span></code></pre></div><p><strong>判断是否有某一个权限</strong></p><p>可以使用与来进行判断</p><p>0011 1100（查看、审核、详细、删除），判断是否有查看（0010 0000）权限、再判断是否有创建（0000 0001）权限</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">0011</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1100</span></span>
<span class="line"><span style="color:#F78C6C;">0010</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0000</span></span>
<span class="line"><span style="color:#89DDFF;">---------</span></span>
<span class="line"><span style="color:#F78C6C;">0010</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 判断是否有“查看”权限，做与操作时得到了“查看”权限值本身，说明有这个权限</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">0011</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1100</span></span>
<span class="line"><span style="color:#F78C6C;">0000</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0001</span></span>
<span class="line"><span style="color:#89DDFF;">---------</span></span>
<span class="line"><span style="color:#F78C6C;">0000</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 最终得到的值为 0，说明没有此权限</span></span></code></pre></div><p>通过上面的例子，我们会发现使用位运算确确实实非常的方便，接下来我们就来看一下 React 中针对位运算的使用。</p><h2 id="react-中的位运算-1" tabindex="-1">React 中的位运算 <a class="header-anchor" href="#react-中的位运算-1" aria-label="Permalink to &quot;React 中的位运算&quot;">​</a></h2><ul><li>fiber 的 flags</li><li>lane 模型</li><li>上下文</li></ul><p><strong>fiber 的 flags</strong></p><p>在 React 中，用来标记 fiber 操作的 flags，使用的就是二进制：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> NoFlags </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">/*                      */</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b000000000000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> PerformedWork </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">/*                */</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b000000000000000000000000001</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Placement </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">/*                    */</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b000000000000000000000000010</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> DidCapture </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">/*                   */</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b000000000000000000010000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Hydrating </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">/*                    */</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b000000000000001000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span></code></pre></div><p>这些 flags 就是用来标记 fiber 状态的。</p><p>之所以要专门抽离 fiber 的状态，是因为这种操作是非常高效的。针对一个 fiber 的操作，可能有增加、删除、修改，但是我不直接进行操作，而是给这个 fiber 打上一个 flag，接下来在后面的流程中针对有 flag 的 fiber 统一进行操作。</p><p>通过位运算，就可以很好的解决一个 fiber 有多个 flag 标记的问题，方便合并多个状态</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 初始化一些 flags</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> NoFlags </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b00000000000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> PerformedWork </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b00000000000000000000000001</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Placement </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b00000000000000000000000010</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Update </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b00000000000000000000000100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 一开始将 flag 变量初始化为没有 flag，也就是 NoFlags</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> flag </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> NoFlags</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这里就是在合并多个状态</span></span>
<span class="line"><span style="color:#BABED8;">flag </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> flag </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> PerformedWork </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> Update</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 要判断是否有某一个 flag，直接通过 &amp; 来进行判断即可</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//判断是否有  PerformedWork 种类的更新</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (flag </span><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;"> PerformedWork) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//执行</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">执行 PerformedWork</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//判断是否有 Update 种类的更新</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (flag </span><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;"> Update) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//执行</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">执行 Update</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (flag </span><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;"> Placement) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//不执行</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">执行 Placement</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><strong>lane 模型</strong></p><p>lane 模型也是一套优先级机制，相比 Scheduler，lane 模型能够对任务进行更细粒度的控制。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> NoLanes</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Lanes</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">/*                        */</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b0000000000000000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> NoLane</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">/*                          */</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b0000000000000000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> SyncLane</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">/*                        */</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b0000000000000000000000000000001</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> InputContinuousHydrationLane</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">/*    */</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b0000000000000000000000000000010</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> InputContinuousLane</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">/*             */</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b0000000000000000000000000000100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span></code></pre></div><p>例如在 React 源码中，有一段如下的代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// lanes 一套 lane 的组合</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">getHighestPriorityLanes</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">lanes</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 从 lanes 这一套组合中，分离出优先级最高的 lane</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">getHighestPriorityLane</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">lanes</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">SyncLane</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">SyncLane</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">InputContinuousHydrationLane</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">InputContinuousHydrationLane</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">InputContinuousLane</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">InputContinuousLane</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">lanes</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// lane 在表示优先级的时候，大致是这样的：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0000 0001</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0000 0010</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0010 0000</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// lanes 表示一套 lane 的组合，比如上面的三个 lane 组合到一起就变成了一个 lanes 0010 0011</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// getHighestPriorityLane 这个方法要做的事情就是分离出优先级最高的</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0010 0011 ----&gt; getHighestPriorityLane -----&gt; 0000 0001</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">getHighestPriorityLane</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">lanes</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">lanes</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">lanes</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>假设现在我们针对两个 lane 进行合并</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> SyncLane</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">/*                        */</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b0000000000000000000000000000001</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> InputContinuousLane</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">/*             */</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b0000000000000000000000000000100</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>合并出来就是一个 lanes，合并出来的结果如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">0b0000000000000000000000000000001</span></span>
<span class="line"><span style="color:#F78C6C;">0b0000000000000000000000000000100</span></span>
<span class="line"><span style="color:#89DDFF;">---------------------------------</span></span>
<span class="line"><span style="color:#F78C6C;">0b0000000000000000000000000000101</span></span></code></pre></div><p>0b0000000000000000000000000000101 是我们的 lanes，接下来取负值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">lanes </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b1111111111111111111111111111011</span></span></code></pre></div><p>最后一步，再和本身的 lanes 做一个 &amp; 操作：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">0b0000000000000000000000000000101</span></span>
<span class="line"><span style="color:#F78C6C;">0b1111111111111111111111111111011</span></span>
<span class="line"><span style="color:#89DDFF;">---------------------------------</span></span>
<span class="line"><span style="color:#F78C6C;">0b0000000000000000000000000000001</span></span></code></pre></div><p>经过 &amp; 操作之后，就把优先级最高的 lane 给分离出来了。</p><p><strong>上下文</strong></p><p>在 React 源码内部，有多个上下文：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 未处于 React 上下文</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> NoContext </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">/*             */</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 处于 batchedUpdates 上下文</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> BatchedContext </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">/*               */</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b001</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 处于 render 阶段</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> RenderContext </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">/*         */</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b010</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 处于 commit 阶段</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> CommitContext </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">/*         */</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0b100</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>当执行流程到了 render 阶段，那么接下来就会切换上下文，切换到 RenderContext</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> executionContext </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> NoContext</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 一开始初始化为没有上下文</span></span>
<span class="line"><span style="color:#BABED8;">executionContext </span><span style="color:#89DDFF;">|=</span><span style="color:#BABED8;"> RenderContext</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在执行方法的时候，就会有一个判断，判断当前处于哪一个上下文</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 是否处于 RenderContext 上下文中，结果为 true</span></span>
<span class="line"><span style="color:#BABED8;">((executionContext </span><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;"> RenderContext) </span><span style="color:#89DDFF;">!==</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#82AAFF;">NoContext</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 是否处于 CommitContext 上下文中，结果为 false</span></span>
<span class="line"><span style="color:#BABED8;">        executionContext </span><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;"> CommitContext</span></span>
<span class="line"><span style="color:#BABED8;">    )) </span><span style="color:#89DDFF;">!==</span></span>
<span class="line"><span style="color:#BABED8;">    NoContext</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>如果要离开某一个上下文</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 从当前上下文中移除 RenderContext 上下文</span></span>
<span class="line"><span style="color:#BABED8;">executionContext </span><span style="color:#89DDFF;">&amp;=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">~</span><span style="color:#BABED8;">RenderContext</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 是否处于 RenderContext 上下文中，结果为 false</span></span>
<span class="line"><span style="color:#BABED8;">(executionContext </span><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;"> CommitContext) </span><span style="color:#89DDFF;">!==</span><span style="color:#BABED8;"> NoContext</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="真题解答" tabindex="-1">真题解答 <a class="header-anchor" href="#真题解答" aria-label="Permalink to &quot;真题解答&quot;">​</a></h2><blockquote><p>题目：React 中哪些地方用到了位运算？</p><p>参考答案：</p><p>位运算可以很方便的表达“增、删、改、查”。在 React 内部，像 flags、状态、优先级等操作都大量使用到了位运算。</p><p>细分下来主要有如下的三个地方：</p><ul><li>fiber 的 flags</li><li>lane 模型</li><li>上下文</li></ul></blockquote>`,70),o=[t];function e(c,r,y,D,F,i){return n(),a("div",null,o)}const C=s(p,[["render",e]]);export{E as __pageData,C as default};
