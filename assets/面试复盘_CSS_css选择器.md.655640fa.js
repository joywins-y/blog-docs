import{_ as e,o as l,c as t,V as i}from"./chunks/framework.bd00fe0c.js";const N=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"面试复盘/CSS/css选择器.md","filePath":"面试复盘/CSS/css选择器.md","lastUpdated":null}'),s={name:"面试复盘/CSS/css选择器.md"},S=i("<p>CSS 中有哪些选择器</p><ol><li>ID 选择器 #id 100</li><li>类选择器（.class）、属性选择器([attr=value])、伪类选择器(:hover, :active, :focus) 10</li><li>元素选择器（div）、伪元素选择器(::before, ::after) 1</li><li>通配符选择器（*）</li></ol><p>Next.js 提供了先进的服务端渲染（SSR）和静态网站生成（SSG）能力，使得我们能够在服务器上生成动态内容并将其直接发送给客户端，从而大大减少首次加载的等待时间。这样可以提高网站性能、搜索引擎优化（SEO）以及用户体验。</p><p>Next.js 的 SSR 和 SSG 的区别在于： SSR：在服务器上生成 HTML，然后发送给客户端。 SSG：在构建时生成 HTML，然后发送给客户端。</p><p>Next.js 的优点：</p><ol><li>快速加载：Next.js 使用了服务端渲染（SSR），在服务器上生成 HTML，然后发送给客户端，从而减少了客户端等待时间。</li><li>SEO 友好：Next.js 的 SSR 可以在搜索引擎中 ranking。</li><li>良好的用户体验：Next.js 的 SSR 可以提供更好的用户体验，因为客户端不需要等待页面加载完成。 Next.js 的缺点：</li><li>服务器负载：Next.js 的 SSR 需要在服务器上生成 HTML，这会增加服务器的负载。</li><li>缓存问题：Next.js 的 SSR 需要在服务器上生成 HTML，这会增加缓存问题。</li></ol><p>Next.js 的优点：</p><ul><li>支持高效的服务端渲染和静态页面生成能力</li><li>规则化的路由系统，（保证页面更有组织层次，能更好的管理多页面）</li><li>规范且颗粒度的 API 开发模式（更好的规范接口和业务调用）</li><li>支持复杂系统的搭建（优雅的 SPA 单页模式和 MPA 多页面模式）</li><li>部署和开发成本很低（前后端同构更优雅）</li></ul>",8),a=[S];function _(o,c,r,p,n,d){return l(),t("div",null,a)}const f=e(s,[["render",_]]);export{N as __pageData,f as default};
