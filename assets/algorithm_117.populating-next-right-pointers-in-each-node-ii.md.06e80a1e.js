import{_ as t,H as e,o as c,c as r,C as s,J as a,E as p,a as n,V as o}from"./chunks/framework.bd00fe0c.js";const g=JSON.parse('{"title":"117. 填充每个节点的下一个右侧节点指针 II","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/117.populating-next-right-pointers-in-each-node-ii.md","filePath":"algorithm/117.populating-next-right-pointers-in-each-node-ii.md","lastUpdated":1698995422000}'),y={name:"algorithm/117.populating-next-right-pointers-in-each-node-ii.md"},D=o('<h1 id="_117-填充每个节点的下一个右侧节点指针-ii" tabindex="-1">117. 填充每个节点的下一个右侧节点指针 II <a class="header-anchor" href="#_117-填充每个节点的下一个右侧节点指针-ii" aria-label="Permalink to &quot;117. 填充每个节点的下一个右侧节点指针 II&quot;">​</a></h1><blockquote><p>难度：<span style="color:#ffb800;font-weight:500;">中等</span></p><p>地址：<a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/description/" target="_blank" rel="noreferrer">https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/description/</a></p></blockquote><p>给定一个二叉树：</p><blockquote><p>struct Node { int val; Node *left; Node *right; Node *next; }</p></blockquote><p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 <code>NULL</code> 。</p><p>初始状态下，所有 next 指针都被设置为 <code>NULL</code> 。</p><p><strong>示例 1：</strong></p>',7),i=s("p",null,[s("strong",null,"示例 2：")],-1),F=o(`<p><strong>提示：</strong></p><ul><li>树中的节点数在范围 <code>[0, 6000]</code> 内</li><li>-<code>100 &lt;= Node.val &lt;= 100</code></li></ul><p><strong>进阶：</strong></p><ul><li>你只能使用常量级额外空间。</li><li>使用递归解题也符合要求，本题中递归程序的隐式栈空间不计入额外空间复杂度。</li></ul><p><strong>题解：</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * // Definition for a Node.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * function Node(val, left, right, next) {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *    this.val = val === undefined ? null : val;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *    this.left = left === undefined ? null : left;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *    this.right = right === undefined ? null : right;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *    this.next = next === undefined ? null : next;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * };</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">Node</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#BABED8;font-style:italic;">root</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">Node</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> connect </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">root</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">root</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">queue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#BABED8;">root</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">last</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">n</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">f</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shift</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">f</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#BABED8;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">f</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">left</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">f</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#BABED8;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">f</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">right</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#BABED8;">last</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#BABED8;">last</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">root</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Definition for a Node.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">class Node {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    public int val;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    public Node left;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    public Node right;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    public Node next;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    public Node() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    public Node(int _val) {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        val = _val;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    public Node(int _val, Node _left, Node _right, Node _next) {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        val = _val;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        left = _left;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        right = _right;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        next = _next;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Solution</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">public</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">Node</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">connect</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Node</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">root</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">root </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">null)</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> root</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//cur我们可以把它看做是每一层的链表</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#C792EA;">Node</span><span style="color:#BABED8;"> cur </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> root</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">cur </span><span style="color:#89DDFF;">!=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//遍历当前层的时候，为了方便操作在下一</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//层前面添加一个哑结点（注意这里是访问</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//当前层的节点，然后把下一层的节点串起来）</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#C792EA;">Node</span><span style="color:#BABED8;"> dummy </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Node</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//pre表示访下一层节点的前一个节点</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#C792EA;">Node</span><span style="color:#BABED8;"> pre </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> dummy</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//然后开始遍历当前层的链表</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">cur </span><span style="color:#89DDFF;">!=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">left </span><span style="color:#89DDFF;">!=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//如果当前节点的左子节点不为空，就让pre节点</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//的next指向他，也就是把它串起来</span></span>
<span class="line"><span style="color:#BABED8;">                    pre</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">left</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//然后再更新pre</span></span>
<span class="line"><span style="color:#BABED8;">                    pre </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> pre</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//同理参照左子树</span></span>
<span class="line"><span style="color:#BABED8;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">right </span><span style="color:#89DDFF;">!=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">                    pre</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">right</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">                    pre </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> pre</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//继续访问这一行的下一个节点</span></span>
<span class="line"><span style="color:#BABED8;">                cur </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//把下一层串联成一个链表之后，让他赋值给cur，</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//后续继续循环，直到cur为空为止</span></span>
<span class="line"><span style="color:#BABED8;">            cur </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> dummy</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> root</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,7);function B(E,A,f,u,d,h){const l=e("font");return c(),r("div",null,[D,s("blockquote",null,[s("p",null,[s("strong",null,[a(l,{color:"#000"},{default:p(()=>[n("输入")]),_:1})]),n("：root = [1,2,3,4,5,null,7]")]),s("p",null,[s("strong",null,[a(l,{color:"#000"},{default:p(()=>[n("输出")]),_:1})]),n("：[1,#,2,3,#,4,5,7,#]")]),s("p",null,[s("strong",null,[a(l,{color:"#000"},{default:p(()=>[n("解释")]),_:1})]),n("：给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。序列化输出按层序遍历顺序（由 next 指针连接），'#' 表示每层的末尾。")])]),i,s("blockquote",null,[s("p",null,[s("strong",null,[a(l,{color:"#000"},{default:p(()=>[n("输入")]),_:1})]),n("：root = []")]),s("p",null,[s("strong",null,[a(l,{color:"#000"},{default:p(()=>[n("输出")]),_:1})]),n("：[]")])]),F])}const N=t(y,[["render",B]]);export{g as __pageData,N as default};
