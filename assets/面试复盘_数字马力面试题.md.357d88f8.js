import{_ as s,o as a,c as n,V as l}from"./chunks/framework.bd00fe0c.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"面试复盘/数字马力面试题.md","filePath":"面试复盘/数字马力面试题.md","lastUpdated":1710263029000}'),o={name:"面试复盘/数字马力面试题.md"},p=l(`<h2 id="自我介绍" tabindex="-1">自我介绍 <a class="header-anchor" href="#自我介绍" aria-label="Permalink to &quot;自我介绍&quot;">​</a></h2><p>面试官，你好，我叫刘艳兰。 21 年毕业于湖南工学院，软件工程专业，有 3 年前端工作经验，之前在四只悟空公司工作。技术栈主要是 React 生态相关。开发的项目主要是 gocart 购物网站平台，是包括 web、wap 端和 cms、oms 的，前台网站使用 Nextjs 框架搭建，后台使用 Umi 框架搭建。目前项目已经成功上线使用。ops 和一套关联的公司内部管理系统，运营系统，包括权限管理、订单管理、商品管理等运营相关内容。在过去的团队中，主要承担的任务是进行项目需求的开发和维护工作。</p><h2 id="_1-介绍一下项目" tabindex="-1">1. 介绍一下项目 <a class="header-anchor" href="#_1-介绍一下项目" aria-label="Permalink to &quot;1. 介绍一下项目&quot;">​</a></h2><h2 id="_2-前端权限怎么做-token-的作用" tabindex="-1">2. 前端权限怎么做，token 的作用 <a class="header-anchor" href="#_2-前端权限怎么做-token-的作用" aria-label="Permalink to &quot;2. 前端权限怎么做，token 的作用&quot;">​</a></h2><p>添加一个 src/access.js 文件为我们的权限定义文件，在 routes.js 文件里面添加一些权限字段（比如：access 字段、authority 字段）</p><p>cms 中使用 umi max 的 useAccess 和 Access</p><p>使用 Access 包裹元素，使用 useAccess 获取权限相关信息</p><p>比如 access.canAuthority、 access.canBuAdmin 为 true 或 false</p><h2 id="_3-js-事件循环机制" tabindex="-1">3. js 事件循环机制 <a class="header-anchor" href="#_3-js-事件循环机制" aria-label="Permalink to &quot;3. js 事件循环机制&quot;">​</a></h2><p>事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。</p><p>在 Chrome 的源码中，它开启一个不会结束的 for 循环，每次循环从消息队列中取出第一个任务执行，其他线程只需要在合适的时候将任务加入队列末尾即可。</p><p>过去讲消息队列简单的分为宏队列和微队列，这种说法已经无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。</p><p>根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在一个队列，不同的任务可以属于不同的队列。不同的任务队列有不同的优先级。在一次事件循环中，由浏览器自行决定，取哪个队列的任务执行。但是浏览器必须有一个微队列，微队列的任务的优先级是最高的，必须优先调度执行。</p><p>常见的微任务有： Promise.then MutationObserver Object.observer（目前已废弃，Proxy 对象替代） process.nextTick (nodejs)</p><p>常见的宏任务： script（可以理解为外层同步代码） setTimeout / setInterval UI rendering / UI 事件 postMessage、MessageChannel setImmediate、I/O（输入输出事件）（nodejs）</p><h2 id="内存泄露" tabindex="-1">内存泄露 <a class="header-anchor" href="#内存泄露" aria-label="Permalink to &quot;内存泄露&quot;">​</a></h2><p>内存泄露是指由于疏忽或错误造成程序没有及时释放已经不再使用的内存。对于持续运行的服务进程，必须及时释放不再用到的内存，否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃。</p><p>自动内存管理，减轻程序员的负担，这被称为“垃圾回收机制”</p><p><strong>不再需要的内存</strong> - 垃圾 <strong>无法触达的内存</strong> - 回收 <strong>不再需要但还能触达的内存</strong> - 内存泄露 <strong>无法触达但也回收不了的内存</strong> - 内存泄露</p><p>闭包会不会导致内存泄露？会 为什么？ 因为：</p><ol><li><p>持有了不再需要的函数引用，会导致函数关联的词法环境无法销毁，从而导致内存泄露。</p></li><li><p>当多个函数共享词法环境时，会导致词法环境膨胀，从而导致出现无法触达也无法回收的内存空间，从而导致内存泄露。</p></li></ol><h2 id="垃圾回收机制" tabindex="-1">垃圾回收机制 <a class="header-anchor" href="#垃圾回收机制" aria-label="Permalink to &quot;垃圾回收机制&quot;">​</a></h2><p>JS 具有自动垃圾回收机制，也就是说，执行环境会负责管理代码执行过程中使用的内存</p><p>原理：垃圾收集器会定期（周期性）找出那些不再继续使用的变量，然后释放其内存</p><p>通常情况下有两种实现方式：</p><ul><li><p>标记清除（主要使用）</p></li><li><p>引用计数（效率高，有缺陷）</p></li></ul><h3 id="标记清除" tabindex="-1">标记清除 <a class="header-anchor" href="#标记清除" aria-label="Permalink to &quot;标记清除&quot;">​</a></h3><p>当变量进入执行环境，就标记这个变量为“进入环境”。进入环境的变量所占用的内存就不能释放，当变量离开环境时，则将其标记为“离开环境”。</p><p>垃圾回收程序运行的时候，会标记内存中存储的所有变量。然后，它会将所有在上下文中的变量，以及被在上下文的变量引用的变量的标记去掉。</p><p>在此之后再被加上标记的变量就是待删除的了，原因是任何上下文中的变量都访问不到它们了。</p><p>随后垃圾回收程序做一次内存清理，销毁带标记的所有值并回收它们的内存。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> m </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    n </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">19</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 把 m、n、add() 标记为进入环境</span></span>
<span class="line"><span style="color:#82AAFF;">add</span><span style="color:#BABED8;">(m</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> n)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 把 a、b、c 标记进入环境</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(n)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// a、b、c 标记为离开环境，等待垃圾回收</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">c</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="引用计数" tabindex="-1">引用计数 <a class="header-anchor" href="#引用计数" aria-label="Permalink to &quot;引用计数&quot;">​</a></h3><p>语言引擎有一张“引用表”，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是 0，就表示这个值不再用到了，因此可以将这块内存释放。</p><p>如果一个值不再需要了，引用数却不为 0，垃圾回收机制无法释放这块内存，从而导致内存泄漏。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>上面代码中，数组[1, 2, 3]是一个值，会占用内存。变量 arr 是仅有的对这个值的引用，因此引用次数为 1。尽管后面的代码没有用到 arr，它还是会持续占用内存。</p><p>如果需要这块被垃圾回收机制释放，只需要设置如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">arr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">null;</span></span></code></pre></div><p>通过设置 arr 为 null，就解除了对数组[1, 2, 3]的引用，引用次数为 0，就被垃圾回收了。</p><h3 id="常见的内存泄漏情况" tabindex="-1">常见的内存泄漏情况 <a class="header-anchor" href="#常见的内存泄漏情况" aria-label="Permalink to &quot;常见的内存泄漏情况&quot;">​</a></h3><ol><li>意外的全局变量</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">tag</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">bar</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>另一种意外的全局变量可能有 this 创建</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// foo 调用自己，this 指向了全局对象（window）</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>以上使用严格模式，可以避免意外的全局变量</p><ol start="2"><li>定时器也可能造成内存泄漏</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> someResource </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">getData</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">setInterval</span><span style="color:#BABED8;">(</span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">node</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Node</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">node</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 处理 node 和 someResource</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">node</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">innerHTML</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">someResource</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>如果 id 为 Node 的元素从 DOM 中移除，定时器仍会存在。同时，因为回调函数中对 someResource 的引用，定时器外面的 someResource 也不会被释放。</p><p>包括我们之前所说的闭包，维持函数内局部变量，使其得不到释放。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">bindEvent</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">unused</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">闭包内引用obj，obj不会被释放</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 解决办法</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>没有清理对 DOM 元素的引用同样造成内存泄漏</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> refA </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">refA</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeChild</span><span style="color:#BABED8;">(refA)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// dom 删除了</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(refA</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">refA</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 但是还存在引用，能输出整个 div，没有被回收</span></span>
<span class="line"><span style="color:#BABED8;">refA </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(refA</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">refA</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 解除引用</span></span></code></pre></div><p>包括使用事件监听 addEventListener 监听的时候，在不监听的情况下使用 removeEventListener 取消事件监听。</p><h2 id="_4-你对闭包的理解" tabindex="-1">4. 你对闭包的理解 <a class="header-anchor" href="#_4-你对闭包的理解" aria-label="Permalink to &quot;4. 你对闭包的理解&quot;">​</a></h2><p>一个函数对其周围状态（词法环境）的引用捆绑，这样的组合就是闭包。</p><p>也就是说，闭包可以让你在一个内层函数中访问到其外层函数的作用域。</p><p>在 js 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来，作为函数内部与外部连接起来的一座桥梁。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">joy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// name 是一个被 init 函数创建的局部变量</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">displayName</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// displayName 函数是内部函数，一个闭包</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 使用了 init 函数中声明的变量（函数外部变量）</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">displayName</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">init</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>displayName() 没有自己的局部变量。然而，由于闭包的特性，它可以访问到外部函数的变量。</p><h2 id="_5-react-渲染流程-怎么实现可中断渲染-fiber-架构" tabindex="-1">5. react 渲染流程，怎么实现可中断渲染 fiber 架构 <a class="header-anchor" href="#_5-react-渲染流程-怎么实现可中断渲染-fiber-架构" aria-label="Permalink to &quot;5. react 渲染流程，怎么实现可中断渲染 fiber 架构&quot;">​</a></h2><h2 id="_6-useeffect-依赖项不同的区别" tabindex="-1">6. useEffect 依赖项不同的区别 <a class="header-anchor" href="#_6-useeffect-依赖项不同的区别" aria-label="Permalink to &quot;6. useEffect 依赖项不同的区别&quot;">​</a></h2><h2 id="_7-css-3-动画属性有哪些-怎么在-js-中实现动画" tabindex="-1">7. css 3 动画属性有哪些？怎么在 js 中实现动画 <a class="header-anchor" href="#_7-css-3-动画属性有哪些-怎么在-js-中实现动画" aria-label="Permalink to &quot;7. css 3 动画属性有哪些？怎么在 js 中实现动画&quot;">​</a></h2><p>transition</p><p>在 js 中实现动画 requestAnimationFrame 在下一次重绘之前调用指定的回调函数更新动画</p><p>cancelAnimationFrame 取消动画</p><h2 id="_8-前端性能优化怎么做-服务端渲染是什么" tabindex="-1">8. 前端性能优化怎么做？服务端渲染是什么？ <a class="header-anchor" href="#_8-前端性能优化怎么做-服务端渲染是什么" aria-label="Permalink to &quot;8. 前端性能优化怎么做？服务端渲染是什么？&quot;">​</a></h2><h2 id="_9-最近在学什么新技术" tabindex="-1">9. 最近在学什么新技术 <a class="header-anchor" href="#_9-最近在学什么新技术" aria-label="Permalink to &quot;9. 最近在学什么新技术&quot;">​</a></h2><h2 id="_1-项目是怎么打包的" tabindex="-1">1. 项目是怎么打包的 <a class="header-anchor" href="#_1-项目是怎么打包的" aria-label="Permalink to &quot;1. 项目是怎么打包的&quot;">​</a></h2><h2 id="_2-如果从零开发一个脚手架-怎么做" tabindex="-1">2. 如果从零开发一个脚手架，怎么做 <a class="header-anchor" href="#_2-如果从零开发一个脚手架-怎么做" aria-label="Permalink to &quot;2. 如果从零开发一个脚手架，怎么做&quot;">​</a></h2><h2 id="_3-两种打包方式感觉有什么差异" tabindex="-1">3. 两种打包方式感觉有什么差异 <a class="header-anchor" href="#_3-两种打包方式感觉有什么差异" aria-label="Permalink to &quot;3. 两种打包方式感觉有什么差异&quot;">​</a></h2><h2 id="_4-vite-的按需加载怎么实现的" tabindex="-1">4. vite 的按需加载怎么实现的 <a class="header-anchor" href="#_4-vite-的按需加载怎么实现的" aria-label="Permalink to &quot;4. vite 的按需加载怎么实现的&quot;">​</a></h2><h2 id="_5-webpack-也可以热更新-增量-patch-怎么实现的" tabindex="-1">5. webpack 也可以热更新，增量 patch 怎么实现的？ <a class="header-anchor" href="#_5-webpack-也可以热更新-增量-patch-怎么实现的" aria-label="Permalink to &quot;5. webpack 也可以热更新，增量 patch 怎么实现的？&quot;">​</a></h2><h2 id="_6-sass-是怎么转换成-css-的" tabindex="-1">6. sass 是怎么转换成 css 的 <a class="header-anchor" href="#_6-sass-是怎么转换成-css-的" aria-label="Permalink to &quot;6. sass 是怎么转换成 css 的&quot;">​</a></h2><h2 id="_7-项目中登录流程如何实现的-模板适配什么意思" tabindex="-1">7. 项目中登录流程如何实现的，模板适配什么意思？ <a class="header-anchor" href="#_7-项目中登录流程如何实现的-模板适配什么意思" aria-label="Permalink to &quot;7. 项目中登录流程如何实现的，模板适配什么意思？&quot;">​</a></h2><h2 id="_8-token-是存在哪里的-存在-cookie-和-localstorage-有什么区别-代码如何修改" tabindex="-1">8. token 是存在哪里的？存在 cookie 和 localStorage 有什么区别？代码如何修改？ <a class="header-anchor" href="#_8-token-是存在哪里的-存在-cookie-和-localstorage-有什么区别-代码如何修改" aria-label="Permalink to &quot;8. token 是存在哪里的？存在 cookie 和 localStorage 有什么区别？代码如何修改？&quot;">​</a></h2><h2 id="_9-倒计时函数怎么实现的" tabindex="-1">9. 倒计时函数怎么实现的？ <a class="header-anchor" href="#_9-倒计时函数怎么实现的" aria-label="Permalink to &quot;9. 倒计时函数怎么实现的？&quot;">​</a></h2><h2 id="_10-前端常见的网络攻击有了解吗" tabindex="-1">10. 前端常见的网络攻击有了解吗？ <a class="header-anchor" href="#_10-前端常见的网络攻击有了解吗" aria-label="Permalink to &quot;10. 前端常见的网络攻击有了解吗？&quot;">​</a></h2><h2 id="_11-项目中的难点" tabindex="-1">11. 项目中的难点 <a class="header-anchor" href="#_11-项目中的难点" aria-label="Permalink to &quot;11. 项目中的难点&quot;">​</a></h2><h2 id="_12-怎么学习-vue-的" tabindex="-1">12. 怎么学习 vue 的 <a class="header-anchor" href="#_12-怎么学习-vue-的" aria-label="Permalink to &quot;12. 怎么学习 vue 的&quot;">​</a></h2><h2 id="_13-学习过程中为什么一些自定义指令的使用会让你感到印象深刻" tabindex="-1">13. 学习过程中为什么一些自定义指令的使用会让你感到印象深刻 <a class="header-anchor" href="#_13-学习过程中为什么一些自定义指令的使用会让你感到印象深刻" aria-label="Permalink to &quot;13. 学习过程中为什么一些自定义指令的使用会让你感到印象深刻&quot;">​</a></h2><h2 id="_14-最近学习了哪些前端内容" tabindex="-1">14. 最近学习了哪些前端内容 <a class="header-anchor" href="#_14-最近学习了哪些前端内容" aria-label="Permalink to &quot;14. 最近学习了哪些前端内容&quot;">​</a></h2><h2 id="_15-如果加入团队-发现和学习知识不一样-如何克服" tabindex="-1">15. 如果加入团队，发现和学习知识不一样，如何克服 <a class="header-anchor" href="#_15-如果加入团队-发现和学习知识不一样-如何克服" aria-label="Permalink to &quot;15. 如果加入团队，发现和学习知识不一样，如何克服&quot;">​</a></h2>`,83),e=[p];function t(c,r,y,F,i,D){return a(),n("div",null,e)}const B=s(o,[["render",t]]);export{d as __pageData,B as default};
