import{_ as a,o as e,c as s,V as t}from"./chunks/framework.bd00fe0c.js";const o="/blog-docs/assets/cover-picture-03.1864d1a1.png",p="/blog-docs/assets/03-HTTP请求流程：为什么很多站点第二次打开速度会很快？.8509e441.mp3",n="/blog-docs/assets/tcp-http.66feaf61.png",l="/blog-docs/assets/send-http.148ac207.png",r="/blog-docs/assets/image.6bf63683.png",i="/blog-docs/assets/image-1.1bf4596f.png",c="/blog-docs/assets/image-2.d841d6a2.png",g="/blog-docs/assets/image-3.c4392a62.png",h="/blog-docs/assets/image-4.2758f38a.png",D=JSON.parse('{"title":"03 | HTTP 请求流程：为什么很多站点第二次打开速度会很快？","description":"","frontmatter":{},"headers":[],"relativePath":"browser/宏观视角下的浏览器 (6讲)/03 | HTTP请求流程：为什么很多站点第二次打开速度会很快？.md","filePath":"browser/宏观视角下的浏览器 (6讲)/03 | HTTP请求流程：为什么很多站点第二次打开速度会很快？.md","lastUpdated":1689231811000}'),T={name:"browser/宏观视角下的浏览器 (6讲)/03 | HTTP请求流程：为什么很多站点第二次打开速度会很快？.md"},d=t('<h1 id="_03-http-请求流程-为什么很多站点第二次打开速度会很快" tabindex="-1">03 | HTTP 请求流程：为什么很多站点第二次打开速度会很快？ <a class="header-anchor" href="#_03-http-请求流程-为什么很多站点第二次打开速度会很快" aria-label="Permalink to &quot;03 | HTTP 请求流程：为什么很多站点第二次打开速度会很快？&quot;">​</a></h1><p><img src="'+o+'" alt="Alt text"></p><audio preload="none" controls loop style="width:100%;"><source src="'+p+'" type="audio/mpeg"><p>你的浏览器不支持HTML5音频，你可以<a href="../mp3/03-HTTP请求流程：为什么很多站点第二次打开速度会很快？.mp3">下载</a>这个音频文件</p></audio><p>一个 TCP 连接过程包括了建立连接、传输数据和断开连接三个阶段。</p><p>而 HTTP 协议，正是建立在 TCP 连接基础之上的。<strong>HTTP 是一种允许浏览器向服务器获取资源的协议，是 Web 的基础</strong>，通常由浏览器发起请求，用来获取不同类型的文件，例如 HTML 文件、CSS 文件、JavaScript 文件、图片、视频等。此外，<strong>HTTP 也是浏览器使用最广的协议</strong>，所以要想学好浏览器，就要先深入了解 HTTP。</p><p>不知道你是否有过下面这些疑问：</p><ol><li><p>为什么通常在第一次访问一个站点时，打开速度很慢，当再次访问这个站点时，速度就很快了？</p></li><li><p>当登录过一个网站之后，下次再访问该站点，就已经处于登录状态了，这是怎么做到的呢？</p></li></ol><p>这一切的秘密都隐藏在 HTTP 的请求过程中。所以，在今天这篇文章中，我将通过分析一个 HTTP 请求过程中每一步的状态来带你了解完整的 HTTP 请求过程，希望你看完这篇文章后，能够对 HTTP 协议有个全新的认识</p><h2 id="浏览器端发起-http-请求流程" tabindex="-1">浏览器端发起 HTTP 请求流程 <a class="header-anchor" href="#浏览器端发起-http-请求流程" aria-label="Permalink to &quot;浏览器端发起 HTTP 请求流程&quot;">​</a></h2><p>如果你在浏览器地址栏里键入地址：<a href="http://baidu.com" target="_blank" rel="noreferrer"><code>http://baidu.com</code></a>， 那么接下来，浏览器会完成哪些动作呢？下面我们就一步一步详细“追踪”下。</p><h3 id="_1-构建请求" tabindex="-1">1. 构建请求 <a class="header-anchor" href="#_1-构建请求" aria-label="Permalink to &quot;1. 构建请求&quot;">​</a></h3><p>首先，浏览器构建请求行信息（如下所示），构建好后，浏览器准备发起网络请求</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">GET </span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">index</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">html HTTP1</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">1</span></span></code></pre></div><h3 id="_2-查找缓存" tabindex="-1">2. 查找缓存 <a class="header-anchor" href="#_2-查找缓存" aria-label="Permalink to &quot;2. 查找缓存&quot;">​</a></h3><p>在真正发起网络请求之前，浏览器会先在浏览器缓存中查询是否有要请求的文件。其中，浏览器缓存是一种在本地保存资源副本，以供下次请求时直接使用的技术。</p><p>当浏览器发现请求的资源已经在浏览器缓存中存有副本，它会拦截请求，返回该资源的副本，并直接结束请求，而不会再去源服务器重新下载。这样做的好处有：</p><ul><li>缓解服务器端压力，提升性能（获取资源的耗时更短了）；</li><li>对于网站来说，缓存是实现快速资源加载的重要组成部分。</li></ul><p>当然，如果缓存查找失败，就会进入网络请求过程了。</p><h3 id="_3-准备-ip-地址和端口" tabindex="-1">3. 准备 IP 地址和端口 <a class="header-anchor" href="#_3-准备-ip-地址和端口" aria-label="Permalink to &quot;3. 准备 IP 地址和端口&quot;">​</a></h3><p>不过，先不急，在了解网络请求之前，我们需要先看看 HTTP 和 TCP 的关系。因为浏览器使用 HTTP 协议作为应用层协议，用来封装请求的文本信息；并使用 TCP/IP 作传输层协议将它发到网络上，所以在 HTTP 工作开始之前，浏览器需要通过 TCP 与服务器建立连接。也就是说 HTTP 的内容是通过 TCP 的传输数据阶段来实现的，你可以结合下图更好地理解这二者的关系。</p><p><img src="'+n+'" alt="TCP和HTTP的关系示意图" title="TCP和HTTP的关系示意图"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">TCP和HTTP的关系示意图</div><p>那接下来你可以思考这么“一连串”问题：</p><ul><li>HTTP 网络请求的第一步是做什么呢？结合上图看，是和服务器建立 TCP 连接。</li><li>那建立连接的信息都有了吗？上一篇文章中，我们讲到建立 TCP 连接的第一步就是需要准备 IP 地址和端口号。</li><li>那怎么获取 IP 地址和端口号呢？这得看看我们现在有什么，我们有一个 URL 地址，那么是否可以利用 URL 地址来获取 IP 和端口信息呢？</li></ul><p>在上一篇文章中，我们介绍过数据包都是通过 IP 地址传输给接收方的。由于 IP 地址是数字标识，比如极客时间网站的 IP 是 39.106.233.176, 难以记忆，但使用极客时间的域名（time.geekbang.org）就好记多了，所以基于这个需求又出现了一个服务，负责把域名和 IP 地址做一一映射关系。这套域名映射为 IP 的系统就叫做“域名系统”，简称 DNS（Domain Name System）。</p><p>所以，这样一路推导下来，你会发现在第一步浏览器会请求 DNS 返回域名对应的 IP。当然浏览器还提供了 DNS 数据缓存服务，如果某个域名已经解析过了，那么浏览器会缓存解析的结果，以供下次查询时直接使用，这样也会减少一次网络请求</p><p>拿到 IP 之后，接下来就需要获取端口号了。通常情况下，如果 URL 没有特别指明端口号，那么 HTTP 协议默认是 80 端口。</p><h3 id="_4-等待-tcp-队列" tabindex="-1">4. 等待 TCP 队列 <a class="header-anchor" href="#_4-等待-tcp-队列" aria-label="Permalink to &quot;4. 等待 TCP 队列&quot;">​</a></h3><p>现在已经把端口和 IP 地址都准备好了，那么下一步是不是可以建立 TCP 连接了呢？</p><p>答案依然是“不行”。Chrome 有个机制，同一个域名同时最多只能建立 6 个 TCP 连接，如果在同一个域名下同时有 10 个请求发生，那么其中 4 个请求会进入排队等待状态，直至进行中的请求完成。</p><p>当然，如果当前请求数量少于 6，会直接进入下一步，建立 TCP 连接。</p><h3 id="_5-建立-tcp-连接" tabindex="-1">5. 建立 TCP 连接 <a class="header-anchor" href="#_5-建立-tcp-连接" aria-label="Permalink to &quot;5. 建立 TCP 连接&quot;">​</a></h3><p>排队等待结束之后，终于可以快乐地和服务器握手了，在 HTTP 工作开始之前，浏览器通过 TCP 与服务器建立连接。而 TCP 的工作方式，我在上一篇文章中已经做过详细介绍了，如果有必要，你可以自行回顾下，这里我就不再重复讲述了。</p><h3 id="_6-发送-http-请求" tabindex="-1">6. 发送 HTTP 请求 <a class="header-anchor" href="#_6-发送-http-请求" aria-label="Permalink to &quot;6. 发送 HTTP 请求&quot;">​</a></h3><p>一旦建立了 TCP 连接，浏览器就可以和服务器进行通信了。而 HTTP 中的数据正是在这个通信过程中传输的。</p><p>你可以结合下图来理解，浏览器是如何发送请求信息给服务器的。</p><p><img src="'+l+'" alt="HTTP 请求数据格式" title="HTTP 请求数据格式"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">HTTP 请求数据格式</div><p>首先浏览器会向服务器发送<strong>请求行</strong>，它包括了<strong>请求方法、请求 URI（Uniform Resource Identifier）和 HTTP 版本协议</strong>。</p><p>发送请求行，就是告诉服务器浏览器需要什么资源，最常用的请求方法是 <strong>Get</strong>。比如，直接在浏览器地址栏键入极客时间的域名（time.geekbang.org），这就是告诉服务器要 Get 它的首页资源。</p><p>另外一个常用的请求方法是 <strong>POST</strong>，它用于发送一些数据给服务器，比如登录一个网站，就需要通过 POST 方法把用户信息发送给服务器。如果使用 POST 方法，那么浏览器还要准备数据给服务器，这里准备的数据是通过<strong>请求体</strong>来发送。</p><p>在浏览器发送请求行命令之后，还要以<strong>请求头</strong>形式发送其他一些信息，把浏览器的一些基础信息告诉服务器。比如包含了浏览器所使用的操作系统、浏览器内核等信息，以及当前请求的域名信息、浏览器端的 Cookie 信息，等等</p><h2 id="服务器端处理-http-请求流程" tabindex="-1">服务器端处理 HTTP 请求流程 <a class="header-anchor" href="#服务器端处理-http-请求流程" aria-label="Permalink to &quot;服务器端处理 HTTP 请求流程&quot;">​</a></h2><p>历经千辛万苦，HTTP 的请求信息终于被送达了服务器。接下来，服务器会根据浏览器的请求信息来准备相应的内容</p><h3 id="_1-返回请求" tabindex="-1">1. 返回请求 <a class="header-anchor" href="#_1-返回请求" aria-label="Permalink to &quot;1. 返回请求&quot;">​</a></h3><p>一旦服务器处理结束，便可以返回数据给浏览器了。你可以通过工具软件 curl 来查看返回请求数据，具体使用方法是在命令行中输入以下命令：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-i</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">https://time.geekbang.org/</span></span></code></pre></div><p>注意这里加上了-i 是为了返回响应行、响应头和响应体的数据，返回的结果如下图所示，你可以结合这些数据来理解服务器是如何响应浏览器的。</p><p><img src="'+r+'" alt="服务器响应的数据格式" title="服务器响应的数据格式"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">服务器响应的数据格式</div><p>首先服务器会返回<strong>响应行</strong>，包括协议版本和状态码。</p><p>但并不是所有的请求都可以被服务器处理的，那么一些无法处理或者处理出错的信息，怎么办呢？服务器会通过请求行的<strong>状态码</strong>来告诉浏览器它的处理结果，比如：</p><ul><li>最常用的状态码是 200，表示处理成功；</li><li>如果没有找到页面，则会返回 404-</li></ul><p>状态码类型很多，这里我就不过多介绍了，网上有很多资料，你可以自行查询和学习。</p><p>随后，正如浏览器会随同请求发送请求头一样，服务器也会随同响应向浏览器发送<strong>响应头</strong>。响应头包含了服务器自身的一些信息，比如服务器生成返回数据的时间、返回的数据类型（JSON、HTML、流媒体等类型），以及服务器要在客户端保存的 Cookie 等信息。</p><p>发送完响应头后，服务器就可以继续发送<strong>响应体</strong>的数据，通常，响应体就包含了 HTML 的实际内容。</p><p>以上这些就是服务器响应浏览器的具体过程</p><h3 id="_2-断开连接" tabindex="-1">2. 断开连接 <a class="header-anchor" href="#_2-断开连接" aria-label="Permalink to &quot;2. 断开连接&quot;">​</a></h3><p>通常情况下，一旦服务器向客户端返回了请求数据，它就要关闭 TCP 连接。不过如果浏览器或者服务器在其头信息中加入了：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">Connection:Keep-Alive</span></span></code></pre></div><p>那么 TCP 连接在发送后将仍然保持打开状态，这样浏览器就可以继续通过同一个 TCP 连接发送请求。<strong>保持 TCP 连接可以省去下次请求时需要建立连接的时间，提升资源加载速度</strong>。比如，一个 Web 页面中内嵌的图片就都来自同一个 Web 站点，如果初始化了一个持久连接，你就可以复用该连接，以请求其他资源，而不需要重新再建立新的 TCP 连接。</p><h3 id="_3-重定向" tabindex="-1">3. 重定向 <a class="header-anchor" href="#_3-重定向" aria-label="Permalink to &quot;3. 重定向&quot;">​</a></h3><p>到这里似乎请求流程快结束了，不过还有一种情况你需要了解下，比如当你在浏览器中打开 geekbang.org 后，你会发现最终打开的页面地址是 <a href="https://www.geekbang.org" target="_blank" rel="noreferrer">https://www.geekbang.org</a>。</p><p>这两个 URL 之所以不一样，是因为涉及到了一个<strong>重定向操作</strong>。跟前面一样，你依然可以使用 curl 来查看下请求 geekbang.org 会返回什么内容？</p><p>在控制台输入如下命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-I</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">geekbang.org</span></span></code></pre></div><p>注意这里输入的参数是-I，和-i 不一样，-I 表示只需要获取响应头和响应行数据，而不需要获取响应体的数据，最终返回的数据如下图所示：</p><p><img src="'+i+'" alt="服务器返回响应行和响应头（含重定向格式）" title="服务器返回响应行和响应头（含重定向格式）"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">服务器返回响应行和响应头（含重定向格式）</div><p>从图中你可以看到，响应行返回的状态码是 301，状态 301 就是告诉浏览器，我需要重定向到另外一个网址，而需要重定向的网址正是包含在响应头的 Location 字段中，接下来，浏览器获取 Location 字段中的地址，并使用该地址重新导航，这就是一个完整重定向的执行流程。这也就解释了为什么输入的是 geekbang.org，最终打开的却是 <a href="https://www.geekbang.org" target="_blank" rel="noreferrer">https://www.geekbang.org</a> 了。</p><p>不过也不要认为这种跳转是必然的。如果你打开 <a href="https://12306.cn" target="_blank" rel="noreferrer">https://12306.cn</a>，你会发现这个站点是打不开的。这是因为12306的服务器并没有处理跳转，所以必须要手动输入完整的 <a href="https://www.12306.com" target="_blank" rel="noreferrer">https://www.12306.com</a> 才能打开页面。</p><h2 id="问题解答" tabindex="-1">问题解答 <a class="header-anchor" href="#问题解答" aria-label="Permalink to &quot;问题解答&quot;">​</a></h2><p>说了这么多，相信你现在已经了解了 HTTP 的请求流程，那现在我们再回过头来看看文章开头提出的问题。</p><h3 id="_1-为什么很多站点第二次打开速度会很快" tabindex="-1">1. 为什么很多站点第二次打开速度会很快？ <a class="header-anchor" href="#_1-为什么很多站点第二次打开速度会很快" aria-label="Permalink to &quot;1. 为什么很多站点第二次打开速度会很快？&quot;">​</a></h3><p>如果第二次页面打开很快，主要原因是第一次加载页面过程中，缓存了一些耗时的数据。</p><p>那么，哪些数据会被缓存呢？从上面介绍的核心请求路径可以发现，<strong>DNS 缓存</strong>和<strong>页面资源缓存</strong>这两块数据是会被浏览器缓存的。其中，DNS 缓存比较简单，它主要就是在浏览器本地把对应的 IP 和域名关联起来，这里就不做过多分析了。</p><p>我们重点看下浏览器资源缓存，下面是缓存处理的过程：</p><p><img src="'+c+'" alt="缓存查找流程示意图" title="缓存查找流程示意图"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">缓存查找流程示意图</div><p>首先，我们看下服务器是通过什么方式让浏览器缓存数据的？</p><p>从上图的第一次请求可以看出，当服务器返回 <strong>HTTP 响应头</strong>给浏览器时，浏览器是<strong>通过响应头中的 Cache-Control 字段来设置是否缓存该资源</strong>。通常，我们还需要为这个资源设置一个缓存过期时长，而这个时长是通过 Cache-Control 中的 Max-age 参数来设置的，比如上图设置的缓存过期时间是 2000 秒。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">Cache-Control:Max-age=2000</span></span></code></pre></div><p>这也就意味着，在该缓存资源还未过期的情况下, 如果再次请求该资源，会直接返回缓存中的资源给浏览器。</p><p>但如果缓存过期了，浏览器则会继续发起网络请求，并且在 <strong>HTTP 请求头</strong>中带上：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">If</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">None</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Match</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">4f80f-13c-3a1xb12a</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>服务器收到请求头后，会根据 If-None-Match 的值来判断请求的资源是否有更新。</p><ul><li>如果没有更新，就返回 304 状态码，相当于服务器告诉浏览器：“这个缓存可以继续使用，这次就不重复发送数据给你了。”</li><li>如果资源有更新，服务器就直接返回最新资源给浏览器。</li></ul><p>简要来说，很多网站第二次访问能够秒开，是因为这些网站把很多资源都缓存在了本地，浏览器缓存直接使用本地副本来回应请求，而不会产生真实的网络请求，从而节省了时间。同时，DNS 数据也被浏览器缓存了，这又省去了 DNS 查询环节</p><h3 id="_2-登录状态是如何保持的" tabindex="-1">2. 登录状态是如何保持的？ <a class="header-anchor" href="#_2-登录状态是如何保持的" aria-label="Permalink to &quot;2. 登录状态是如何保持的？&quot;">​</a></h3><p>通过上面的介绍，你已经了解了缓存是如何工作的。下面我们再一起看下登录状态是如何保持的。</p><ul><li>用户打开登录页面，在登录框里填入用户名和密码，点击确定按钮。点击按钮会触发页面脚本生成用户登录信息，然后调用 POST 方法提交用户登录信息给服务器。</li><li>服务器接收到浏览器提交的信息之后，查询后台，验证用户登录信息是否正确，如果正确的话，会生成一段表示用户身份的字符串，并把该字符串写到响应头的 Set-Cookie 字段里，如下所示，然后把响应头发送给浏览器。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Set</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Cookie</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> UID</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">3431uad</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li>浏览器在接收到服务器的响应头后，开始解析响应头，如果遇到响应头里含有 Set-Cookie 字段的情况，浏览器就会把这个字段信息保存到本地。比如把 UID=3431uad 保持到本地。</li><li>当用户再次访问时，浏览器会发起 HTTP 请求，但在发起请求之前，浏览器会读取之前保存的 Cookie 数据，并把数据写进请求头里的 Cookie 字段里（如下所示），然后浏览器再将请求头发送给服务器。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Cookie</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> UID</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">3431uad</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li>服务器在收到 HTTP 请求头数据之后，就会查找请求头里面的“Cookie”字段信息，当查找到包含 UID=3431uad 的信息时，服务器查询后台，并判断该用户是已登录状态，然后生成含有该用户信息的页面数据，并把生成的数据发送给浏览器。</li><li>浏览器在接收到该含有当前用户的页面数据后，就可以正确展示用户登录的状态信息了</li></ul><p>好了，通过这个流程你可以知道浏览器页面状态是通过使用 Cookie 来实现的。Cookie 流程可以参考下图：</p><p><img src="'+g+'" alt="Cookie 流程图" title="Cookie 流程图"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">Cookie 流程图</div><p>简单地说，如果服务器端发送的响应头内有 Set-Cookie 的字段，那么浏览器就会将该字段的内容保持到本地。当下次客户端再往该服务器发送请求时，客户端会自动在请求头中加入 Cookie 值后再发送出去。服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到该用户的状态信息。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本篇文章的内容比较多、比较碎，但是非常重要，所以我先来总结下今天的主要内容。</p><p>为了便于你理解，我画了下面这张详细的“HTTP 请求示意图”，用来展现浏览器中的 HTTP 请求所经历的各个阶段。</p><p><img src="'+h+'" alt="HTTP 请求流程示意图" title="HTTP 请求流程示意图"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">HTTP 请求流程示意图</div><p>从图中可以看到，浏览器中的 HTTP 请求从发起到结束一共经历了如下八个阶段：构建请求、查找缓存、准备 IP 和端口、等待 TCP 队列、建立 TCP 连接、发起 HTTP 请求、服务器处理请求、服务器返回请求和断开连接。</p><p>然后我还通过 HTTP 请求路径解答了两个经常会碰到的问题，一个涉及到了 Cache 流程，另外一个涉及到如何使用 Cookie 来进行状态管理。</p><p>通过今天系统的讲解，想必你已经了解了一个 HTTP 完整的工作流程，相信这些知识点之于你以后的学习或工作会很有帮助。</p><p>另外，你应该也看出来了本篇文章是有很多分析问题的思路在里面的。所以在学习过程中，你也要学会提问，通过最终要做什么和现在有什么，去一步步分析并提出一些问题，让疑问带领着你去学习，抓住几个本质的问题就可以学透相关知识点，让你能站在更高维度去查看整体框架。希望它能成为你的一个学习技巧吧！</p><h2 id="思考时间" tabindex="-1">思考时间 <a class="header-anchor" href="#思考时间" aria-label="Permalink to &quot;思考时间&quot;">​</a></h2><p>最后，还是留给你个思考题：结合今天所讲 HTTP 请求的各个阶段，如果一个页面的网络加载时间过久，你是如何分析卡在哪个阶段的？</p><h2 id="问答" tabindex="-1">问答 <a class="header-anchor" href="#问答" aria-label="Permalink to &quot;问答&quot;">​</a></h2><p><strong>Q</strong>： 浏览器刷新操作，ctrl+F5 和 F5 有什么区别</p><p><strong>A</strong>： 一个是强制刷新，也就是资源都走网络。 一个是正常处理流程。 比如通过网络面板，打开一个站点，再使用强制刷新，可以看到如下信息 176 requests 3.1 MB transferred 3.5 MB resources Finish: 26.30 s DOMContentLoaded: 5.04 s Load: 14.88 s 如果使用正常的刷新，看到的信息如下： 171 requests 419 KB transferred 3.2 MB resources Finish: 25.09 s DOMContentLoaded: 1.41 s Load: 6.24 s 其中的 transferred 是真正的网络传输的数据，使用强制刷新，传输的数据体积就大多了，而且请求时间也变得更长了。</p><p><strong>Q</strong>： set cookie 会不会有安全问题</p><p><strong>A</strong>： cookie 是不安全的，比如黑客可以通过一些手段插入一些脚本到你的页面里面（具体一些途径我们浏览器安全篇再讲），通过脚本获取到你的 cookie 数据，然后就可以利用 cookie 做一些坏事了。 当然也有一些方法规避，常用的一个是将部分 cookie 设置成 httponly 的属性，设置了 httponly 属性后 cookie，就无法通过 js 脚本来读取了，只是在发送 http 请求时候会被带上！ 当然还有一些其他防范的方法，这个同样咱们后面在聊！</p><p><strong>Q</strong>： 在做前端页面的时候，是否可以设置当前页面是否可以被缓存，以及哪些部分可以被缓存？还是说整个缓存机制都是由浏览器自己控制的？</p><p><strong>A</strong>： 是没有办法通过前端代码来控制缓存的，缓存是后端或者部署的同学来控制的，但是前端同学应该知道那些内容要被缓存，和后端或者部署的同学配合来打！</p><p><strong>Q</strong>： 同一个域名同时最多只能建立 6 个 TCP 连接 是不是意思是统一域名同时只能发送 6 个 AJAX 请求吗， TCP 连接和 AJAX 请求有什么关系吗</p><p><strong>A</strong>： 首先回答第一个问题： ”同一个域名同时最多只能建立 6 个 TCP 连接“ 指的不光是指 Ajax，还包括页面中的资源加载，只要是一个域名下的资源，浏览器同一时刻最多只支持 6 个并行请求。 不过这是 HTTP/1.1 的规则，HTTP/2 已经不用这套规则了，而且 HTTP/2 也很成熟了，有条件可以考虑切换到 HTTP/2. Ajax 其实就是 HTTP 请求，包括了 XMLHttpRequest 和 Fetch，HTTP 请求是建立在 TCP 协议之上的。</p><p><a href="https://freegeektime.com/100033601/116588/" target="_blank" rel="noreferrer">https://freegeektime.com/100033601/116588/</a></p>',120),P=[d];function b(u,_,m,C,k,y){return e(),s("div",null,P)}const f=a(T,[["render",b]]);export{D as __pageData,f as default};
