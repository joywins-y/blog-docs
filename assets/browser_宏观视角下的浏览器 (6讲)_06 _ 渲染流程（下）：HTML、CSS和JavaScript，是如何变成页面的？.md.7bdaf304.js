import{_ as s,o as a,c as t,V as o}from"./chunks/framework.bd00fe0c.js";const n="/blog-docs/assets/10001.b81b1132.webp",p="/blog-docs/assets/06-渲染流程（下）：HTML、CSS和JavaScript，是如何变成页面的？.f60d51f8.mp3",l="/blog-docs/assets/image.9e1029ff.png",e="/blog-docs/assets/image-1.33e0a4a3.png",r="/blog-docs/assets/image-2.00cd9c18.png",i="/blog-docs/assets/image-3.4221dd49.png",c="/blog-docs/assets/image-4.d42678c3.png",g="/blog-docs/assets/image-5.a41f47a9.png",d="/blog-docs/assets/image-6.ddbf9fd2.png",m="/blog-docs/assets/image-7.a3a07b39.png",y="/blog-docs/assets/image-8.17da4b1d.png",D="/blog-docs/assets/image-9.dcb695c9.png",_="/blog-docs/assets/image-10.5cd5b8eb.png",h="/blog-docs/assets/image-11.b7e8e352.png",b="/blog-docs/assets/image-12.476cb64a.png",F="/blog-docs/assets/image-13.e1a3836c.png",x="/blog-docs/assets/image-14.8c2629bf.png",v="/blog-docs/assets/image-15.705d01e5.png",u="/blog-docs/assets/image-16.2b528021.png",z=JSON.parse('{"title":"06 | 渲染流程（下）：HTML、CSS 和 JavaScript，是如何变成页面的？","description":"","frontmatter":{},"headers":[],"relativePath":"browser/宏观视角下的浏览器 (6讲)/06 | 渲染流程（下）：HTML、CSS和JavaScript，是如何变成页面的？.md","filePath":"browser/宏观视角下的浏览器 (6讲)/06 | 渲染流程（下）：HTML、CSS和JavaScript，是如何变成页面的？.md","lastUpdated":1689231811000}'),B={name:"browser/宏观视角下的浏览器 (6讲)/06 | 渲染流程（下）：HTML、CSS和JavaScript，是如何变成页面的？.md"},f=o('<h1 id="_06-渲染流程-下-html、css-和-javascript-是如何变成页面的" tabindex="-1">06 | 渲染流程（下）：HTML、CSS 和 JavaScript，是如何变成页面的？ <a class="header-anchor" href="#_06-渲染流程-下-html、css-和-javascript-是如何变成页面的" aria-label="Permalink to &quot;06 | 渲染流程（下）：HTML、CSS 和 JavaScript，是如何变成页面的？&quot;">​</a></h1><p><img src="'+n+'" alt="a"></p><audio preload="none" controls loop style="width:100%;"><source src="'+p+'" type="audio/mpeg"><p>你的浏览器不支持HTML5音频，你可以<a href="../mp3/06-渲染流程（下）：HTML、CSS和JavaScript，是如何变成页面的？.mp3">下载</a>这个音频文件</p></audio><p>在上篇文章中，我们介绍了渲染流水线中的 <strong>DOM 生成</strong>、<strong>样式计算</strong>和<strong>布局</strong>三个阶段，那今天我们接着讲解渲染流水线后面的阶段。</p><p>这里还是先简单回顾下上节前三个阶段的主要内容：在 HTML 页面内容被提交给渲染引擎之后，渲染引擎首先将 HTML 解析为浏览器可以理解的 DOM；然后根据 CSS 样式表，计算出 DOM 树所有节点的样式；接着又计算每个元素的几何坐标位置，并将这些信息保存在布局树中。</p><h2 id="分层" tabindex="-1">分层 <a class="header-anchor" href="#分层" aria-label="Permalink to &quot;分层&quot;">​</a></h2><p>现在我们有了布局树，而且每个元素的具体位置信息都计算出来了，那么接下来是不是就要开始着手绘制页面了？ 答案依然是否定的。</p><p>因为页面中有很多复杂的效果，如一些复杂的 3D 变换、页面滚动，或者使用 z-indexing 做 z 轴排序等，为了更加方便地实现这些效果，<strong>渲染引擎还需要为特定的节点生成专用的图层，并生成一棵对应的图层树</strong>（LayerTree）。如果你熟悉 PS，相信你会很容易理解图层的概念，正是这些图层叠加在一起构成了最终的页面图像。</p><p>要想直观地理解什么是图层，你可以打开 Chrome 的“开发者工具”，选择“Layers”标签，就可以可视化页面的分层情况，如下图所示：</p><p><img src="'+l+'" alt="渲染引擎给页面多图层示意图" title="渲染引擎给页面多图层示意图"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">渲染引擎给页面多图层示意图</div><p>从上图可以看出，渲染引擎给页面分了很多图层，这些图层按照一定顺序叠加在一起，就形成了最终的页面，你可以参考下图：</p><p><img src="'+e+'" alt="图层叠加的最终展示页面" title="图层叠加的最终展示页面"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">图层叠加的最终展示页面</div><p>现在你知道了<strong>浏览器的页面实际上被分成了很多图层，这些图层叠加后合成了最终的页面</strong>。下面我们再来看看这些图层和布局树节点之间的关系，如文中图所示：</p><p><img src="'+r+'" alt="布局树和图层树关系示意图" title="布局树和图层树关系示意图"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">布局树和图层树关系示意图</div><p>通常情况下，<strong>并不是布局树的每个节点都包含一个图层，如果一个节点没有对应的层，那么这个节点就从属于父节点的图层</strong>。如上图中的 span 标签没有专属图层，那么它们就从属于它们的父节点图层。但不管怎样，最终每一个节点都会直接或者间接地从属于一个层。</p><p>那么需要满足什么条件，渲染引擎才会为特定的节点创建新的图层呢？通常满足下面两点中任意一点的元素就可以被提升为单独的一个图层。</p><p><strong>第一点，拥有层叠上下文属性的元素会被提升为单独的一层。</strong></p><p>页面是个二维平面，但是层叠上下文能够让 HTML 元素具有三维概念，这些 HTML 元素按照自身属性的优先级分布在垂直于这个二维平面的 z 轴上。你可以结合下图来直观感受下：</p><p><img src="'+i+`" alt="层叠上下文示意图" title="层叠上下文示意图"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">层叠上下文示意图</div><p>从图中可以看出，明确定位属性的元素、定义透明属性的元素、使用 CSS 滤镜的元素等，都拥有层叠上下文属性。</p><p><strong>第二点，需要剪裁（clip）的地方也会被创建为图层。</strong></p><p>不过首先你需要了解什么是剪裁，结合下面的 HTML 代码：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#FFCB6B;">div</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#B2CCD6;">overflow</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> auto</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#B2CCD6;">background</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> gray</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      所以元素有了层叠上下文的属性或者需要被剪裁，那么就会被提升成为单独一层，你可以参看下图：</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      从上图我们可以看到，document层上有A和B层，而B层之上又有两个图层。这些图层组织在一起也是一颗树状结构。</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      图层树是基于布局树来创建的，为了找出哪些元素需要在哪些层中，渲染引擎会遍历布局树来创建层树（Update</span></span>
<span class="line"><span style="color:#BABED8;">      LayerTree）。</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>在这里我们把 div 的大小限定为 200 _ 200 像素，而 div 里面的文字内容比较多，文字所显示的区域肯定会超出 200 _ 200 的面积，这时候就产生了剪裁，渲染引擎会把裁剪文字内容的一部分用于显示在 div 区域，下图是运行时的执行结果：</p><p><img src="`+c+'" alt="剪裁执行结果" title="剪裁执行结果"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">剪裁执行结果</div><p>出现这种裁剪情况的时候，渲染引擎会为文字部分单独创建一个层，如果出现滚动条，滚动条也会被提升为单独的层。你可以参考下图：</p><p><img src="'+g+'" alt="被裁剪的内容会出现在单独一层" title="被裁剪的内容会出现在单独一层"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">被裁剪的内容会出现在单独一层</div><p>所以说，元素有了层叠上下文的属性或者需要被剪裁，满足其中任意一点，就会被提升成为单独一层。</p><h2 id="图层绘制" tabindex="-1">图层绘制 <a class="header-anchor" href="#图层绘制" aria-label="Permalink to &quot;图层绘制&quot;">​</a></h2><p>在完成图层树的构建之后，渲染引擎会对图层树中的每个图层进行绘制，那么接下来我们看看渲染引擎是怎么实现图层绘制的？</p><p>试想一下，如果给你一张纸，让你先把纸的背景涂成蓝色，然后在中间位置画一个红色的圆，最后再在圆上画个绿色三角形。你会怎么操作呢？</p><p>通常，你会把你的绘制操作分解为三步：</p><ol><li>绘制蓝色背景；</li><li>在中间绘制一个红色的圆；</li><li>再在圆上绘制绿色三角形。</li></ol><p>渲染引擎实现图层的绘制与之类似，会把一个图层的绘制拆分成很多小的<strong>绘制指令</strong>，然后再把这些指令按照顺序组成一个待绘制列表，如下图所示：</p><p><img src="'+d+'" alt="绘制列表" title="绘制列表"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">绘制列表</div><p>从图中可以看出，绘制列表中的指令其实非常简单，就是让其执行一个简单的绘制操作，比如绘制粉色矩形或者黑色的线等。而绘制一个元素通常需要好几条绘制指令，因为每个元素的背景、前景、边框都需要单独的指令去绘制。所以在图层绘制阶段，输出的内容就是这些待绘制列表。</p><p>你也可以打开“开发者工具”的“Layers”标签，选择“document”层，来实际体验下绘制列表，如下图所示：</p><p><img src="'+m+'" alt="一个图层的绘制列表" title="一个图层的绘制列表"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">一个图层的绘制列表</div><p>在该图中，区域 1 就是 document 的绘制列表，拖动区域 2 中的进度条可以重现列表的绘制过程。</p><h2 id="栅格化-raster-操作" tabindex="-1">栅格化（raster）操作 <a class="header-anchor" href="#栅格化-raster-操作" aria-label="Permalink to &quot;栅格化（raster）操作&quot;">​</a></h2><p>绘制列表只是用来记录绘制顺序和绘制指令的列表，而实际上绘制操作是由渲染引擎中的合成线程来完成的。你可以结合下图来看下渲染主线程和合成线程之间的关系：</p><p><img src="'+y+'" alt="渲染进程中的合成线程和主线程" title="渲染进程中的合成线程和主线程"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">渲染进程中的合成线程和主线程</div><p>如上图所示，当图层的绘制列表准备好之后，主线程会把该绘制列表**提交（commit）**给合成线程，那么接下来合成线程是怎么工作的呢？</p><p>那我们得先来看看什么是视口，你可以参看下图：</p><p><img src="'+D+'" alt="视口" title="视口"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">视口</div><p>通常一个页面可能很大，但是用户只能看到其中的一部分，我们把用户可以看到的这个部分叫做<strong>视口</strong>（viewport）。</p><p>在有些情况下，有的图层可以很大，比如有的页面你使用滚动条要滚动好久才能滚动到底部，但是通过视口，用户只能看到页面的很小一部分，所以在这种情况下，要绘制出所有图层内容的话，就会产生太大的开销，而且也没有必要。</p><p>基于这个原因，<strong>合成线程会将图层划分为图块（tile）</strong>，这些图块的大小通常是 256x256 或者 512x512，如下图所示： <img src="'+_+'" alt="图层被划分为图块示意图" title="图层被划分为图块示意图"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">图层被划分为图块示意图</div><p>然后<strong>合成线程会按照视口附近的图块来优先生成位图，实际生成位图的操作是由栅格化来执行的。所谓栅格化，是指将图块转换为位图</strong>。而图块是栅格化执行的最小单位。渲染进程维护了一个栅格化的线程池，所有的图块栅格化都是在线程池内执行的，运行方式如下图所示：</p><p><img src="'+h+'" alt="合成线程提交图块给栅格化线程池" title="合成线程提交图块给栅格化线程池"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">合成线程提交图块给栅格化线程池</div><p>通常，栅格化过程都会使用 GPU 来加速生成，使用 GPU 生成位图的过程叫快速栅格化，或者 GPU 栅格化，生成的位图被保存在 GPU 内存中。</p><p>相信你还记得，GPU 操作是运行在 GPU 进程中，如果栅格化操作使用了 GPU，那么最终生成位图的操作是在 GPU 中完成的，这就涉及到了跨进程操作。具体形式你可以参考下图：</p><p><img src="'+b+'" alt="GPU 栅格化" title="GPU 栅格化"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">GPU 栅格化</div><p>从图中可以看出，渲染进程把生成图块的指令发送给 GPU，然后在 GPU 中执行生成图块的位图，并保存在 GPU 的内存中。</p><h2 id="合成和显示" tabindex="-1">合成和显示 <a class="header-anchor" href="#合成和显示" aria-label="Permalink to &quot;合成和显示&quot;">​</a></h2><p>一旦所有图块都被光栅化，合成线程就会生成一个绘制图块的命令——“DrawQuad”，然后将该命令提交给浏览器进程。</p><p>浏览器进程里面有一个叫 viz 的组件，用来接收合成线程发过来的 DrawQuad 命令，然后根据 DrawQuad 命令，将其页面内容绘制到内存中，最后再将内存显示在屏幕上。</p><p>到这里，经过这一系列的阶段，编写好的 HTML、CSS、JavaScript 等文件，经过浏览器就会显示出漂亮的页面了。</p><h2 id="渲染流水线大总结" tabindex="-1">渲染流水线大总结 <a class="header-anchor" href="#渲染流水线大总结" aria-label="Permalink to &quot;渲染流水线大总结&quot;">​</a></h2><p>好了，我们现在已经分析完了整个渲染流程，从 HTML 到 DOM、样式计算、布局、图层、绘制、光栅化、合成和显示。下面我用一张图来总结下这整个渲染流程：</p><p><img src="'+F+'" alt="完整的渲染流水线示意图" title="完整的渲染流水线示意图"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">完整的渲染流水线示意图</div><p>结合上图，一个完整的渲染流程大致可总结为如下：</p><ol><li>渲染进程将 HTML 内容转换为能够读懂的 <strong>DOM 树</strong>结构。</li><li>渲染引擎将 CSS 样式表转化为浏览器可以理解的 <strong>styleSheets</strong>，计算出 DOM 节点的样式。</li><li>创建<strong>布局树</strong>，并计算元素的布局信息。</li><li>对布局树进行分层，并生成<strong>分层树</strong>。</li><li>为每个图层生成<strong>绘制列表</strong>，并将其提交到合成线程。</li><li>合成线程将图层分成<strong>图块</strong>，并在<strong>光栅化线程池</strong>中将图块转换成位图。</li><li>合成线程发送绘制图块命令 <strong>DrawQuad</strong> 给浏览器进程。</li><li>浏览器进程根据 DrawQuad 消息<strong>生成页面</strong>，并<strong>显示</strong>到显示器上。</li></ol><h2 id="相关概念" tabindex="-1">相关概念 <a class="header-anchor" href="#相关概念" aria-label="Permalink to &quot;相关概念&quot;">​</a></h2><p>有了上面介绍渲染流水线的基础，我们再来看看三个和渲染流水线相关的概念——<strong>“重排”“重绘”和“合成”</strong>。理解了这三个概念对于你后续 Web 的性能优化会有很大帮助。</p><h3 id="_1-更新了元素的几何属性-重排" tabindex="-1">1. 更新了元素的几何属性（重排） <a class="header-anchor" href="#_1-更新了元素的几何属性-重排" aria-label="Permalink to &quot;1. 更新了元素的几何属性（重排）&quot;">​</a></h3><p>你可先参考下图：</p><p><img src="'+x+'" alt="更新元素的几何属性" title="更新元素的几何属性"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">更新元素的几何属性</div><p>从上图可以看出，如果你通过 JavaScript 或者 CSS 修改元素的几何位置属性，例如改变元素的宽度、高度等，那么浏览器会触发重新布局，解析之后的一系列子阶段，这个过程就叫<strong>重排</strong>。无疑，<strong>重排需要更新完整的渲染流水线，所以开销也是最大的</strong>。</p><h3 id="_2-更新元素的绘制属性-重绘" tabindex="-1">2. 更新元素的绘制属性（重绘） <a class="header-anchor" href="#_2-更新元素的绘制属性-重绘" aria-label="Permalink to &quot;2. 更新元素的绘制属性（重绘）&quot;">​</a></h3><p>接下来，我们再来看看重绘，比如通过 JavaScript 更改某些元素的背景颜色，渲染流水线会怎样调整呢？你可以参考下图：</p><p><img src="'+v+'" alt="更新元素背景" title="更新元素背景"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">更新元素背景</div><p>从图中可以看出，如果修改了元素的背景颜色，那么布局阶段将不会被执行，因为并没有引起几何位置的变换，所以就直接进入了绘制阶段，然后执行之后的一系列子阶段，这个过程就叫<strong>重绘</strong>。<strong>相较于重排操作，重绘省去了布局和分层阶段，所以执行效率会比重排操作要高一些</strong>。</p><h3 id="_3-直接合成阶段" tabindex="-1">3. 直接合成阶段 <a class="header-anchor" href="#_3-直接合成阶段" aria-label="Permalink to &quot;3. 直接合成阶段&quot;">​</a></h3><p>那如果你更改一个既不要布局也不要绘制的属性，会发生什么变化呢？渲染引擎将跳过布局和绘制，只执行后续的合成操作，我们把这个过程叫做<strong>合成</strong>。具体流程参考下图： <img src="'+u+'" alt="避开重排和重绘" title="避开重排和重绘"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">避开重排和重绘</div><p>在上图中，我们使用了 CSS 的 transform 来实现动画效果，这可以避开重排和重绘阶段，直接在非主线程上执行合成动画操作。这样的效率是最高的，因为是在非主线程上合成，并没有占用主线程的资源，另外也避开了布局和绘制两个子阶段，所以<strong>相对于重绘和重排，合成能大大提升绘制效率</strong>。</p><p>至于如何用这些概念去优化页面，我们会在后面相关章节做详细讲解的，这里你只需要先结合“渲染流水线”弄明白这三个概念及原理就行。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>通过本文的分析，你应该可以看到，Chrome 的渲染流水线还是相当复杂晦涩，且难以理解，不过 Chrome 团队在不断添加新功能的同时，也在不断地重构一些子阶段，目的就是<strong>让整体渲染架构变得更加简单和高效</strong>，正所谓大道至简。</p><p>通过这么多年的生活和工作经验来看，无论是做架构设计、产品设计，还是具体到代码的实现，甚至处理生活中的一些事情，能够把复杂问题简单化的人都是具有大智慧的。所以，在工作或生活中，你若想要简化遇到的问题，就要刻意地练习，练就抓住问题本质的能力，把那些复杂的问题简单化，从而最终真正解决问题。</p><h2 id="思考时间" tabindex="-1">思考时间 <a class="header-anchor" href="#思考时间" aria-label="Permalink to &quot;思考时间&quot;">​</a></h2><p>在优化 Web 性能的方法中，减少重绘、重排是一种很好的优化方式，那么结合文中的分析，你能总结出来为什么减少重绘、重排能优化 Web 性能吗？那又有那些具体的实践方法能减少重绘、重排呢？</p><ul><li>触发 repaint reflow 的操作尽量放在一起，比如改变 dom 高度和设置 margin 分开写，可能会出发两次重排</li></ul><ul><li>通过虚拟 dom 层计算出操作总得差异，一起提交给浏览器。之前还用过 createdocumentfragment 来汇总 append 的 dom,来减少触发重排重绘次数。</li></ul><h2 id="问答" tabindex="-1">问答 <a class="header-anchor" href="#问答" aria-label="Permalink to &quot;问答&quot;">​</a></h2><p><strong>Q</strong>： 关于浏览器的渲染细节的知识老师是从哪里学到的？，是通过研究源码学习的吗？有没有一些好的学习资料或者学习方法推荐？</p><p><strong>A</strong>： 主要几个途径：</p><ol><li>chromium 源码</li><li>chromium 源码里面的一些注释和文档</li><li>还有油管上 blinkon 上有一些深入讲解内核的视频</li></ol><p>目前基本没有系统介绍浏览器知识的文档，而且网上很多文档还是比较早期的，很多内容都不太适合新版的浏览器了。</p><p>这里将浏览器知识和前端系统下结合起来是一件工作量非常大的事。</p><p><strong>Q</strong>： 渲染进程里的帧的概念是什么样子的呢？一个 page 是一帧吗</p><p><strong>A</strong>： 可以拿放电影电影来解释，通常，电影的帧速是 24，也就是说每秒切换 24 幅画面，其中的每幅画面就是一帧。</p><p>理解什么是帧后，我们在回过头看看我们的页面。由于目前大多数设备的屏幕刷新率为 60 次/秒。因此，如果页面中有一个动画、或一个渐变效果、或者用户正在滚动页面，那么浏览器渲染动画的频率至少要和刷新频率保持一致，也就是每秒需要更新 60 次，这样我们就能计算出来生成每帧的预算只有（1/60）毫秒，也就是 16 毫秒多一点(1 秒/ 60 = 16.66 毫秒)。如果超过 16 毫秒，帧率将下降，并且会出现画面抖动现象，此现象通常被称为卡顿，会对用户体验产生负面影响。</p><p>所以，如果想要保证画面的流畅，就需要尽量降低每帧的渲染时间，所以局部更新流水线显得非常重要了，能大大减少处理每帧所消耗的时间。</p><p><strong>Q</strong>： 渲染流程的最后，应该是浏览器进程将 Compositor Frame 发送到 GPU, GPU 进行显示吧？</p><p><strong>A</strong>： 这块我没深入讲了，因为结构比较复杂，chromium 团队还在重构大的架构，既然你问到了，我就简要介绍下：</p><ol><li><p>首先渲染进程里执行图层合成(Layer Compositor)，也就是生成图层的操作，具体地讲，渲染进程的合成线程接收到图层的绘制消息时，会通过光栅化线程池将其提交给 GPU 进程，在 GPU 进程中执行光栅化操作，执行完成，再将结果返回给渲染进程的合成线程，执行合成图层操作！</p></li><li><p>合成的图层会被提交给浏览器进程，浏览器进程里会执行显示合成(Display Compositor)，也就是将所有的图层合成为可以显示的页面图片。 最终显示器显示的就是浏览器进程中合成的页面图片</p></li></ol><p><strong>Q</strong>： 问题 1：手机端开发，body 被内容撑开了，超过一屏，在滑动的过程中会不会触发重排，为什么？ 问题 2：如果 body 高度设置了 100%</p><p><strong>A</strong>： 现代浏览器做了优化，把滚动操作交给了合成线程来处理，也就是说滚动的内容会被当成一个单独的图层，发生滚动的事件的时候，图层直接由合成线程来生成，也就是说这种情况下没有占用主线程，所以通常情况下不会产生重排和重回操作，只是简单合成就可以了，这样效率是最高的！ 为什么说“通常”呢？ 这是因为目前渲染流程还是很复杂的，在滚动页面时，有些情况下，如果合成线程搞不定的，那么还要交给主线程去处理，这时候就涉及到重拍了，不过技术是往前发展的，渲染流程会变得越来约简单高效！</p>',116),S=[f];function C(P,A,q,T,E,M){return a(),t("div",null,S)}const U=s(B,[["render",C]]);export{z as __pageData,U as default};
