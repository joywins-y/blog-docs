import{_ as a,o as s,c as e,V as l}from"./chunks/framework.bd00fe0c.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"面试复盘/网上三一面试题.md","filePath":"面试复盘/网上三一面试题.md","lastUpdated":1712632357000}'),p={name:"面试复盘/网上三一面试题.md"},t=l(`<h2 id="js-的数据类型" tabindex="-1">js 的数据类型 <a class="header-anchor" href="#js-的数据类型" aria-label="Permalink to &quot;js 的数据类型&quot;">​</a></h2><h2 id="判断数据类型的方法" tabindex="-1">判断数据类型的方法 <a class="header-anchor" href="#判断数据类型的方法" aria-label="Permalink to &quot;判断数据类型的方法&quot;">​</a></h2><h2 id="这些方法的缺点" tabindex="-1">这些方法的缺点 <a class="header-anchor" href="#这些方法的缺点" aria-label="Permalink to &quot;这些方法的缺点&quot;">​</a></h2><h2 id="介绍下-js-的事件循环机制" tabindex="-1">介绍下 js 的事件循环机制 <a class="header-anchor" href="#介绍下-js-的事件循环机制" aria-label="Permalink to &quot;介绍下 js 的事件循环机制&quot;">​</a></h2><h2 id="宏任务和微任务分别有哪些" tabindex="-1">宏任务和微任务分别有哪些 <a class="header-anchor" href="#宏任务和微任务分别有哪些" aria-label="Permalink to &quot;宏任务和微任务分别有哪些&quot;">​</a></h2><p>宏任务和微任务是 JavaScript 中的两种任务队列，用于管理异步操作的执行顺序。</p><p>宏任务包括以下几种：</p><ol><li>setTimeout 和 setInterval 函数创建的定时器任务。</li><li>DOM 事件处理程序。</li><li>XMLHttpRequest 和 fetch 等网络请求。</li><li>requestAnimationFrame 函数创建的动画任务。</li><li>页面渲染。</li><li>事件回调函数。</li></ol><p>微任务包括以下几种：</p><ol><li>Promise 的回调函数。</li><li>MutationObserver 的回调函数。</li></ol><p>宏任务和微任务的执行顺序如下：</p><ol><li>当执行栈为空时，先执行所有的微任务队列中的任务，直到微任务队列为空。</li><li>执行渲染操作，更新页面。</li><li>从宏任务队列中取出一个任务执行。</li><li>重复步骤 1-3，直到宏任务队列为空。</li></ol><p>useEffect 和 useLayoutEffect 的区别</p><h2 id="setstate-的执行原理" tabindex="-1">setState 的执行原理 <a class="header-anchor" href="#setstate-的执行原理" aria-label="Permalink to &quot;setState 的执行原理&quot;">​</a></h2><p>setState 是 React 中用于更新组件状态的方法。它的执行原理如下：</p><p>当调用 setState 时，React 会将传入的状态更新合并到组件的当前状态中。 React 会将新的状态与之前的状态进行比较，找出发生变化的部分。 React 会根据变化的部分，重新渲染组件的 UI。 在重新渲染过程中，React 会生成一个新的虚拟 DOM 树，并与之前的虚拟 DOM 树进行比较，找出需要更新的部分。 React 会将需要更新的部分应用到实际的 DOM 树上，完成组件的更新。 通过这个执行原理，React 能够高效地更新组件的状态，并且只更新需要更新的部分，提高了性能。</p><h2 id="水平垂直居中的方法有哪些" tabindex="-1">水平垂直居中的方法有哪些？ <a class="header-anchor" href="#水平垂直居中的方法有哪些" aria-label="Permalink to &quot;水平垂直居中的方法有哪些？&quot;">​</a></h2><ol><li>使用弹性盒子</li></ol><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">box</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> flex</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#B2CCD6;">justify-content</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#B2CCD6;">align-items</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ol start="2"><li>使用定位</li></ol><p>上级元素设置</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#B2CCD6;">position</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> relative</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>子元素设置</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#B2CCD6;">position</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> absolute</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#B2CCD6;">left</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">50%</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#B2CCD6;">top</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">50%</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#B2CCD6;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">translate</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">-50px</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">-50px</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="react-的-fiber-了解吗" tabindex="-1">react 的 fiber 了解吗 <a class="header-anchor" href="#react-的-fiber-了解吗" aria-label="Permalink to &quot;react 的 fiber 了解吗&quot;">​</a></h2><ul><li><p>Fiber 是 React 中的一种新的架构，它用于实现增量式、可中断的虚拟 DOM diff 过程。Fiber 的目标是改进 React 的性能和用户体验，使得 React 应用程序更加流畅和响应。</p></li><li><p>在 React 的旧版本中，虚拟 DOM diff 过程是一个递归的过程，它会一直执行直到完成，期间无法中断。这可能会导致长时间的 JavaScript 执行，从而阻塞主线程，造成页面的卡顿和不流畅的用户体验。</p></li><li><p>为了解决这个问题，React 引入了 Fiber 架构。Fiber 将整个虚拟 DOM diff 过程分为多个小任务，每个任务称为一个 Fiber 节点。这些 Fiber 节点被组织成一个树状结构，成为 Fiber 树。</p></li><li><p>Fiber 树可以被中断和恢复，这意味着在执行 Fiber 树的 diff 过程中，可以在任意时刻中断当前任务，并优先执行其他任务。这样可以使得应用程序更加灵活的响应用户的交互和其他优先级的任务，提高性能和响应性。</p></li><li><p>通过 Fiber 架构，React 可以根据任务的优先级动态地调整任务的执行顺序，从而更好的控制 JavaScript 的执行。这使得 React 应用程序可以在不阻塞主线程的情况下进行虚拟 DOM diff，减少页面的卡顿和提高用户体验。</p></li><li><p>总之，Fiber 是 React 中一种新的架构，用于实现增量式、可中断的虚拟 DOM diff 过程。它通过将 diff 过程分为多个小任务，并根据优先级动态地调整任务的执行顺序，提高 React 应用程序的性能和响应性。</p></li></ul><h2 id="性能优化方法有了解吗" tabindex="-1">性能优化方法有了解吗？ <a class="header-anchor" href="#性能优化方法有了解吗" aria-label="Permalink to &quot;性能优化方法有了解吗？&quot;">​</a></h2><p>在 React 中：</p><ul><li>减少 render 方法的调用;</li><li>避免使用状态提升来共享 state，此时应该使用 redux 解决方案;</li><li>保持稳定的 dom 结构，尽量避免 dom 节点跨层级移动操作；</li><li>使用 css 来隐藏节点，而不是真的移除或添加 DOM 节点等；</li></ul><p>react 性能优化是哪个周期函数：shouldComponentUpdate</p><p>1、如何进行前端性能优化？</p><p>1、减少 http 请求 减少 HTTP 请求的方案主要有：合并 JavaScript 和 CSS 文件、合并图片 CSS Sprites、图像映射（Image Map）和使用 Data URI 来编码图片，图片较多的页面也可以使用 lazyLoad 等技术进行优化。</p><p>2、减少对 DOM 的操作 修改和访问 DOM 元素会造成页面的 Repaint（重绘）和 Reflow（重排），循环对 DOM 操作更是 不推荐的行为。所以合理的使用 JavaScript 变量储存内容，考虑大量 DOM 元素中循环的性能开 销，在循环结束时一次性写入。</p><p>减少对 DOM 元素的查询和修改，查询时可将其赋值给局部变量。</p><p>注：在 IE 中:hover 会降低响应速度。</p><p>3、使用 JSON 格式来进行数据交换 JSON 是一种轻量级的数据交换格式，采用完全独立于语言的文本格式，是理想的数据交换格式。 同时，JSON 是 JavaScript 原生格式，这意味着在 javaScript 中处理 JSON 数据不需要任何特殊的 API 或工具包。与 XML 序列化相比，JSON 序列化后产生的数据一般要比 XML 序列化后数据体积 小。</p><p>4、高效使用 HTML 标签和 CSS 样式 HTML 是一门标记语言，使用合理的 HTML 标签前你必须了解其属性，比如 Flow Elements，Metadata Elements ，Phrasing Elements。比较基础的就是要知道块级元素和内联元素、盒模型、SEO 方面 的知识。</p><p>CSS 是用来渲染页面的，也是存在渲染效率的问题。CSS 选择符是从右向左进行匹配的，当 页面被触发引起回流（reflow）的时候，低效的选择符依然会引发更高的开销，所以要避免低效。</p><p>5、使用 CDN 加速（内容分发网络） 其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容 传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层 智能虚拟网络，CDN 系统能够实时的根据网络流量和各节点的连接、负载状况以及到用户的距离</p><p>和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上</p><p>6、将 CSS 和 JS 放到外部文件中引用，CSS 放头，JS 放尾 7、精简 CSS 和 JS 文件 8、压缩图片和使用图片 Sprite 技术 9、注意控制 Cookie 大小和污染 因为 Cookie 是本地的磁盘文件，每次浏览器都会去读取相应的 Cookie，所以建议去除不必要的 Coockie，使 Coockie 体积尽量小以减少对用户响应的影响； 使用 Cookie 跨域操作时注意在适应级别的域名上设置 coockie 以便使子域名不受其影响 Cookie 是有生命周期的，所以请注意设置合理的过期时间，合理地 Expire 时间和不要过早去清除 coockie，都会改善用户的响应时间。</p><p>头条： 1、 讲一下协议，比如传输层的 UDP 以及 HTTP？讲一下 Http 的头部字段（涉及到缓存， 缓存分为强缓存以及协商缓存、以及 https）？ 2、 左右固定中间自适应（左右宽度为 100px，中间 content 为自适应，高度为浏览器高度）？ 3、 垂直居中（不定宽不定高度的子元素水平垂直居中 绝对定位+transform） 4、 Position 值的有哪些？分别相对于什么定位？ 5、 以下代码输出什么？这六个 6 是一起输出的嘛？如果让它输出 123456？（手撕） 分析 立即输出函数 6、 单链表，倒数第 k 个值 HEAD（没答上来） 8、 手撕快排？ 7、手撕快排？</p><p>作业帮： 1、说一下行内元素和块级元素？行内元素有哪些？块级元素有哪些？各说出 5 个？ 2、Position 的几个值？每个值的含义？ 3、利用 flex 布局实现左右固定，中间自适应？ 4、实现弹框垂直居中，且随着浏览器窗口滚动？（没答出来） 5、“==”和“===”有什么区别？实现((a==1)&amp;&amp;(a==2)&amp;&amp;(a===3))返回值为 True？ 6、利用正则实现 csdn 网址？ 7、说一下状态码？ 8、实现字符串的反转？ 9.三维数组的扁平化实现？ 10、字符串的去重算法？</p><p>三一重工： 1、本科专业与现在专业的匹配度？讲一下校园活动，你在里面担当的角色，获得什么收获？ 2、数据库连接查询所用的字段名？ 3、Webpack 打包工具？ 4、什么是同源策略？Ajax 与 axios 的区别？讲一下跨域？获取到线上的数据嘛？ 5、数据的双向绑定原理？ 6、Http 的 get 和 post 的区别？浦发面试也问过这个，还问我 get 和 post 哪一个更安全？为什么？ 7、Vue 和 React 的区别？各自的优势？ 8、讲一下闭包？ 9、在开发中遇到争执，怎么处理？</p><p>浦发银行： 1、用 Vue 实现一个弹框？ 2、get 和 post 区别？上面讲过。 3、回文字母的实现，当时是给我一张纸，特别简单，我看到立马说出来了？</p><p>花椒直播： “写一下自适应布局”， “写一个 Ajax”， “写一下排序算法” Http 2.0 与 1.0 的区别？2.0 的请求时间快在哪？大概快了多少？然后就给我用公式算，到底快了多少？</p>`,46),n=[t];function o(i,r,c,D,d,F){return s(),e("div",null,n)}const C=a(p,[["render",o]]);export{h as __pageData,C as default};
