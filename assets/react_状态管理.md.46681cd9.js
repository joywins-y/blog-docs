import{_ as t,o as e,c as o,V as l}from"./chunks/framework.bd00fe0c.js";const a="/blog-docs/assets/image.4b2b6c1e.png",i="/blog-docs/assets/image-1.98b9c19a.png",m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"react/状态管理.md","filePath":"react/状态管理.md","lastUpdated":1689332829000}'),r={name:"react/状态管理.md"},p=l('<p>有哪些状态管理工具可以使用</p><ol><li>redux</li></ol><p><a href="https://redux.js.org/" target="_blank" rel="noreferrer">redux</a></p><p>Redux 要介绍 Redux，我们就不得不谈到 Flux 了:</p><blockquote><p>Flux is the application architecture that Facebook uses for building client-side web applications.It&#39;s more of a pattern rather than a formal framework Flux 是 Facebook 用来开发客户端-服务端 web 应用程序的应用架构，它更多是一种架构模式，而非一个特定框架。</p></blockquote><p>而 Redux 更多的是遵循 Flux 模式的一种实现，是一个 JavaScript 库，它关注点主要是以下几方面：</p><ol><li><p>Action：一个 JavaScript 对象，描述动作相关信息，主要包含 type 属性和 payload 属性：</p><ol><li>type：action 类型；</li><li>payload：负载数据；</li></ol></li><li><p>Reducer：定义应用状态如何响应不同动作（action），如何更新状态；</p></li><li><p>Store：管理 action 和 reducer 及其关系的对象，主要提供以下功能：</p><ol><li>维护应用状态并支持访问状态（getState()）；</li><li>支持监听 action 的分发，更新状态（dispatch(action)）；</li><li>支持订阅 store 的变更（subscribe(listener)）；</li></ol></li><li><p>异步流：由于 Redux 所有对 store 状态的变更，都应该通过 action 触发，异步任务（通常都是业务或获取数据任务）也不例外，而为了不将业务或数据相关的任务混入 React 组件中，就需要使用其他框架配合管理异步任务流程，如 <code>redux-thunk</code>，<code>redux-saga</code> 等；</p></li><li><p>useContext</p></li><li><p><a href="https://github.com/pmndrs/zustand" target="_blank" rel="noreferrer">zustand</a>: 一个轻量、现代的状态管理库</p></li></ol><blockquote><p>Zustand 是由 Jotai 和 React springs 的开发人员构建的快速且可扩展的状态管理解决方案, Zustand 以简单被大家所知, 它使用 hooks 来管理状态无需样板代码</p></blockquote><p><code>&quot;Zustand&quot; 只是德语的&quot;state&quot;</code></p><p>有很多的流行 React 状态管理工具, 但一下是您更喜欢使用 Zustand 的一些原因</p><ul><li>更少的样板代码</li><li>Zustand 只在 state 的值改变时渲染组件, 通常可以处理状态的改变而无需渲染代码</li><li>状态管理通过简单定义的操作进行集中和更新, 在这方面和 Redux 类似, 但是又和 Redux 不太类似, Redux 开发必须创建 reducer、action、dispatch 来处理状态, Zustand 让它变得更加容易</li><li>使用 hooks 来管理 states, Hooks 在 react 中很流行, 因此是一个很受欢迎的状态管理库</li><li>Zustand 使用简单使用和简单实现的代码</li><li>通过消除使用 <code>Context Provides</code> 从而使代码更短、更易读</li></ul><p>更多参考<a href="https://juejin.cn/post/7134633741774749710" target="_blank" rel="noreferrer">Zustand: 一个轻量、现代的状态管理库</a></p><ol start="4"><li><a href="https://mobx.js.org/README.html" target="_blank" rel="noreferrer">mobx</a></li></ol><p>状态管理库，无论是 Redux，还是 Mobx 这些，其本质都是为了解决状态管理混乱，无法有效同步的问题，它们都支持：</p><ol><li><p>统一维护管理应用状态；</p></li><li><p>某一状态只有一个可信数据来源（通常命名为 store，指状态容器）；</p></li><li><p>操作更新状态方式统一，并且可控（通常以 action 方式提供更新状态的途径）；</p></li><li><p>支持将 store 与 React 组件连接，如 <code>react-redux</code>，<code>mobx-react</code>；通常使用状态管理库后，我们将 React 组件从业务上划分为两类：</p><ol><li>容器组件（Container Components）：负责处理具体业务和状态数据，将业务或状态处理函数传入展示型组件；</li><li>展示型组件（Presentation Components）：负责展示视图，视图交互回调内调用传入的处理函数；</li></ol></li></ol><p>Mobx 和 Redux 都是 JavaScript 应用状态管理库，都适用于 React，Angular，VueJs 等框架或库，而不是局限于某一特定 UI 库。</p><p>Mobx 是一个透明函数响应式编程（Transparently Functional Reactive Programming，TFRP）的状态管理库，它使得状态管理简单可伸缩：</p><blockquote><p>Anything that can be derived from the application state, should be derived. Automatically. 任何起源于应用状态的数据应该自动获取。</p></blockquote><p>其原理如图：</p><p><img src="'+a+'" alt="Alt text"></p><ol><li><p>Action：定义改变状态的动作函数，包括如何变更状态；</p></li><li><p>Store：集中管理模块状态（State）和动作（action）；</p></li><li><p>Derivation（衍生）：从应用状态中派生而出，且没有任何其他影响的数据，我们称为 derivation（衍生），衍生在以下情况下存在：</p><ol><li><p>用户界面；</p></li><li><p>衍生数据；</p><p>衍生主要有两种：</p><ol><li><p>Computed Values（计算值）：计算值总是可以使用纯函数（pure function）从当前可观察状态中获取；</p></li><li><p>Reactions（反应）：反应指状态变更时需要自动发生的副作用，这种情况下，我们需要实现其读写操作；</p></li></ol></li></ol></li></ol><p>更多参考<a href="https://juejin.cn/post/6844903562095362056" target="_blank" rel="noreferrer">你需要 Mobx 还是 Redux？</a></p><ol start="4"><li><p>rtk</p></li><li><p><a href="https://js.org/?jumpsuit" target="_blank" rel="noreferrer">Jumpsuit</a></p></li><li><p><a href="http://alt.js.org/" target="_blank" rel="noreferrer">Alt.js</a></p></li></ol><p><img src="'+i+'" alt="Alt text"></p>',24),s=[p];function n(c,d,u,_,h,b){return e(),o("div",null,s)}const g=t(r,[["render",n]]);export{m as __pageData,g as default};
