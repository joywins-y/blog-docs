import{_ as s,o as a,c as n,V as l}from"./chunks/framework.bd00fe0c.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/useful-js-snippets/object.md","filePath":"javascript/useful-js-snippets/object.md","lastUpdated":1689048652000}'),o={name:"javascript/useful-js-snippets/object.md"},p=l(`<h2 id="object-对象" tabindex="-1">Object 对象 <a class="header-anchor" href="#object-对象" aria-label="Permalink to &quot;Object 对象&quot;">​</a></h2><h3 id="object-from-key-value-pairs-根据键值对创建对象" tabindex="-1">Object from key-value pairs (根据键值对创建对象) <a class="header-anchor" href="#object-from-key-value-pairs-根据键值对创建对象" aria-label="Permalink to &quot;Object from key-value pairs (根据键值对创建对象)&quot;">​</a></h3><p>使用 Array.reduce() 来创建和组合键值对。</p><p>JavaScript 代码:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> objectFromPairs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">arr</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">v</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> ((a[v[</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">]] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> v[</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">])</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> a)</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// objectFromPairs([[&#39;a&#39;,1],[&#39;b&#39;,2]]) -&gt; {a: 1, b: 2}</span></span></code></pre></div><h3 id="object-to-key-value-pairs-对象转化为键值对" tabindex="-1">Object to key-value pairs (对象转化为键值对 ) <a class="header-anchor" href="#object-to-key-value-pairs-对象转化为键值对" aria-label="Permalink to &quot;Object to key-value pairs (对象转化为键值对 )&quot;">​</a></h3><p>使用 Object.keys() 和 Array.map() 遍历对象的键并生成一个包含键值对的数组。</p><p>JavaScript 代码:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> objectToPairs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#BABED8;">(obj)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">k</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> [k</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> obj[k]])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// objectToPairs({a: 1, b: 2}) -&gt; [[&#39;a&#39;,1],[&#39;b&#39;,2]])</span></span></code></pre></div><h3 id="invert-object-keys-反转对象键值" tabindex="-1">Invert object keys (反转对象键值) <a class="header-anchor" href="#invert-object-keys-反转对象键值" aria-label="Permalink to &quot;Invert object keys (反转对象键值)&quot;">​</a></h3><p>当你需要将对象的键值对交换</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> invert </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#BABED8;">(obj)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">res</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">k</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#BABED8;">(res</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">[</span><span style="color:#BABED8;">obj</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">k</span><span style="color:#F07178;">]]</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> k </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// invert({ name: &quot;jack&quot; }); // {jack: &#39;name&#39;}</span></span></code></pre></div><h3 id="shallow-clone-object-浅克隆对象" tabindex="-1">Shallow clone object (浅克隆对象) <a class="header-anchor" href="#shallow-clone-object-浅克隆对象" aria-label="Permalink to &quot;Shallow clone object (浅克隆对象)&quot;">​</a></h3><p>使用 Object.assign() 和一个空对象({})来创建原始对象的浅拷贝。</p><p>JavaScript 代码:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> shallowClone </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{},</span><span style="color:#BABED8;"> obj)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* const a = { x: true, y: 1 }; const b = shallowClone(a); a === b -&gt; false */</span></span></code></pre></div><p>注：JavaScript 中的对象拷贝方法有很多，这里有个总结，有兴趣可以看一下：<a href="https://www.html.cn/archives/8319" target="_blank" rel="noreferrer">https://www.html.cn/archives/8319</a></p><h3 id="remove-invalid-attributes-删除无效属性" tabindex="-1">Remove invalid attributes (删除无效属性) <a class="header-anchor" href="#remove-invalid-attributes-删除无效属性" aria-label="Permalink to &quot;Remove invalid attributes (删除无效属性)&quot;">​</a></h3><p>当你需要删除一个对象中的属性值为 null 或 undefined 的所有属性</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> removeNullUndefined </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entries</span><span style="color:#BABED8;">(obj)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;font-style:italic;">k</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">v</span><span style="color:#89DDFF;">])</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> (v </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">null</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> ((a[k] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> v)</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> a))</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#BABED8;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// removeNullUndefined({name: &#39;&#39;, age: undefined, sex: null}) // { name: &#39;&#39; }</span></span></code></pre></div><h3 id="string-to-object-字符串转对象" tabindex="-1">String to object (字符串转对象) <a class="header-anchor" href="#string-to-object-字符串转对象" aria-label="Permalink to &quot;String to object (字符串转对象)&quot;">​</a></h3><p>当你需要将一串字符串比如&#39;{name: &quot;jack&quot;}&#39;转换成对象时，直接使用 JSON.parse 将会报错。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> strParse </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">str</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">    str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">/(</span><span style="color:#C3E88D;">\\w</span><span style="color:#89DDFF;">+)</span><span style="color:#C3E88D;">\\s</span><span style="color:#89DDFF;">*</span><span style="color:#C3E88D;">:</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">_</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">p1</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">p1</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&quot;:</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">\\&#39;</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// strParse(&#39;{name: &quot;jack&quot;}&#39;)</span></span></code></pre></div>`,23),e=[p];function t(c,r,y,D,F,B){return a(),n("div",null,e)}const E=s(o,[["render",t]]);export{A as __pageData,E as default};
