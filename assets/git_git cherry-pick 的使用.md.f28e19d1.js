import{_ as s,o as a,c as l,V as e}from"./chunks/framework.bd00fe0c.js";const B=JSON.parse('{"title":"git cherry-pick","description":"","frontmatter":{},"headers":[],"relativePath":"git/git cherry-pick 的使用.md","filePath":"git/git cherry-pick 的使用.md","lastUpdated":1686886731000}'),o={name:"git/git cherry-pick 的使用.md"},p=e('<h1 id="git-cherry-pick" tabindex="-1">git cherry-pick <a class="header-anchor" href="#git-cherry-pick" aria-label="Permalink to &quot;git cherry-pick&quot;">​</a></h1><p>将分支 A 的代码转移到另一个分支 B 有以下两种情况：</p><ol><li><p>需要分支 A 的所有代码的变动，可以采用合并 <code>(git merge)</code></p></li><li><p>只需要部分代码的变动，可以采用 Cherry pick <code>(git cherry-pick)</code></p></li></ol><h2 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h2><p>git cherry-pick：将指定的提交（commit）应用于其他分支</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">cherry-pick</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">commitHas</span><span style="color:#BABED8;">h</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="转移多个提交" tabindex="-1">转移多个提交 <a class="header-anchor" href="#转移多个提交" aria-label="Permalink to &quot;转移多个提交&quot;">​</a></h2><ul><li>一次转移多个提交</li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">cherry-pick</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">Hash</span><span style="color:#BABED8;">A</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">Hash</span><span style="color:#BABED8;">B</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ul><li>转移一系列的连续提交（A 需早于 B 提交，开区间，即不包括 A）</li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">cherry-pick</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">A..B</span></span></code></pre></div><ul><li>转移一系列的连续提交（A 需早于 B 提交，闭区间，即包括 A）</li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">cherry-pick</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">A^..B</span></span></code></pre></div><h2 id="配置项" tabindex="-1">配置项 <a class="header-anchor" href="#配置项" aria-label="Permalink to &quot;配置项&quot;">​</a></h2><p>git cherry-pick 命令的常用配置项如下：</p><ol><li><p><code>-e，--edit</code>：打开外部编辑器，编辑提交信息</p></li><li><p><code>-n，--no-commit</code>：只更新工作区和暂存区，不产生新的提交</p></li><li><p><code>-x</code>：在提交信息的末尾追加一行（cherry picked form commit ...），方便以后查到这个提交是如何产生的</p></li><li><p><code>-s，--signoff</code>：在提交信息的末尾追加一行操作者的签名，表示是谁进行了这个操作</p></li><li><p><code>-m parent-number，--mainline parent-number</code>：如果原始提交是一个合并节点，来自于两个分支的合并，那么 Cherry pick 默认将失败，因为它不知道应该采用哪个分支的代码变动</p></li></ol><p><code>-m</code> 配置项告诉 Git，应该采用哪个分支的变动。<code>parent-number</code> 是一个从 <code>1</code> 开始的整数，代表原始提交的父分支编号</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">cherry-pick</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">commitHas</span><span style="color:#BABED8;">h</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>👆 上面命令表示，cherry pick 采用提交 <code>commitHash</code> 来自编号 1 的父分支的变动</p><p>一般来说，1 号父分支是接受变动的分支（the branch being merged into），2 号父分支是作为变动来源的分支（the branch being merged from）</p><h2 id="代码冲突" tabindex="-1">代码冲突 <a class="header-anchor" href="#代码冲突" aria-label="Permalink to &quot;代码冲突&quot;">​</a></h2><p>如果操作过程中发生代码冲突，Cherry pick 会停下来，让用户决定如何继续操作</p><ol><li><strong>--continue</strong></li></ol><p>用户解决代码冲突后，第一步将修改的文件重新加入暂存区<code>(git add)</code>，第二步使用下面的命令，让 Cherry pick 过程继续执行</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">cherry-pick</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--continue</span></span></code></pre></div><ol start="2"><li><strong>--abort</strong></li></ol><p>发生冲突后，放弃合并，回到操作前的样子</p><ol start="3"><li><strong>--quit</strong></li></ol><p>发生代码冲突后，退出 Cherry pick，但是不回到操作前的样子</p><h2 id="转移到另一个代码库" tabindex="-1">转移到另一个代码库 <a class="header-anchor" href="#转移到另一个代码库" aria-label="Permalink to &quot;转移到另一个代码库&quot;">​</a></h2><p>Cherry pick 支持转移到另一个代码库，方法是：</p><p>首先，将该库加为远程仓库 <code>target</code></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">add</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">target</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">git://gitUrl</span></span></code></pre></div><p>然后，将远程代码仓库抓取到本地</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">fetch</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">target</span></span></code></pre></div><p>接着，检查要从远程仓库转移的提交，获取它的哈希值</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">log</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">target/master</span></span></code></pre></div><p>最后，使用 <code>git cherry-pick</code> 命令转移提交</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">cherry-pick</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">commitHas</span><span style="color:#BABED8;">h</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div>',39),n=[p];function t(c,r,i,h,y,d){return a(),l("div",null,n)}const D=s(o,[["render",t]]);export{B as __pageData,D as default};
