import{_ as a,o as e,c as s,V as t}from"./chunks/framework.bd00fe0c.js";const D=JSON.parse('{"title":"3 月 28 号面试题（）","description":"","frontmatter":{},"headers":[],"relativePath":"面试复盘/2024年3月28号.md","filePath":"面试复盘/2024年3月28号.md","lastUpdated":1714301133000}'),l={name:"面试复盘/2024年3月28号.md"},o=t(`<h1 id="_3-月-28-号面试题" tabindex="-1">3 月 28 号面试题（） <a class="header-anchor" href="#_3-月-28-号面试题" aria-label="Permalink to &quot;3 月 28 号面试题（）&quot;">​</a></h1><h2 id="_1-css-里面的选择器有哪些-权重是什么样的" tabindex="-1">1. CSS 里面的选择器有哪些？权重是什么样的？ <a class="header-anchor" href="#_1-css-里面的选择器有哪些-权重是什么样的" aria-label="Permalink to &quot;1. CSS 里面的选择器有哪些？权重是什么样的？&quot;">​</a></h2><p>内联样式 1000 直接写在元素上，比如：<div style="width:100px;"></div> id 选择器（#id） 100 类选择器（.class）、属性选择器（[attr=value]）、伪类选择器（:hover, :focus, :active） 10 元素选择器（div、h1）、伪元素选择器（::before, ::after） 1 通用选择器（*）0</p><h2 id="_2-js-的-对象继承" tabindex="-1">2. JS 的 对象继承 <a class="header-anchor" href="#_2-js-的-对象继承" aria-label="Permalink to &quot;2. JS 的 对象继承&quot;">​</a></h2><ol><li><p>基于原型链的继承</p></li><li><p>构造函数继承</p></li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Parent</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">parent</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="_3-谈谈-js-的作用域" tabindex="-1">3. 谈谈 JS 的作用域 <a class="header-anchor" href="#_3-谈谈-js-的作用域" aria-label="Permalink to &quot;3. 谈谈 JS 的作用域&quot;">​</a></h2><ol><li>全局作用域：全局变量和全局函数都可以在任意地方访问。</li><li>函数作用域：函数内部定义的变量和函数只能在函数内部访问。</li><li>块级作用域：ES6 引入了块级作用域，块级作用域中定义的变量和函数只能在块级作用域中访问。</li></ol><h2 id="_4-说一下-js-的垃圾回收机制" tabindex="-1">4. 说一下 JS 的垃圾回收机制 <a class="header-anchor" href="#_4-说一下-js-的垃圾回收机制" aria-label="Permalink to &quot;4. 说一下 JS 的垃圾回收机制&quot;">​</a></h2><h2 id="_5-谈谈对-react-的理解" tabindex="-1">5. 谈谈对 React 的理解 <a class="header-anchor" href="#_5-谈谈对-react-的理解" aria-label="Permalink to &quot;5. 谈谈对 React 的理解&quot;">​</a></h2><p>React，用于构建用户界面的 JavaScript 库，只提供了 UI 层面的解决方案</p><p>遵循组件设计模式、声明式编程范式和函数式编程概念，以使前端应用程序更高效</p><p>使用虚拟 DOM 来有效地操作 DOM，遵循从高阶组件到低阶组件的单向数据流</p><p>帮助我们将界面成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，构成整体页面</p><p>react 类组件使用一个名为 render() 的方法或者函数组件 return，接收输入的数据并返回需要展示的内容</p><p>React 特性有很多，如：</p><p>JSX 语法 单向数据绑定 虚拟 DOM 声明式编程 Component 着重介绍下声明式编程及 Component</p><ul><li>React 是一个用于构建用户界面的 JavaScript 库。</li><li>React 使用虚拟 DOM 来提高性能，并使用 JSX 语法来编写代码。</li><li>React 组件可以嵌套，并且可以复用。React 使用 state 和 props 来管理组件的状态。</li><li>React 使用生命周期方法来管理组件的生命周期。</li><li>React 使用 hooks 来管理组件的状态和生命周期。</li><li>React 使用 context 来管理组件的状态。</li><li>React 使用 redux 来管理组件的状态。</li><li>React 使用 react-router 来管理组件的路由。</li><li>React 使用 react-redux 来管理组件的状态。</li></ul>`,18),n=[o];function r(p,c,i,d,h,_){return e(),s("div",null,n)}const F=a(l,[["render",r]]);export{D as __pageData,F as default};
