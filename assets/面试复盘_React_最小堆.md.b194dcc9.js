import{_ as s,o as a,c as n,V as l}from"./chunks/framework.bd00fe0c.js";const h=JSON.parse('{"title":"最小堆","description":"","frontmatter":{},"headers":[],"relativePath":"面试复盘/React/最小堆.md","filePath":"面试复盘/React/最小堆.md","lastUpdated":1710918713000}'),p={name:"面试复盘/React/最小堆.md"},o=l(`<h1 id="最小堆" tabindex="-1">最小堆 <a class="header-anchor" href="#最小堆" aria-label="Permalink to &quot;最小堆&quot;">​</a></h1><p>在 Scheduler 中，使用最小堆的数据结构在对任务进行排序。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 两个任务队列</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> taskQueue</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Task</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> timerQueue</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Task</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(timerQueue</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> newTask)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 像数组中推入一个任务</span></span>
<span class="line"><span style="color:#82AAFF;">pop</span><span style="color:#BABED8;">(timerQueue)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 从数组中弹出一个任务</span></span>
<span class="line"><span style="color:#BABED8;">timer </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">peek</span><span style="color:#BABED8;">(timerQueue)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 从数组中获取第一个任务</span></span></code></pre></div><h2 id="二叉堆基本知识" tabindex="-1">二叉堆基本知识 <a class="header-anchor" href="#二叉堆基本知识" aria-label="Permalink to &quot;二叉堆基本知识&quot;">​</a></h2><h3 id="二叉树" tabindex="-1">二叉树 <a class="header-anchor" href="#二叉树" aria-label="Permalink to &quot;二叉树&quot;">​</a></h3><p>所谓二叉树，指的是一个父节点只能有 1 个或者 2 个子节点，例如下图：</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-12-30-055103.png" alt="image-20221230135103093" style="zoom:50%;"><p>总之就是不能多余两个节点。</p><h3 id="完全树" tabindex="-1">完全树 <a class="header-anchor" href="#完全树" aria-label="Permalink to &quot;完全树&quot;">​</a></h3><p>所谓完全树，指的是一棵树再进行填写的时候，遵循的是“从左往右，从上往下”</p><p>例如下面的这些树，就都是完全树：</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-12-30-055525.png" alt="image-20221230135524942"></p><p>再例如，下面的这些树，就不是完全树：</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-12-30-055856.png" alt="image-20221230135856627" style="zoom:50%;"><h3 id="完全树中的数值" tabindex="-1">完全树中的数值 <a class="header-anchor" href="#完全树中的数值" aria-label="Permalink to &quot;完全树中的数值&quot;">​</a></h3><p>可以分为两大类：</p><ul><li>最大堆：父节点的数值大于或者等于所有的子节点</li><li>最小堆：刚好相反，父节点的数值小于或者等于所有的子节点</li></ul><p>最大堆示例：</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-12-30-060219.png" alt="image-20221230140218584" style="zoom:50%;"><p>最小堆示例：</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-12-30-060339.png" alt="image-20221230140339328" style="zoom:50%;"><ul><li>无论是最大堆还是最小堆，第一个节点一定是这个堆中最大的或者最小的</li><li>每一层并非是按照一定顺序来排列的，比如下面的例子，6 可以在左分支，3 可以在右分支</li></ul><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-12-30-060935.png" alt="image-20221230140935130" style="zoom:50%;"><ul><li>每一层的所有元素并非一定比下一层（非自己的子节点）大或者小</li></ul><h3 id="堆的实现" tabindex="-1">堆的实现 <a class="header-anchor" href="#堆的实现" aria-label="Permalink to &quot;堆的实现&quot;">​</a></h3><p>堆一般来讲，可以使用数组来实现</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-12-30-061555.png" alt="image-20221230141555180" style="zoom:50%;"><p>通过数组，我们可以非常方便的找到一个节点的所有亲属</p><ul><li>父节点：Math.floor((当前节点的下标 - 1) / 2)</li></ul><table><thead><tr><th>子节点</th><th>父节点</th></tr></thead><tbody><tr><td>1</td><td>0</td></tr><tr><td>3</td><td>1</td></tr><tr><td>4</td><td>1</td></tr><tr><td>5</td><td>2</td></tr></tbody></table><ul><li>左分支节点：当前节点下标 * 2 + 1</li></ul><table><thead><tr><th>父节点</th><th>左分支节点</th></tr></thead><tbody><tr><td>0</td><td>1</td></tr><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>5</td></tr></tbody></table><ul><li>右分支节点：当前节点下标 * 2 + 2</li></ul><table><thead><tr><th>父节点</th><th>右分支节点</th></tr></thead><tbody><tr><td>0</td><td>2</td></tr><tr><td>1</td><td>4</td></tr><tr><td>2</td><td>6</td></tr></tbody></table><h2 id="react-中对最小堆的应用" tabindex="-1">react 中对最小堆的应用 <a class="header-anchor" href="#react-中对最小堆的应用" aria-label="Permalink to &quot;react 中对最小堆的应用&quot;">​</a></h2><p>在 react 中，最小堆对应的源码在 <em>SchedulerMinHeap.js</em> 文件中，总共有 6 个方法，其中向外暴露了 3 个方法</p><ul><li>push：向最小堆推入一个元素</li><li>pop：弹出一个</li><li>peek：取出第一个</li></ul><p>没有暴露的是：</p><ul><li>siftUp：向上调整</li><li>siftDown：向下调整</li><li>compare：这是一个辅助方法，就是两个元素做比较的</li></ul><p>所谓向上调整，就是指将一个元素和它的父节点做比较，如果比父节点小，那么就应该和父节点做交换，交换完了之后继续和上一层的父节点做比较，依此类推，直到该元素放置到了正确的位置</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-12-30-062926.png" alt="image-20221230142926067" style="zoom:50%;"><p>向下调整，就刚好相反，元素往下走，先和左分支进行比较，如果比左分支小，那就交换。</p><h3 id="peek" tabindex="-1">peek <a class="header-anchor" href="#peek" aria-label="Permalink to &quot;peek&quot;">​</a></h3><p>取出堆顶的任务，堆顶一定是最小的</p><p>这个方法极其的简单，如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">peek</span><span style="color:#BABED8;">(timerQueue)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">peek</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">heap</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 返回这个数组的第一个元素</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">heap</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">heap</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="push" tabindex="-1">push <a class="header-anchor" href="#push" aria-label="Permalink to &quot;push&quot;">​</a></h3><p>向最小堆推入一个新任务，因为使用的是数组，所以在推入任务的时候，首先该任务是被推入到数组的最后一项，但是这个时候，涉及到一个调整，我们需要向上调整，把这个任务调整到合适的位置</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(timerQueue</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> newTask)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">push</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">heap</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">node</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">index</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">heap</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 推入到数组的最后一位</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">heap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">node</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 向上调整，调整到合适的位置</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">siftUp</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">heap</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">node</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">index</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="pop" tabindex="-1">pop <a class="header-anchor" href="#pop" aria-label="Permalink to &quot;pop&quot;">​</a></h3><p>pop 是从任务堆里面弹出第一个任务，也就是意味着该任务已经没有在队列里面了</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">pop</span><span style="color:#BABED8;">(taskQueue)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">pop</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">heap</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">heap</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 获取数组的第一个任务（一定是最小的）</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">first</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">heap</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 拿到数组的最后一个</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">last</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">heap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">last</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">first</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 将最后一个任务放到第一个</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">heap</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">last</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 接下来向下调整</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">siftDown</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">heap</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">last</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">first</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>具体的调整示意图如下：</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-12-30-064713.png" alt="image-20221230144713347" style="zoom:50%;">`,54),t=[o];function e(c,r,y,i,F,D){return a(),n("div",null,t)}const B=s(p,[["render",e]]);export{h as __pageData,B as default};
