import{_ as s,o as a,c as n,V as o}from"./chunks/framework.bd00fe0c.js";const l="/blog-docs/assets/performance.163ad04b.png",A=JSON.parse('{"title":"JavaScript 评测代码运行速度","description":"","frontmatter":{},"headers":[],"relativePath":"network/measure-code-speed.md","filePath":"network/measure-code-speed.md","lastUpdated":1688457501000}'),p={name:"network/measure-code-speed.md"},e=o(`<h1 id="javascript-评测代码运行速度" tabindex="-1">JavaScript 评测代码运行速度 <a class="header-anchor" href="#javascript-评测代码运行速度" aria-label="Permalink to &quot;JavaScript 评测代码运行速度&quot;">​</a></h1><h2 id="一、使用-performance-now-api" tabindex="-1">一、使用 <code>performance.now()</code> API <a class="header-anchor" href="#一、使用-performance-now-api" aria-label="Permalink to &quot;一、使用 \`performance.now()\` API&quot;">​</a></h2><p>在 JavaScript 中，可以使用 <code>performance.now()</code> API 来评测代码的运行速度。该 API 返回当前页面的高精度时间戳，您可以在代码执行前后调用它来计算代码执行所需的时间。</p><p>例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> t0 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> performance</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 执行需要测试的代码</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1000000000</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// some code</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> t1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> performance</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Code took </span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> (t1 </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> t0) </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> milliseconds.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>注意，<code>performance.now()</code> API 只在现代浏览器中可用，并且可能会受到其他因素（例如计算机性能和当前页面的负载）的影响，因此该结果只能作为相对值。</p><h2 id="二、使用-console-time-和-console-timeend" tabindex="-1">二、使用 <code>console.time()</code> 和 <code>console.timeEnd()</code> <a class="header-anchor" href="#二、使用-console-time-和-console-timeend" aria-label="Permalink to &quot;二、使用 \`console.time()\` 和 \`console.timeEnd()\`&quot;">​</a></h2><p>另一种评测 JavaScript 代码运行速度的方法是使用 <code>console.time()</code> 和 <code>console.timeEnd()</code>。这两个方法允许您给特定代码块计时，并在代码执行后在控制台中显示计时结果。</p><p>例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Test code</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 执行需要测试的代码</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1000000000</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// some code</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">timeEnd</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Test code</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在控制台中，您将看到类似于以下内容的输出：</p><div class="language-log"><button title="Copy Code" class="copy"></button><span class="lang">log</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">Test code: 824.047119140625 ms</span></span></code></pre></div><p>使用 <code>performance.now()</code> API 和使用 <code>console.time()</code> 和 <code>console.timeEnd()</code> 这两种方法都可以快速评测代码的性能，但这些方法只是大致估算代码运行速度，而不是精确的性能测量工具。因此，如果需要更精确的评测，可以使用专业的性能分析工具。</p><h2 id="三、使用第三方库" tabindex="-1">三、使用第三方库 <a class="header-anchor" href="#三、使用第三方库" aria-label="Permalink to &quot;三、使用第三方库&quot;">​</a></h2><p>如果需要进行更严格的性能测试，您可以使用第三方库，例如 <code>Benchmark.js</code> 或 <code>JSLitmus</code>。这些库可以在多次运行代码的情况下进行测试，并以可读的方式报告结果，以便更好地评估性能。</p><p>例如，使用 <code>Benchmark.js</code> 进行性能测试的代码可能如下所示：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> suite </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> Benchmark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Suite</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 添加测试用例</span></span>
<span class="line"><span style="color:#BABED8;">suite</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Test code</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000000000</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// some code</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 运行测试用例</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cycle</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">String</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">event</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">async</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>可以使用各种配置选项，例如指定运行次数、自动运行测试等，以适应需求。通过使用这些库，可以对代码的性能进行更精确的评估，并了解其在不同浏览器和设备环境中的表现。</p><h2 id="四、使用浏览器开发者工具" tabindex="-1">四、使用浏览器开发者工具 <a class="header-anchor" href="#四、使用浏览器开发者工具" aria-label="Permalink to &quot;四、使用浏览器开发者工具&quot;">​</a></h2><p>例如，如果使用 Chrome 浏览器，可以使用 Chrome 开发者工具评测代码的运行速度。</p><ol><li><p>打开 Chrome 浏览器，并打开需要评测的页面。</p></li><li><p>单击浏览器的“更多工具”选项卡，然后选择“开发者工具”。</p></li><li><p>在开发者工具的“控制台”选项卡中，单击“Performance”按钮，以启动性能分析器。</p></li><li><p>单击“开始”按钮，以开始评测代码的运行速度。</p></li><li><p>在浏览器控制台中运行代码，并观察分析结果。您可以看到详细的性能分析报告，其中包括代码的 CPU 使用情况、内存使用情况、帧率等。</p></li></ol><p><img src="`+l+'" alt="Alt text"></p><p>如使用 Firefox 浏览器，可以使用 Firefox 开发者工具评测代码的运行速度。Firefox 开发者工具的使用方法类似 Chrome 开发者工具，请参阅 Firefox 开发者工具的文档以获取更多信息。</p><p>浏览器工具是评测 JavaScript 代码运行速度的非常方便的工具。通过使用它，您可以获得有关代码性能的详细信息，并确保代码在各种环境中良好运行。</p><p>来源：<a href="https://www.cnblogs.com/yuzhihui/p/17104239.html" target="_blank" rel="noreferrer">JavaScript 评测代码运行速度 </a></p>',25),t=[e];function c(r,D,y,F,i,B){return a(),n("div",null,t)}const E=s(p,[["render",c]]);export{A as __pageData,E as default};
