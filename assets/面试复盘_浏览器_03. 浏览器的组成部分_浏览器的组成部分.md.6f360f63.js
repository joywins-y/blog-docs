import{_ as e,o as a,c as m,V as i}from"./chunks/framework.bd00fe0c.js";const g=JSON.parse('{"title":"浏览器的组成部分","description":"","frontmatter":{},"headers":[],"relativePath":"面试复盘/浏览器/03. 浏览器的组成部分/浏览器的组成部分.md","filePath":"面试复盘/浏览器/03. 浏览器的组成部分/浏览器的组成部分.md","lastUpdated":1712573589000}'),p={name:"面试复盘/浏览器/03. 浏览器的组成部分/浏览器的组成部分.md"},r=i('<h1 id="浏览器的组成部分" tabindex="-1">浏览器的组成部分 <a class="header-anchor" href="#浏览器的组成部分" aria-label="Permalink to &quot;浏览器的组成部分&quot;">​</a></h1><p>什么是浏览器？</p><p><em>Web</em> 浏览器简称为浏览器，是一种用于访问互联网上信息的应用软件。浏览器的主要功能是从服务器检索 <em>Web</em> 资源并将其显示在 <em>Web</em> 浏览器窗口中。</p><p><em>Web</em> 资源通常是 <em>HTML</em> 文档，但也可能是 <em>PDF</em>、图像、音频、视频或其他类型的内容。资源的位置是通过使用 <em>URI</em>（统一资源标识符）指定的。</p><p>浏览器包含结构良好的组件，这些组件执行一系列任务让浏览器窗口能显示 <em>Web</em> 资源。</p><p>本文我们就来聊一聊关于浏览器的组成部分。</p><p>下图是关于浏览器的架构图：</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-11-26-051413.png" alt="image-20211126131413497"></p><p>一个 <em>Web</em> 浏览器中，主要组件有：</p><ul><li><p>用户界面（<em>user interface</em>）</p></li><li><p>浏览器引擎（<em>browser engine</em>）</p></li><li><p>渲染引擎（<em>rendering engine</em>）</p></li><li><p>网络（<em>networking</em>）</p></li><li><p><em>JS</em> 解释器（<em>JavaScript interpreter</em>）</p></li><li><p>用户界面后端（<em>UI backend</em>）</p></li><li><p>数据存储（<em>data storage</em>）</p></li></ul><p>下面我们来具体看一下每一个部分的作用。</p><h2 id="用户界面-user-interface" tabindex="-1">用户界面（<em>user interface</em>） <a class="header-anchor" href="#用户界面-user-interface" aria-label="Permalink to &quot;用户界面（*user interface*）&quot;">​</a></h2><p>用户界面用于呈现浏览器窗口部件，比如地址栏、前进后退按钮、书签、顶部菜单等。</p><p>如下图所示：</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-11-26-051451.png" alt="image-20211126131451095"></p><h2 id="浏览器引擎-browser-engine" tabindex="-1">浏览器引擎（<em>browser engine</em>） <a class="header-anchor" href="#浏览器引擎-browser-engine" aria-label="Permalink to &quot;浏览器引擎（*browser engine*）&quot;">​</a></h2><p>它是 <em>UI</em> 和渲染引擎之间的桥梁。接收来自 <em>UI</em> 的输入，然后通过操纵渲染引擎将网页或者其他资源显示在浏览器中。</p><h2 id="渲染引擎-rendering-engine" tabindex="-1">渲染引擎（<em>rendering engine</em>） <a class="header-anchor" href="#渲染引擎-rendering-engine" aria-label="Permalink to &quot;渲染引擎（*rendering engine*）&quot;">​</a></h2><p>负责在浏览器窗口上显示请求的内容。例如，用户请求一个 <em>HTML</em> 页面，则它负责解析 <em>HTML</em> 文档和 <em>CSS</em>，并将解析和格式化的内容显示在屏幕上。我们平时说的浏览器内核就是指这部分。</p><p>现代网络浏览器的渲染引擎：</p><ul><li><p><em>Firefox：Gecko Software</em></p></li><li><p><em>Safari：WebKit</em></p></li><li><p><em>Chrome、Opera</em> (<em>15</em> 版本之后)：<em>Blink</em></p></li><li><p><em>Internet Explorer：Trident</em></p></li></ul><p>在第一小节我们已经介绍过渲染引擎渲染页面的整体流程了，这里做一个简单的复习。</p><p>为了在屏幕上绘制像素（第一次渲染），浏览器在从网络接收数据（<em>HTML、CSS、JavaScript</em>）后必须经过一系列称为关键渲染路径的过程/技术。这包括 <em>DOM</em>、<em>CSSOM</em>、渲染树、布局和绘画。</p><h3 id="从数据到-dom" tabindex="-1">从数据到 <em>DOM</em> <a class="header-anchor" href="#从数据到-dom" aria-label="Permalink to &quot;从数据到 *DOM*&quot;">​</a></h3><p>来自网络层的请求内容以二进制流格式在渲染引擎中接收（通常为 <em>8kb</em> 块）。然后将原始字节转换为 <em>HTML</em> 文件的字符（基于字符编码）。</p><p>然后将字符转换为标记。词法分析器执行词法分析，将输入分解为标记。在标记化期间，文件中的每个开始和结束标记都被考虑在内。它知道如何去除不相关的字符，如空格和换行符。然后解析器进行语法分析，通过分析文档结构，应用语言语法规则来构建解析树。</p><p>解析过程是迭代的。它将向词法分析器询问新的标记，如果语言语法规则匹配，则该标记将被添加到解析树中。然后解析器将要求另一个令牌。如果没有规则匹配，解析器将在内部存储令牌并不断询问令牌，直到找到与所有内部存储的令牌匹配的规则。如果未找到规则，则解析器将引发异常。这意味着该文档无效并且包含语法错误。</p><p>这些节点在称为 <em>DOM</em>（文档对象模型）的树数据结构中链接，该结构建立了父子关系、相邻兄弟关系。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-11-26-051513.png" alt="image-20211126131513877"></p><h3 id="css-数据到-cssom" tabindex="-1"><em>CSS</em> 数据到 <em>CSSOM</em> <a class="header-anchor" href="#css-数据到-cssom" aria-label="Permalink to &quot;*CSS* 数据到 *CSSOM*&quot;">​</a></h3><p><em>CSS</em> 数据的原始字节被转换成字符、标记、节点，最后在 <em>CSSOM</em>（<em>CSS</em> 对象模型）中。 因为 <em>CSS</em> 存在层叠机制，该机制决定了将什么样式应用于元素，也就是说，元素的样式数据可以来自父项（通过继承）或设置为元素本身。因此浏览器必须递归遍历 <em>CSS</em> 树结构并确定特定元素的样式。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-11-26-051535.png" alt="image-20211126131534063"></p><h3 id="dom-和-cssom-渲染树" tabindex="-1"><em>DOM</em> 和 <em>CSSOM</em> 渲染树 <a class="header-anchor" href="#dom-和-cssom-渲染树" aria-label="Permalink to &quot;*DOM* 和 *CSSOM* 渲染树&quot;">​</a></h3><p><em>DOM</em> 树包含有关 <em>HTML</em> 元素关系的信息，而 <em>CSSOM</em> 树包含有关如何设置这些元素样式的信息。</p><p>渲染引擎会将样式信息和 <em>HTML</em> 元素关系信息进行汇总，用于创建另一棵树，称为“渲染树”。</p><p>渲染树包含具有视觉属性（如颜色和尺寸）的矩形。矩形按正确的顺序显示在屏幕上。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-11-26-051553.png" alt="image-20211126131552411"></p><h3 id="布局" tabindex="-1">布局 <a class="header-anchor" href="#布局" aria-label="Permalink to &quot;布局&quot;">​</a></h3><p>在构建渲染树之后，它会经历一个“布局”过程。布局过程的输出是一个“盒子模型”，它精确地捕获视口内每个元素的确切位置和大小：所有相对测量值都转换为屏幕上的绝对像素。</p><p>在下面的屏幕截图中，您可以看到为 <em>body</em> 元素计算的“框模型”（边距、边框、填充、宽度和高度）信息。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-11-26-051611.png" alt="image-20211126131610965"></p><h3 id="绘制" tabindex="-1">绘制 <a class="header-anchor" href="#绘制" aria-label="Permalink to &quot;绘制&quot;">​</a></h3><p>在这一阶段渲染树会被遍历，并且会只用 <em>UI</em> 后端层绘制每个节点。这个过程也被称为“光栅化”。在这个阶段，渲染树中每个节点的计算布局信息被转换为屏幕上的实际像素。</p><p>绘画是一个渐进的过程，其中一些部分被解析和渲染，而该过程继续处理来自网络的项目的其余部分。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-11-26-051631.png" alt="image-20211126131631548"></p><h3 id="整体流程图" tabindex="-1">整体流程图 <a class="header-anchor" href="#整体流程图" aria-label="Permalink to &quot;整体流程图&quot;">​</a></h3><p>渲染整体流程如下图所示：</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-11-26-051710.png" alt="image-20211126131710384"></p><h2 id="网络-networking" tabindex="-1">网络（<em>networking</em>） <a class="header-anchor" href="#网络-networking" aria-label="Permalink to &quot;网络（*networking*）&quot;">​</a></h2><p>该模块处理浏览器内的各种网络通信。它使用一组通信协议，如 <em>HTTP、HTTPs、FTP</em>，同时通过 <em>URL</em> 获取请求的资源。</p><h2 id="js-解释器-javascript-interpreter" tabindex="-1"><em>JS</em> 解释器（<em>JavaScript interpreter</em>） <a class="header-anchor" href="#js-解释器-javascript-interpreter" aria-label="Permalink to &quot;*JS* 解释器（*JavaScript interpreter*）&quot;">​</a></h2><p><em>JavaScript</em> 是一种脚本语言，允许我们动态更新 <em>Web</em> 内容、控制由浏览器的 <em>JS</em> 引擎执行的多媒体和动画图像。</p><p><em>DOM</em> 和 <em>CSSOM</em> 为 <em>JS</em> 提供了一个接口，可以改变 <em>DOM</em> 和 <em>CSSOM</em>。由于浏览器不确定特定的 <em>JS</em> 会做什么，它会在遇到 <em>script</em> 标签后立即暂停 <em>DOM</em> 树的构建。</p><p>每个脚本都是一个解析拦截器，会让 <em>DOM</em> 树的构建停止。</p><p><em>JS</em> 引擎在从服务器获取并输入 <em>JS</em> 解析器后立即开始解析代码。它将它们转换为机器理解的代表性对象。在抽象句法结构的树表示中存储所有解析器信息的对象称为对象语法树（AST）。这些对象被送入一个解释器，该解释器将这些对象翻译成字节码。</p><p>这些是即时 (<em>JIT</em>) 编译器，这意味着从服务器下载的 <em>JavaScript</em> 文件在客户端的计算机上实时编译。解释器和编译器是结合在一起的。解释器几乎立即执行源代码；编译器生成客户端系统直接执行的机器代码。</p><p>不同的浏览器使用不同的 <em>JS</em> 引擎：</p><ul><li><p><em>Chrome</em>： <em>V8</em> (<em>JavaScript</em> 引擎) (<em>Node JS</em> 建立在此之上)</p></li><li><p><em>Mozilla</em>： <em>SpiderMonkey</em> (旧称“松鼠鱼”)</p></li><li><p><em>Microsoft Edge</em>：<em>Chakra</em></p></li><li><p><em>Safari</em>：<em>JavaScriptCore / Nitro WebKit</em></p></li></ul><h2 id="用户界面后端-ui-backend" tabindex="-1">用户界面后端（<em>UI backend</em>） <a class="header-anchor" href="#用户界面后端-ui-backend" aria-label="Permalink to &quot;用户界面后端（*UI backend*）&quot;">​</a></h2><p>用于绘制基本的窗口小部件，比如下拉列表、文本框、按钮等，向上提供公开的接口，向下调用操作系统的用户界面。</p><h2 id="数据存储-data-storage" tabindex="-1">数据存储（<em>data storage</em>） <a class="header-anchor" href="#数据存储-data-storage" aria-label="Permalink to &quot;数据存储（*data storage*）&quot;">​</a></h2><p>这是一个持久层。浏览器可能需要在本地保存各种数据，例如 <em>cookie</em>。浏览器还支持 <em>localStorage、IndexedDB、WebSQL</em> 和 <em>FileSystem</em> 等存储机制。</p><p>我们将在下一篇文章讨论浏览器的离线存储。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>最后，我们对浏览器的组成部分进行一个总结。</p><p>浏览器由以下几个部分组成：</p><ol><li><p>用户界面（<em>user interface</em>）</p><p>用于呈现浏览器窗口部件，比如地址栏、前进后退按钮、书签、顶部菜单等</p></li><li><p>浏览器引擎（<em>browser engine</em>）</p><p>用户在用户界面和渲染引擎中传递指令</p></li><li><p>渲染引擎（<em>rendering engine</em>）</p><p>负责解析 <em>HTML</em>、<em>CSS</em>，并将解析的内容显示到屏幕上。我们平时说的浏览器内核就是指这部分。</p></li><li><p>网络（<em>networking</em>）</p><p>用户网络调用，比如发送 <em>http</em> 请求</p></li><li><p>用户界面后端（<em>UI backend</em>）</p><p>用于绘制基本的窗口小部件，比如下拉列表、文本框、按钮等，向上提供公开的接口，向下调用操作系统的用户界面。</p></li><li><p><em>JS</em> 解释器（<em>JavaScript interpreter</em>）</p><p>解释执行 <em>JS</em> 代码。我们平时说的 <em>JS</em> 引擎就是指这部分。</p></li><li><p>数据存储（<em>data storage</em>）</p><p>用户保存数据到磁盘中。比如 <em>cookie、localstorage</em> 等都是使用的这部分功能。</p></li></ol><hr><p>-<em>EOF</em>-</p>',69),t=[r];function n(o,l,s,c,h,d){return a(),m("div",null,t)}const u=e(p,[["render",n]]);export{g as __pageData,u as default};
