import{_ as a,o as n,c as o,C as e,a as t}from"./chunks/framework.bd00fe0c.js";const P=JSON.parse('{"title":"未分类文档","description":"","frontmatter":{},"headers":[],"relativePath":"others/index.md","filePath":"others/index.md","lastUpdated":1685588674000}'),s={name:"others/index.md"},i=e("h1",{id:"未分类文档",tabindex:"-1"},[t("未分类文档 "),e("a",{class:"header-anchor",href:"#未分类文档","aria-label":'Permalink to "未分类文档"'},"​")],-1),r=e("h2",{id:"分离原则-unix-哲学",tabindex:"-1"},[t("分离原则 -- Unix 哲学 "),e("a",{class:"header-anchor",href:"#分离原则-unix-哲学","aria-label":'Permalink to "分离原则 -- Unix 哲学"'},"​")],-1),d=e("p",null,"这表达了一个存在很长时间的普遍基本原则， “Unix 基础哲学第四条”：",-1),l=e("blockquote",null,[e("p",null,"分离原则：将策略与机制分离，将接口和引擎分离 -- Eric S. Raymond")],-1),c=e("p",null,"将书中某部分内容，用“接口”来替换“策略”：",-1),_=e("blockquote",null,[e("p",null,"接口和机制都倾向于在不同时间范围内变化，但接口的变化比机制要快得多。GUI工具包的外观和体验会变，但操作和组合却不会。 因此，将接口和机制结合在一起有两个不好的影响：它使得接口变得生硬，更难响应用户的需求，这意味着试图更改接口具有很强的不稳定性。 另一方面，通过将这两者分开，我们可以在没有中断机制的情况下试验新的接口。我们还可以更容易地为该机制编写好的测试接口。")],-1),h=[i,r,d,l,c,_];function p(u,x,m,f,b,k){return n(),o("div",null,h)}const $=a(s,[["render",p]]);export{P as __pageData,$ as default};
