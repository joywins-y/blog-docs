import{_ as s,o as n,c as a,V as l}from"./chunks/framework.bd00fe0c.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/useful-js-snippets/function.md","filePath":"javascript/useful-js-snippets/function.md","lastUpdated":1689048652000}'),o={name:"javascript/useful-js-snippets/function.md"},p=l(`<h2 id="function-函数" tabindex="-1">Function 函数 <a class="header-anchor" href="#function-函数" aria-label="Permalink to &quot;Function 函数&quot;">​</a></h2><h3 id="chain-asynchronous-functions-链式调用异步函数" tabindex="-1">Chain asynchronous functions (链式调用异步函数) <a class="header-anchor" href="#chain-asynchronous-functions-链式调用异步函数" aria-label="Permalink to &quot;Chain asynchronous functions (链式调用异步函数)&quot;">​</a></h3><p>循环遍历包含异步事件的函数数组，每次异步事件完成后调用 next 。</p><p>JavaScript 代码:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> chainAsync </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">fns</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">curr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">next</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">fns</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">curr</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">](</span><span style="color:#BABED8;">next</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* chainAsync([ next =&gt; { console.log(&#39;0 seconds&#39;); setTimeout(next, 1000); }, next =&gt; { console.log(&#39;1 second&#39;); setTimeout(next, 1000); }, next =&gt; { console.log(&#39;2 seconds&#39;); } ]) */</span></span></code></pre></div><h3 id="curry-函数式编程术语-柯里化" tabindex="-1">Curry (函数式编程术语：柯里化) <a class="header-anchor" href="#curry-函数式编程术语-柯里化" aria-label="Permalink to &quot;Curry (函数式编程术语：柯里化)&quot;">​</a></h3><p>使用递归。如果提供的参数(args)数量足够，调用传递函数 fn 。否则返回一个柯里化后的函数 fn ，期望剩下的参数。如果你想柯里化一个接受可变参数数量的函数(可变参数数量的函数，例如 Math.min() )，你可以选择将参数个数传递给第二个参数 arity。</p><p>JavaScript 代码:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> curry </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">arity</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> fn</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> arity </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> args</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">args) </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> curry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#BABED8;"> fn</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> arity</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">args)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// curry(Math.pow)(2)(10) -&gt; 1024</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// curry(Math.min, 3)(10)(50)(2) -&gt; 2</span></span></code></pre></div><h3 id="pipe-函数式编程术语-管道或导流" tabindex="-1">Pipe (函数式编程术语：管道或导流) <a class="header-anchor" href="#pipe-函数式编程术语-管道或导流" aria-label="Permalink to &quot;Pipe (函数式编程术语：管道或导流)&quot;">​</a></h3><p>使用 Array.reduce() 来执行从左到右的函数组合。第一个(最左边的)函数可以接受一个或多个参数；其余的函数必须是一元函数。</p><p>JavaScript 代码:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> pipe </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(...</span><span style="color:#BABED8;font-style:italic;">fns</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  fns</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">f</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">g</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">(...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#82AAFF;">g</span><span style="color:#BABED8;">(</span><span style="color:#82AAFF;">f</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">args))</span></span>
<span class="line"><span style="color:#BABED8;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* const add5 = x =&gt; x + 5 const multiply = (x, y) =&gt; x * y const multiplyAndAdd5 = pipe(multiply, add5) multiplyAndAdd5(5, 2) -&gt; 15 */</span></span></code></pre></div><h3 id="promisify-柯里化一个-promise-函数" tabindex="-1">Promisify (柯里化一个 Promise 函数) <a class="header-anchor" href="#promisify-柯里化一个-promise-函数" aria-label="Permalink to &quot;Promisify (柯里化一个 Promise 函数)&quot;">​</a></h3><p>使用柯里化返回一个函数，这个函数返回一个调用原始函数的 Promise 。使用 ...rest 运算符传入所有参数。在 Node 8+ 中，你可以使用 util.promisify</p><p>JavaScript 代码:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> promisify </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">func</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">(...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#82AAFF;">func</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">args</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">result</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> (err </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">reject</span><span style="color:#BABED8;">(err) </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">resolve</span><span style="color:#BABED8;">(result)))</span></span>
<span class="line"><span style="color:#BABED8;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// const delay = promisify((d, cb) =&gt; setTimeout(cb, d))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// delay(2000).then(() =&gt; console.log(&#39;Hi!&#39;)) -&gt; Promise resolves after 2s</span></span></code></pre></div><p>Run promises in series (运行连续的 promises) 使用 Array.reduce() 通过创建 promise 链来运行连续的 promises，其中每个 promise 在 resolved 时返回下一个 promise 。 JavaScript 代码:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> series </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">ps</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> ps</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">p</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">next</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#BABED8;">(next)</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#BABED8;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// const delay = (d) =&gt; new Promise(r =&gt; setTimeout(r, d))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// series([() =&gt; delay(1000), () =&gt; delay(2000)]) -&gt; executes each promise sequentially, taking a total of 3 seconds to complete</span></span></code></pre></div><h3 id="sleep-休眠" tabindex="-1">Sleep (休眠) <a class="header-anchor" href="#sleep-休眠" aria-label="Permalink to &quot;Sleep (休眠)&quot;">​</a></h3><p>延迟执行 async 函数的一部分，通过把它放到 sleep 状态，返回一个 Promise 。</p><p>JavaScript 代码:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> sleep </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">ms</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">resolve</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#BABED8;">(resolve</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> ms))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* async function sleepyWork() { console.log(&#39;I\\&#39;m going to sleep for 1 second.&#39;); await sleep(1000); console.log(&#39;I woke up after 1 second.&#39;); } */</span></span></code></pre></div><h3 id="asynchronous-function-judgment-异步函数判断" tabindex="-1">Asynchronous function judgment (异步函数判断) <a class="header-anchor" href="#asynchronous-function-judgment-异步函数判断" aria-label="Permalink to &quot;Asynchronous function judgment (异步函数判断)&quot;">​</a></h3><p>判断一个函数是否属于异步函数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> isAsyncFunction </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">v</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(v) </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[object AsyncFunction]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// isAsyncFunction(async function () {}); // true</span></span></code></pre></div>`,26),e=[p];function t(c,r,y,D,i,B){return n(),a("div",null,e)}const E=s(o,[["render",t]]);export{A as __pageData,E as default};
