import{_ as s,o as a,c as n,V as l}from"./chunks/framework.bd00fe0c.js";const E=JSON.parse('{"title":"包装类型","description":"","frontmatter":{},"headers":[],"relativePath":"面试复盘/JavaScript/03. 包装类型/包装类型.md","filePath":"面试复盘/JavaScript/03. 包装类型/包装类型.md","lastUpdated":1712573589000}'),p={name:"面试复盘/JavaScript/03. 包装类型/包装类型.md"},o=l(`<h1 id="包装类型" tabindex="-1">包装类型 <a class="header-anchor" href="#包装类型" aria-label="Permalink to &quot;包装类型&quot;">​</a></h1><h2 id="经典真题" tabindex="-1">经典真题 <a class="header-anchor" href="#经典真题" aria-label="Permalink to &quot;经典真题&quot;">​</a></h2><ul><li>是否了解 <em>JavaScript</em> 中的包装类型？</li></ul><h2 id="包装类型-1" tabindex="-1">包装类型 <a class="header-anchor" href="#包装类型-1" aria-label="Permalink to &quot;包装类型&quot;">​</a></h2><p>在 <em>ES</em> 中，数据的分类分为<strong>基本数据类型</strong>和<strong>引用类型</strong>。</p><p>按照最新 <em>ES</em> 标准定义，基本数据类型（<em>primitive value</em>）包括 <em>undefined、null、boolean、number、symbol、string</em>。</p><p>引用类型包括 <em>Object、Array、Date、RegExp</em> 等。</p><p>基本数据类型和引用类型这两个类型其中一个很明显的区别是，引用类型有自己内置的方法，也可以自定义其他方法用来操作数据，而基本数据类型不能像引用类型那样有自己的内置方法对数据进行更多的操作。</p><p>但基本数据类型真的就不能使用方法吗？对于部分基本类型来说确实是这样的。</p><p>但是有 <em>3</em> 个是 <em>ES</em> 提供了对应的特殊引用类型（包装类型）<em>Boolean、Number、String</em>。</p><p>基本包装类型，和其他引用类型一样，拥有内置的方法可以对数据进行额外操作。如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// string 基本类型</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> s2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">charAt</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(s2)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// h</span></span></code></pre></div><p>上面的 <em>string</em> 是一个基本类型，但是它却能调用 <em>charAt( )</em> 的方法。</p><p>其主要是因为在执行第二行代码时，后台会自动进行下面的步骤：</p><ol><li>自动创建 <em>String</em> 类型的一个实例（和基本类型的值不同，这个实例就是一个基本包装类型的对象）</li><li>调用实例（对象）上指定的方法</li><li>销毁这个实例</li></ol><p>用代码的方式解释就是如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//我们平常写程序的过程：</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// string 基本类型</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> s2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">charAt</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 在执行到这一句的时候 后台会自动完成以下动作 ：</span></span>
<span class="line"><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">    var _str </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">String</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">); </span><span style="color:#676E95;font-style:italic;">// 1 找到对应的包装对象类型，然后通过包装对象创建出一个和基本类型值相同的对象</span></span>
<span class="line"><span style="color:#BABED8;">    var s2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> _str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">charAt</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">); </span><span style="color:#676E95;font-style:italic;">// 2 然后这个对象就可以调用包装对象下的方法，并且返回结给 s2.</span></span>
<span class="line"><span style="color:#BABED8;">    _str </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">null</span><span style="color:#BABED8;">;  </span><span style="color:#676E95;font-style:italic;">//    3 之后这个临时创建的对象就被销毁了， str =null; </span></span>
<span class="line"><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(s2)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// h </span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// hello</span></span></code></pre></div><p>基本类型的值虽然没有方法可以调用，但是后台临时创建的包装对象上有内置方法可以让我们调用方法，因此这样我们就可以对字符串、数值、布尔值这三种基本数据类型的数据进行更多操作。</p><p>而什么时候后台会自动创建一个对应的基本包装类型的对象，取决于当前执行的代码是否是为了获取他的值。</p><p>每当读取一个基本类型的值，也就是当我们需要从内存中获取到他的值时（这个访问过程称为读取模式），这时后台就会自动创建一个基本包装类型的对象。例如：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> test </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hhh</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(test) </span><span style="color:#676E95;font-style:italic;">// 读取模式，后台自动创建基本包装类型对象</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> test2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> test </span><span style="color:#676E95;font-style:italic;">// 赋值给变量 test2，也需要读取 test 的值，同上</span></span></code></pre></div><p>基本包装类型的对象和引用类型的对象最大的一个区别是，对象的生存期不同，导致的一个结果就是，基本包装类型无法自定义自己的方法。</p><p>对于引用类型的数据，在执行流离开当前作用域之前都会保存在内存中，而对于自动创建的基本包装类型的对象，只存在于一行代码的执行瞬间，执行完毕就会立即被销毁。 如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">str</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">test </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hhh</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">test) </span><span style="color:#676E95;font-style:italic;">//undefined</span></span></code></pre></div><p>上面第二行代码给自动创建的 <em>String</em> 实例对象添加了 <em>test</em> 属性，虽然此刻代码执行时他是生效的，但是在这行代码执行完毕后该 <em>String</em> 实例就会立刻被销毁，<em>String</em> 实例的 <em>test</em> 属性也就不存在了。</p><p>当执行第三行代码时，由于是读取模式，又重新创建了新的 <em>String</em> 实例，而这个新创建的 <em>String</em> 实例没有 <em>test</em> 属性，结果也就是 <em>undefined</em>。</p><p>用代码的方式解释就是如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">str</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">number </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">//假设我们想给字符串添加一个属性 number ，后台会有如下步骤</span></span>
<span class="line"><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">    var _str </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">String</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">); </span><span style="color:#676E95;font-style:italic;">// 1 找到对应的包装对象类型，然后通过包装对象创建出一个和基本类型值相同的对象</span></span>
<span class="line"><span style="color:#BABED8;">    _str</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">number </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;">; </span><span style="color:#676E95;font-style:italic;">// 2 通过这个对象调用包装对象下的方法 但结果并没有被任何东西保存</span></span>
<span class="line"><span style="color:#BABED8;">    _str </span><span style="color:#89DDFF;">=null</span><span style="color:#BABED8;">; </span><span style="color:#676E95;font-style:italic;">// 3 这个对象又被销毁</span></span>
<span class="line"><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">number)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// undefined  当执行到这一句的时候，因为基本类型本来没有属性，后台又会重新重复上面的步骤</span></span>
<span class="line"><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">   var str </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">String</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">);</span><span style="color:#676E95;font-style:italic;">// 1 找到基本包装对象，然后又新开辟一个内存，创建一个值为 hello 对象</span></span>
<span class="line"><span style="color:#BABED8;">   str</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">number </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#BABED8;">;</span><span style="color:#676E95;font-style:italic;">// 2 因为包装对象下面没有 number 这个属性，所以又会重新添加，因为没有值，所以值是未定义;然后弹出结果</span></span>
<span class="line"><span style="color:#BABED8;">   str </span><span style="color:#89DDFF;">=null</span><span style="color:#BABED8;">; </span><span style="color:#676E95;font-style:italic;">// 3 这个对象又被销毁</span></span>
<span class="line"><span style="color:#BABED8;">)</span></span></code></pre></div><p>那么我们怎么才能给基本类型添加方法或者属性呢？</p><p>答案是在基本包装对象的原型下面添加，每个对象都有原型。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//给字符串添加方法  要写到对应的包装对象的原型下才行</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">last</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">fuction</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">charAt</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#BABED8;">str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">last</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 5 执行到这一句，后台依然会偷偷的干这些事</span></span>
<span class="line"><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">    var _str </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">String</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">);</span><span style="color:#676E95;font-style:italic;">// 找到基本包装对象，new一个和字符串值相同的对象，</span></span>
<span class="line"><span style="color:#BABED8;">    _str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">last</span><span style="color:#BABED8;">();  </span><span style="color:#676E95;font-style:italic;">// 通过这个对象找到了包装对象下的方法并调用 </span></span>
<span class="line"><span style="color:#BABED8;">    _str </span><span style="color:#89DDFF;">=null</span><span style="color:#BABED8;">; </span><span style="color:#676E95;font-style:italic;">//  这个对象被销毁</span></span>
<span class="line"><span style="color:#BABED8;">)</span></span></code></pre></div><h2 id="真题解答" tabindex="-1">真题解答 <a class="header-anchor" href="#真题解答" aria-label="Permalink to &quot;真题解答&quot;">​</a></h2><ul><li>是否了解 <em>JavaScript</em> 中的包装类型？</li></ul><blockquote><p>参考答案：</p><p>包装对象，就是当基本类型以对象的方式去使用时，<em>JavaScript</em> 会转换成对应的包装类型，相当于 <em>new</em> 一个对象，内容和基本类型的内容一样，然后当操作完成再去访问的时候，这个临时对象会被销毁，然后再访问时候就是 <em>undefined</em>。</p><p><em>number、string、boolean</em> 都有对应的包装类型。</p><p>因为有了基本包装类型，所以 <em>JavaScript</em> 中的基本类型值可以被当作对象来访问。</p><p>基本类型特征：</p><ol><li>每个包装类型都映射到同名的基本类型</li><li>在读取模式下访问基本类型值时，就会创建对应的基本包装类型的一个对象，从而方便了数据操作</li><li>操作基本类型值的语句一经执行完毕，就会立即销毁新创建的包装对象</li></ol></blockquote><p>-<em>EOF</em>-</p>`,35),e=[o];function t(c,r,y,D,B,i){return a(),n("div",null,e)}const A=s(p,[["render",t]]);export{E as __pageData,A as default};
