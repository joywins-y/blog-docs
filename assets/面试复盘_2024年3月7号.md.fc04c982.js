import{_ as s,o as a,c as n,V as l}from"./chunks/framework.bd00fe0c.js";const A=JSON.parse('{"title":"3 月 7 号面试题（蚂蚁金服 二面）","description":"","frontmatter":{},"headers":[],"relativePath":"面试复盘/2024年3月7号.md","filePath":"面试复盘/2024年3月7号.md","lastUpdated":1714301133000}'),o={name:"面试复盘/2024年3月7号.md"},p=l(`<h1 id="_3-月-7-号面试题-蚂蚁金服-二面" tabindex="-1">3 月 7 号面试题（蚂蚁金服 二面） <a class="header-anchor" href="#_3-月-7-号面试题-蚂蚁金服-二面" aria-label="Permalink to &quot;3 月 7 号面试题（蚂蚁金服 二面）&quot;">​</a></h1><h2 id="_1-自我介绍" tabindex="-1">1. 自我介绍 <a class="header-anchor" href="#_1-自我介绍" aria-label="Permalink to &quot;1. 自我介绍&quot;">​</a></h2><h2 id="_2-什么是跨域-一般怎么解决" tabindex="-1">2. 什么是跨域，一般怎么解决 <a class="header-anchor" href="#_2-什么是跨域-一般怎么解决" aria-label="Permalink to &quot;2. 什么是跨域，一般怎么解决&quot;">​</a></h2><p><strong>当一个请求 url 的<code>协议</code>、<code>域名</code>、<code>端口</code>三者之间的<code>任意一个</code>与当前页面 url<code>不同</code>即为<code>跨域</code>。</strong></p><p>出于浏览器的<code>同源策略</code>限制，是发生在 页面 到 服务端 请求的过程中</p><p>解决方法：</p><p><strong>nginx 反向代理解决跨域（前端常用）</strong></p><p><strong>4.CORS 解决跨域(也就是添加响应头解决跨域)</strong></p><p>浏览器先询问 b,b 允许 a 访问 access-control-allow-origin access-control-max-age PHP 端修改 header： <img src="https://segmentfault.com/img/bVc7B7J" alt="image.png"></p><div class="language-awk"><button title="Copy Code" class="copy"></button><span class="lang">awk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">header(&#39;Access</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">Control</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">Allow</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">Origin</span><span style="color:#89DDFF;">:*</span><span style="color:#BABED8;">&#39;);</span><span style="color:#89DDFF;">//</span><span style="color:#BABED8;">允许所有来源访问</span></span>
<span class="line"><span style="color:#BABED8;">header(&#39;Access</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">Control</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">Allow</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">Method</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;">POST</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">GET&#39;);</span><span style="color:#89DDFF;">//</span><span style="color:#BABED8;">允许访问的方式</span></span></code></pre></div><p>它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制。</p><p>CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。</p><p>浏览器端：</p><p>目前，所有浏览器都支持该功能（IE10 以下不行）。整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。</p><p>服务端：</p><p>CORS 通信与 AJAX 没有任何差别，因此你不需要改变以前的业务逻辑。只不过，浏览器会在请求中携带一些头信息，我们需要以此判断是否运行其跨域，然后在响应头中加入一些信息即可。这一般通过过滤器完成即可。</p><blockquote><p><strong>优势：</strong></p><p>在服务端进行控制是否允许跨域，可自定义规则 支持各种请求方式</p><p><strong>缺点：</strong></p><p>会产生额外的请求</p></blockquote><h2 id="_3-http-请求的状态码有哪些" tabindex="-1">3. http 请求的状态码有哪些 <a class="header-anchor" href="#_3-http-请求的状态码有哪些" aria-label="Permalink to &quot;3. http 请求的状态码有哪些&quot;">​</a></h2><p>200 OK：请求成功，服务器成功处理了请求。 201 Created：请求已成功，并在服务器上创建了新的资源。 204 No Content：服务器成功处理了请求，但没有返回任何内容。 301 Moved Permanently：永久移动。请求的资源已被永久的移动到新 URI。 302 Found：资源只是临时被移动。客户端应继续使用原有 URI。 400 Bad Request：服务器无法理解请求的语法，请求有语法错误。 401 Unauthorized：请求需要用户身份验证。 403 Forbidden：服务器拒绝请求，没有权限访问。 404 Not Found：请求的资源不存在。 405 Method Not Allowed：请求方法不被允许。 500 Internal Server Error：服务器内部错误，无法完成请求。 502 Bad Gateway：服务器作为网关或代理,从上游服务器收到无效响应。 503 Service Unavailable：服务器当前无法处理请求,通常由于过载或维护。</p><h4 id="_1xx-消息状态码" tabindex="-1">1XX 消息状态码： <a class="header-anchor" href="#_1xx-消息状态码" aria-label="Permalink to &quot;1XX 消息状态码：&quot;">​</a></h4><ul><li>100：Continue 继续。客户端继续请求。</li><li>101：Swiching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到 HTTP 的新版本协议。</li></ul><h4 id="_2xx-成功状态码" tabindex="-1">2XX 成功状态码 <a class="header-anchor" href="#_2xx-成功状态码" aria-label="Permalink to &quot;2XX 成功状态码&quot;">​</a></h4><ul><li><strong>200：OK 请求成功。一般用于 GET 和 POST 请求。</strong></li><li>201：Created 已创建。成功请求并创建了新的资源。</li><li>202：Accepted 已接受。已经接受请求，但未处理完成。</li><li>203：Non-Authoritative Information 非授权信息。请求成功，但返回的 meta 信息不在原始的服务器，而是一个副本。</li><li><strong>204：No Content 无内容。服务器处理成功，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档。</strong></li><li>205：Reset Content 重置内容。服务器处理成功，用户终端（例如浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域。</li><li><strong>206：Partial Content 部分内容。服务器成功处理了部分 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。</strong></li></ul><h4 id="_3xx-重定向状态码" tabindex="-1">3XX 重定向状态码 <a class="header-anchor" href="#_3xx-重定向状态码" aria-label="Permalink to &quot;3XX 重定向状态码&quot;">​</a></h4><ul><li>300：Multiple Choices 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择。</li><li><strong>301：Moved Permanently 永久移动。请求的资源已被永久的移动到新 URI，返回信息会包括新的 URI，浏览器会自动定向到新 URI。今后任何新的请求都应使用新的 URI 代替。</strong></li><li><strong>302：Found 临时移动，与 301 类似。但资源只是临时被移动。客户端应继续使用原有 URI。</strong></li><li>303：See Other 查看其它地址。与 301 类似。使用 GET 和 POST 请求查看。</li><li><strong>304：Not Modified 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源。</strong></li><li>305：Use Proxy 使用代理。所请求的资源必须通过代理访问。</li><li>306：Unused 已经被废弃的 HTTP 状态码。</li><li><strong>307：Temporary Redirect 临时重定向。与 302 类似。使用 GET 请求重定向。</strong></li></ul><h4 id="_4xx-客户端错误状态码" tabindex="-1">4XX 客户端错误状态码 <a class="header-anchor" href="#_4xx-客户端错误状态码" aria-label="Permalink to &quot;4XX 客户端错误状态码&quot;">​</a></h4><ul><li><strong>400：Bad Request 客户端请求的语法错误，服务器无法理解。</strong></li><li><strong>401：Unauthorized 请求要求用户的身份认证。</strong></li><li><strong>402：Payment Required 保留，将来使用。</strong></li><li><strong>403：Forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求。</strong></li><li><strong>404：Not Found 服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&quot;您所请求的资源无法找到&quot;的个性页面。</strong></li><li>405：Method Not Allowed 客户端请求中的方法被禁止。</li><li>406：Not Acceptable 服务器无法根据客户端请求的内容特性完成请求。</li><li>407：Proxy Authentication Required 请求要求代理的身份认证，与 401 类似，但请求者应当使用代理进行授权。</li><li>408：Request Time-out 服务器等待客户端发送的请求时间过长，超时。</li><li>409：Conflict 服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突。</li><li>410：Gone 客户端请求的资源已经不存在。410 不同于 404，如果资源以前有现在被永久删除了可使用 410 代码，网站设计人员可通过 301 代码指定资源的新位置。</li><li>411：Length Required 服务器无法处理客户端发送的不带 Content-Length 的请求信息。</li><li>412：Precondition Failed 客户端请求信息的先决条件错误。</li><li>413：Request Entity Too Large 由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个 Retry-After 的响应信息。</li><li>414：Request-URI Too Large 请求的 URI 过长（URI 通常为网址），服务器无法处理。</li><li>415：Unsupported Media Type 服务器无法处理请求附带的媒体格式。</li><li>416：Requested range not satisfiable 客户端请求的范围无效。</li><li>417：Expectation Failed 服务器无法满足 Expect 的请求头信息。</li></ul><h4 id="_5xx-服务端错误状态码" tabindex="-1">5XX 服务端错误状态码 <a class="header-anchor" href="#_5xx-服务端错误状态码" aria-label="Permalink to &quot;5XX 服务端错误状态码&quot;">​</a></h4><ul><li><strong>500：Internal Server Error 服务器内部错误，无法完成请求。</strong></li><li><strong>501：Not Implemented 服务器不支持请求的功能，无法完成请求。</strong></li><li>502：Bad Gateway 作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应。</li><li><strong>503：Service Unavailable 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的 Retry-After 头信息中。</strong></li><li>504：Gateway Time-out 充当网关或代理的服务器，未及时从远端服务器获取请求。</li><li>505：HTTP Version not supported 服务器不支持请求的 HTTP 协议的版本，无法完成处理。</li></ul><h2 id="_4-箭头函数和普通函数的区别" tabindex="-1">4. 箭头函数和普通函数的区别 <a class="header-anchor" href="#_4-箭头函数和普通函数的区别" aria-label="Permalink to &quot;4. 箭头函数和普通函数的区别&quot;">​</a></h2><p><a href="https://juejin.cn/post/6844903805960585224" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903805960585224</a></p><p>箭头函数是 ES6 引入的一种函数声明方式，它具有更短的语法和词法作用域。 MDN 的描述： 箭头函数表达式的语法比传统的函数表达式更简洁，但在语义上有一些差异，在用法上也有一些限制：</p><ol><li>箭头函数都是匿名函数，普通函数可以是匿名函数，也可以是具名函数。</li><li>普通函数的 this 是指向调用它的对象，箭头函数没有自己的 this，它会在声明时捕获其所在上下文 this 以供自己使用。</li><li>箭头函数不能做构造函数，也就是不能使用 new 关键字。箭头函数没有 arguments 参数，可以使用 rest 参数来代替。</li></ol><blockquote><ul><li>箭头函数没有独立的 <code>this</code>、<code>arguments</code> 和 <code>super</code> 绑定，并且不可被用作方法。</li><li>箭头函数不能用作构造函数。使用 <code>new</code> 调用它们会引发 <code>TypeError</code>。它们也无法访问 <code>new.target</code> 关键字。</li><li>箭头函数不能在其主体中使用 <code>yield</code>，也不能作为生成器函数创建。</li><li>.call()/.apply()/.bind()无法改变箭头函数中 this 的指向</li></ul></blockquote><blockquote><p>所谓的没有 this ，不是箭头函数中没有 this 这个变量，而是箭头函数不绑定自己的 this，它们会捕获其所在上下文的 this 值，作为自己的 this 值。这对于回调函数特别有用，可以避免传统函数中常见的 this 指向问题。例如，在对象方法中使用箭头函数可以确保 this 保持一致。</p></blockquote><p>箭头函数是继承外层函数的 this 绑定</p><h2 id="_5-js-攻击-网络安全相关的" tabindex="-1">5. js 攻击 网络安全相关的 <a class="header-anchor" href="#_5-js-攻击-网络安全相关的" aria-label="Permalink to &quot;5. js 攻击 网络安全相关的&quot;">​</a></h2><p><a href="https://vue3js.cn/interview/JavaScript/security.html" target="_blank" rel="noreferrer">面试官：web常见的攻击方式有哪些？如何防御？</a></p><p><a href="https://codingwithalice.github.io/2021/05/07/XSS%E8%B7%A8%E5%9F%9F%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB-%E5%92%8C-CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB/" target="_blank" rel="noreferrer">XSS跨域脚本攻击 和 CSRF跨站请求伪造攻击</a></p><h3 id="xss-跨域脚本攻击-和-csrf-跨站请求伪造攻击" tabindex="-1">XSS 跨域脚本攻击 和 CSRF 跨站请求伪造攻击 <a class="header-anchor" href="#xss-跨域脚本攻击-和-csrf-跨站请求伪造攻击" aria-label="Permalink to &quot;XSS 跨域脚本攻击 和 CSRF 跨站请求伪造攻击&quot;">​</a></h3><ul><li><p>总结</p><p>1、<strong>页面安全问题</strong> 的主要原因就是浏览器为 <strong>同源策略</strong> 开的两个后门：</p><ul><li>页面中可以任意引用 第三方资源</li><li>通过 CORS 策略让 <code>XMLHttpRequest</code> 和 <code>Fetch</code> 去 跨域 请求资源</li></ul><p>2、为了解决这些问题：</p><ul><li>引入了 <strong>CSP 内容安全策略</strong> 来限制页面任意引入外部资源</li><li>引入了 <code>HttpOnly</code> 机制来禁止 <code>XMLHttpRequest</code> 或者 <code>Fetch</code> 发送一些关键 <code>Cookie</code></li><li>引入了 <code>SameSite</code> 和 <code>Origin</code> 来防止 CSRF 攻击</li></ul></li></ul><h4 id="xss-攻击" tabindex="-1">XSS 攻击 <a class="header-anchor" href="#xss-攻击" aria-label="Permalink to &quot;XSS 攻击&quot;">​</a></h4><p>XSS 攻击是通过注入恶意脚本代码来利用程序的</p><h2 id="_6-防抖跟节流的区别" tabindex="-1">6. 防抖跟节流的区别 <a class="header-anchor" href="#_6-防抖跟节流的区别" aria-label="Permalink to &quot;6. 防抖跟节流的区别&quot;">​</a></h2><p>相同点：</p><ul><li>都可以通过使用 setTimeout 来实现</li><li>目的都是通过降低回调执行频率来节省计算资源</li></ul><p>不同点：</p><ul><li>防抖是在一段连续操作结束后，处理回调，利用 clearTimeout 和 setTimeout 实现。节流是在一段连续操作中，每一段时间只执行一次，频率较高的时间中使用来提高性能</li><li>防抖关注一定时间连续触发的事件，只在最后一次执行，而节流一段时间内只执行一次。</li></ul><h2 id="_7-什么是浏览器的事件循环机制" tabindex="-1">7. 什么是浏览器的事件循环机制 <a class="header-anchor" href="#_7-什么是浏览器的事件循环机制" aria-label="Permalink to &quot;7. 什么是浏览器的事件循环机制&quot;">​</a></h2><h3 id="微任务、宏任务分别有哪些方法" tabindex="-1">微任务、宏任务分别有哪些方法 <a class="header-anchor" href="#微任务、宏任务分别有哪些方法" aria-label="Permalink to &quot;微任务、宏任务分别有哪些方法&quot;">​</a></h3><p>常见的微任务有：</p><ul><li>Promise.then</li><li>MutaionObserver</li><li>Object.observe（已废弃；Proxy 对象替代）</li><li>process.nextTick（Node.js）</li></ul><p>常见宏任务：</p><ul><li>setTimeout</li><li>ajax</li><li>dom 事件</li><li>setImmediate(Node 环境)</li><li>requestAnimationFrame</li></ul><h2 id="_8-umi-和-nextjs-的差异有哪些" tabindex="-1">8. umi 和 nextjs 的差异有哪些 <a class="header-anchor" href="#_8-umi-和-nextjs-的差异有哪些" aria-label="Permalink to &quot;8. umi 和 nextjs 的差异有哪些&quot;">​</a></h2><p>Umi 和 Next.js 是两种不同的框架，它们都是用于开发 React 应用程序的。</p><p>Umi 是一个以路由为中心的框架，支持快速构建组件、页面和路由。它具有易于扩展的插件体系结构，支持在生产环境中进行代码切割，并且拥有内置的打包和部署工具。</p><p>Next.js 是一个服务器端渲染 (SSR) 的框架，提供了方便的页面导航和强大的 SEO 解决方案。它也支持代码切割，并且可以很容易地部署到云平台上，如 Vercel。</p><p>总的来说，Umi 和 Next.js 都是优秀的框架，具体使用哪一个取决于您的特定需求和项目要求。</p><h2 id="_9-有参与前期项目的搭建吗" tabindex="-1">9. 有参与前期项目的搭建吗？ <a class="header-anchor" href="#_9-有参与前期项目的搭建吗" aria-label="Permalink to &quot;9. 有参与前期项目的搭建吗？&quot;">​</a></h2><h2 id="_10-什么是-ssr-和客户端渲染有什么区别" tabindex="-1">10. 什么是 ssr？和客户端渲染有什么区别 <a class="header-anchor" href="#_10-什么是-ssr-和客户端渲染有什么区别" aria-label="Permalink to &quot;10. 什么是 ssr？和客户端渲染有什么区别&quot;">​</a></h2><h3 id="两者本质的区别是什么" tabindex="-1">两者本质的区别是什么？ <a class="header-anchor" href="#两者本质的区别是什么" aria-label="Permalink to &quot;两者本质的区别是什么？&quot;">​</a></h3><p>客户端渲染和服务器端渲染的最重要的区别就是<strong>究竟是谁来完成 html 文件的完整拼接，</strong> 如果是在服务器端完成的，然后返回给客户端，就是服务器端渲染，而如果是前端做了更多的工作完成了 html 的拼接，则就是客户端渲染。</p><h3 id="服务器端渲染的优缺点是怎样的" tabindex="-1">服务器端渲染的优缺点是怎样的？ <a class="header-anchor" href="#服务器端渲染的优缺点是怎样的" aria-label="Permalink to &quot;服务器端渲染的优缺点是怎样的？&quot;">​</a></h3><h4 id="优点" tabindex="-1">优点： <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点：&quot;">​</a></h4><ol><li><strong>前端耗时少</strong>：因为后端拼接完了 html，浏览器只需要直接渲染出来。用户看到页面的速度快。</li><li><strong>有利于 SEO</strong>：因为在后端有完整的 html 页面，所以爬虫更容易爬取获得信息，更有利于 seo。</li><li><strong>无需占用客户端资源</strong>：即解析模板的工作完全交由后端来做，客户端只要解析标准的 html 页面即可，这样对于客户端的资源占用更少，尤其是移动端，也可以更省电。</li><li><strong>后端生成静态化文件</strong>：即生成缓存片段，这样就可以减少数据库查询浪费的时间了，且对于数据变化不大的页面非常高效 。</li></ol><p><strong>缺点：</strong></p><ol><li><strong>不利于前后端分离，开发效率低。</strong> 使用服务器端渲染，则无法进行分工合作，则对于前端复杂度高的项目，不利于项目高效开发。另外，如果是服务器端渲染，则<strong>前端一般就是写一个静态 html 文件</strong>，然后<strong>后端再修改为模板</strong>，这样是非常低效的，并且还常常需要前后端共同完成修改的动作； <strong>或者是前端直接完成 html 模板，然后交由后端</strong>。另外，如果后端改了模板，前端还需要根据改动的模板再调节 css，这样使得前后端联调的时间增加。</li><li><strong>占用服务器端资源</strong>。即服务器端完成 html 模板的解析，如果请求较多，会对服务器造成一定的访问压力。而如果使用前端渲染，就是把这些解析的压力分摊了前端，而这里确实完全交给了一个服务器。</li></ol><p>适用场景： 强交互、注重 SEO 的页面，比如购物网站</p><h3 id="客户端渲染的优缺点是怎样的" tabindex="-1">客户端渲染的优缺点是怎样的？ <a class="header-anchor" href="#客户端渲染的优缺点是怎样的" aria-label="Permalink to &quot;客户端渲染的优缺点是怎样的？&quot;">​</a></h3><h4 id="优点-1" tabindex="-1">优点： <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点：&quot;">​</a></h4><ol><li><strong>前后端分离</strong>。前端专注于前端 UI，后端专注于 api 开发，且前端有更多的选择性，而不需要遵循后端特定的模板。</li><li><strong>体验更好</strong>。比如，我们将网站做成 SPA 或者部分内容做成 SPA，这样，尤其是移动端，可以使体验更接近于原生 app。</li></ol><h4 id="缺点" tabindex="-1">缺点： <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点：&quot;">​</a></h4><ol><li><strong>前端响应较慢</strong>。如果是客户端渲染，前端还要进行拼接字符串的过程，需要耗费额外的时间，不如服务器端渲染速度快。</li><li><strong>不利于 SEO</strong>。目前比如百度、谷歌的爬虫对于 SPA 都是不认的，只是记录了一个页面，所以 SEO 很差。因为服务器端可能没有保存完整的 html，而是前端通过 js 进行 dom 的拼接，那么爬虫无法爬取信息。 除非搜索引擎的 seo 可以增加对于 JavaScript 的爬取能力，这才能保证 seo。</li></ol><p>适用场景： 强交互、不注重 SEO 的页面，比如管理类的项目。</p><h3 id="使用服务器端渲染还是客户端渲染" tabindex="-1">使用服务器端渲染还是客户端渲染？ <a class="header-anchor" href="#使用服务器端渲染还是客户端渲染" aria-label="Permalink to &quot;使用服务器端渲染还是客户端渲染？&quot;">​</a></h3><p>比如企业级网站，主要功能是<strong>展示</strong>而<strong>没有复杂的交互</strong>，并且需要<strong>良好的 SEO</strong>，则这时我们就需要使用服务器端渲染；而类似后台管理页面，交互性比较强，不需要 seo 的考虑，那么就可以使用客户端渲染。</p><p>另外，具体使用何种渲染方法并不是绝对的，比如现在一些网站采用了<strong>首屏服务器端渲染</strong>，即对于用户最开始打开的那个页面采用的是服务器端渲染，这样就保证了渲染速度，而其他的页面采用客户端渲染，这样就完成了前后端分离。</p><h2 id="_11-react-写代码的时候有些推荐的写法-哪些是不推荐的-函数组件的最佳实践的-关于编码的内容-一般写组件的时候推荐怎么写-不推荐怎么写-最佳实践" tabindex="-1">11. React 写代码的时候有些推荐的写法？哪些是不推荐的？函数组件的最佳实践的，关于编码的内容？一般写组件的时候推荐怎么写？不推荐怎么写？最佳实践 <a class="header-anchor" href="#_11-react-写代码的时候有些推荐的写法-哪些是不推荐的-函数组件的最佳实践的-关于编码的内容-一般写组件的时候推荐怎么写-不推荐怎么写-最佳实践" aria-label="Permalink to &quot;11. React 写代码的时候有些推荐的写法？哪些是不推荐的？函数组件的最佳实践的，关于编码的内容？一般写组件的时候推荐怎么写？不推荐怎么写？最佳实践&quot;">​</a></h2><p>比如：</p><ol><li>子组件没有从父组件传入的 props 或者传入的 props 仅仅为简单数值类型使用 memo 即可。</li><li>子组件有从父组件传来的方法时，在使用 memo 的同时，使用 useCallback 包裹该方法，传入方法需要更新的依赖值。</li><li>子组件有从父组件传来的对象和数组等值时，在使用 memo 的同时，使用 useMemo 以方法形式返回该对象，传入需要更新的依赖值。</li></ol><p><a href="https://juejin.cn/post/7208716321123303483" target="_blank" rel="noreferrer">https://juejin.cn/post/7208716321123303483</a></p><p><a href="https://www.freecodecamp.org/chinese/news/best-practices-for-react/#tips-to-help-you-write-better-react-code-the-cherries-on-top" target="_blank" rel="noreferrer">https://www.freecodecamp.org/chinese/news/best-practices-for-react/#tips-to-help-you-write-better-react-code-the-cherries-on-top</a></p><h3 id="_1-避免在循环或嵌套函数中使用-hooks" tabindex="-1">1.避免在循环或嵌套函数中使用 Hooks <a class="header-anchor" href="#_1-避免在循环或嵌套函数中使用-hooks" aria-label="Permalink to &quot;1.避免在循环或嵌套函数中使用 Hooks&quot;">​</a></h3><p>在 React Hooks 中，应该确保在组件最顶层使用，而不是在循环、条件语句或嵌套函数中使用。这是因为 Hooks 需要遵循 React 的渲染顺序，以便正确更新组件。</p><h3 id="_2-命名约定" tabindex="-1">2.命名约定 <a class="header-anchor" href="#_2-命名约定" aria-label="Permalink to &quot;2.命名约定&quot;">​</a></h3><p>在命名 Hooks 时，需要遵循 React 官方提供的约定。例如，useState、useEffect 和 useRef 等都是 React Hooks 中的常用 Hook。</p><h3 id="_3-使用-useeffect-来处理生命周期" tabindex="-1">3.使用 useEffect 来处理生命周期 <a class="header-anchor" href="#_3-使用-useeffect-来处理生命周期" aria-label="Permalink to &quot;3.使用 useEffect 来处理生命周期&quot;">​</a></h3><p>在函数式组件中，没有 componentDidMount 和 componentWillUnmount 等生命周期方法。为了处理这些生命周期，我们可以使用 useEffect Hook。useEffect 可以在组件挂载、更新和卸载时执行一些操作，例如发送网络请求或订阅某个事件源。</p><h3 id="_4-使用-usememo-和-usecallback-来优化效率" tabindex="-1">4.使用 useMemo 和 useCallback 来优化效率 <a class="header-anchor" href="#_4-使用-usememo-和-usecallback-来优化效率" aria-label="Permalink to &quot;4.使用 useMemo 和 useCallback 来优化效率&quot;">​</a></h3><p>当组件需要计算大量数据或处理复杂的逻辑时，使用 useMemo 和 useCallback 可以有效地提高性能。useMemo 可以缓存函数的计算结果，而 useCallback 可以将函数缓存以减少重复渲染。</p><h3 id="_5-使用自定义-hooks-来复用逻辑" tabindex="-1">5.使用自定义 Hooks 来复用逻辑 <a class="header-anchor" href="#_5-使用自定义-hooks-来复用逻辑" aria-label="Permalink to &quot;5.使用自定义 Hooks 来复用逻辑&quot;">​</a></h3><p>自定义 Hooks 可以让我们将一些常用的逻辑封装到一个函数中，并且可以在多个组件中重复使用。例如，一个名为 useFetch 的自定义 Hook 可以用于发送网络请求并返回数据。</p><h3 id="_6-如何使用-react-hooks" tabindex="-1">6.如何使用 React Hooks <a class="header-anchor" href="#_6-如何使用-react-hooks" aria-label="Permalink to &quot;6.如何使用 React Hooks&quot;">​</a></h3><p>下面我将演示如何使用 React Hooks，并做出相应的解析。</p><p>首先，我们来创建一个简单的计数器组件，该组件使用 useState Hook 来管理状态：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">js</span></span>
<span class="line"><span style="color:#BABED8;">复制代码import React</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> useState </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> from </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Counter</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">setCount</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">handleIncrement</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setCount</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">handleDecrement</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setCount</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Count: </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">handleIncrement</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#BABED8;">Increment</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">handleDecrement</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#BABED8;">Decrement</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;"> Counter</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在上面的代码中，我们使用 useState Hook 来定义一个名为 count 的状态，并使用 setCount 函数来更新该状态。useState Hook 的返回值是一个数组，第一个值是状态的初始值，第二个值是用于更新状态的函数。当我们调用 setCount 函数时，React 会重新渲染组件并更新状态。在该组件中，我们定义了两个操作 count 状态的函数，handleIncrement 和 handleDecrement，分别可以用于增加和减少计数器。</p><p>接下来，让我们来创建一个使用 useEffect Hook 的组件，该组件会在组件挂载时订阅某个事件源，并在组件卸载时取消订阅：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">js</span></span>
<span class="line"><span style="color:#BABED8;">复制代码import React</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> useState</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> useEffect </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> from </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">EventSubscriber</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">eventData</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">setEventData</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">useEffect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">subscription</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">eventSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">subscribe</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">setEventData</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">subscription</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unsubscribe</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> [])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Event data: </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">eventData</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;"> EventSubscriber</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在上面的代码中，我们使用 useEffect Hook 来订阅某个事件源。我们通过传递一个空数组作为 useEffect 的第二个参数来确保 useEffect 只在组件挂载时执行一次。在订阅事件源时，我们返回一个函数来取消订阅，以确保在组件卸载时取消订阅。</p><p>最后，让我们来创建一个使用 useMemo 和 useCallback Hooks 的组件，该组件会计算出斐波那契数列：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">js</span></span>
<span class="line"><span style="color:#BABED8;">复制代码import React</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> useMemo</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> useCallback </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> from </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Fibonacci</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">calculateFibonacci</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useCallback</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">n</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">calculateFibonacci</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">calculateFibonacci</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> [])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">fibonacciNumber</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useMemo</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">calculateFibonacci</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">10</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> [</span><span style="color:#BABED8;">calculateFibonacci</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Fibonacci number: </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">fibonacciNumber</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;"> Fibonacci</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在上面的代码中，我们使用 useCallback Hook 来缓存 calculateFibonacci 函数，以便在组件重渲染时不会重复计算斐波那契数列。我们还使用 useMemo Hook 来缓存计算结果，以便在组件重渲染时不会重复计算。</p><h3 id="_7-总结" tabindex="-1">7.总结 <a class="header-anchor" href="#_7-总结" aria-label="Permalink to &quot;7.总结&quot;">​</a></h3><p>综上所述，React Hooks 可以提高 React 应用程序的可维护性和性能。在使用 Hooks 时需要遵循上述最佳实践，确保代码的正确性和可读性。</p><h2 id="_12-项目难点" tabindex="-1">12. 项目难点 <a class="header-anchor" href="#_12-项目难点" aria-label="Permalink to &quot;12. 项目难点&quot;">​</a></h2><p>被问到项目亮点、难点、遇到的问题、解决思路</p><p><a href="https://blog.csdn.net/gaoyu007/article/details/117200172" target="_blank" rel="noreferrer">https://blog.csdn.net/gaoyu007/article/details/117200172</a></p><p>商品同步的问题</p><p>购物车 有加购的商品列表 然后它下面会展示一些相关联的商品信息 下面的商品也是可以加购的，但是加购之后需要同步到上面的商品列表</p><p>解决的方式</p><p>维护页面</p><p>客户希望系统维护期间，网站可以展示维护页面，前期的要求是输入密码可正常访问</p><p>分页算不算？</p><p>正常分页的话是这样的，接口请求时传递当前页索引、每页数量、总数。 但是因为 RTI 的接口所给的数据没有总数，所以分页的时候需要前端做一些处理</p><p>将 page（当前页索引）记录到 url 上，点击分页按钮时，将页数据信息通过接口请求给后端 web 很好实现</p><h3 id="wap-端使用的是上下滑动分页" tabindex="-1">wap 端使用的是上下滑动分页 <a class="header-anchor" href="#wap-端使用的是上下滑动分页" aria-label="Permalink to &quot;wap 端使用的是上下滑动分页&quot;">​</a></h3><p>所以需要监听滑动事件从而控制接口请求，另外就是接口请求的参数处理和拿到数据以后的处理</p><p>实现：</p><h4 id="_1-监听滑动事件从而控制接口请求" tabindex="-1">1. 监听滑动事件从而控制接口请求 <a class="header-anchor" href="#_1-监听滑动事件从而控制接口请求" aria-label="Permalink to &quot;1. 监听滑动事件从而控制接口请求&quot;">​</a></h4><p>可能的方法如下： 使用 scrollTop、clientHeight 等属性方法来获取想要的滚动数据等，即使用传统的滚动事件监听</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scroll</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 获取滚动条滚动的距离</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">scrollTop</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">documentElement</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">scrollTop</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">body</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">scrollTop</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 获取整个页面的高度</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">scrollHeight</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">documentElement</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">scrollHeight</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">body</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">scrollHeight</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 获取视口的高度</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">clientHeight</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">documentElement</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">clientHeight</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">body</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">clientHeight</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 计算距离底部的高度</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">scrollDistance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">scrollHeight</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">scrollTop</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">clientHeight</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 如果距离底部的高度小于某个值（比如100），可以认为是滚动到底部了</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">scrollDistance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">100</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 触发滚动到底部的逻辑</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">页面滚动到底部了！</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 在这里可以调用加载更多内容、显示加载提示等逻辑</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>项目中使用的是 IntersectionObserver</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建一个观察器实例</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> observer </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">IntersectionObserver</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">entries</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">observer</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">entries</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">entry</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 检查目标元素是否进入视口</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">entry</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">isIntersecting</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 触发滚动到底部的逻辑</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">页面滚动到底部了！</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 加载更多内容或者执行其他操作</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 如果不再需要观察，可以停止观察</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">observer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unobserve</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">entry</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 配置选项</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">threshold</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 当目标元素的可见比例达到100%时，触发回调函数</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">root</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 使用视口作为根</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">rootMargin</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0px</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 根边界</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取页面底部的元素，通常是一个占位符或者加载更多的按钮</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> bottomElement </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">#bottom-element</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 观察页面底部的元素</span></span>
<span class="line"><span style="color:#BABED8;">observer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">observe</span><span style="color:#BABED8;">(bottomElement)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>比如一页展示 5 条数据，在数据展示的末尾处插入一个 id 为 BOTTOM_ID 的 div，用作标记末尾位置。 获取 BOTTOM_ID 元素，然后创建一个 IntersectionObserver 实例，并配置监听的对象和相关属性， 比如 threshold 为 0.1，表示当目标元素的可见比例（相交比例）达到 10%时，就触发回调函数。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">useEffect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">observer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ref</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">BOTTOM_ID</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">isNext</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">observer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">IntersectionObserver</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">handleScroll</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      threshold</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">ref</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">observer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">observe</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">ref</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">isNext</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ref</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">observer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unobserve</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">ref</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">mountedRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> [])</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>回调函数有一个参数，是数组，每一个成员都是 IntersectionObserverEntry 对象，IntersectionObserverEntry 对象有几个属性， 其中 isIntersecting 的值是一个布尔值，指示目标元素是否已转换为相交状态 ( true) 还是脱离相交状态 ( false)。 如果处于相交状态就触发后续代码操作，修改 router 的 page 的值</p><p>useEffect 依赖了 router，当 router 修改的时候会重新获取数据</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> handleScroll </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">useCallback</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">throttle</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">entry</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">event</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">entry</span><span style="color:#89DDFF;">?.</span><span style="color:#BABED8;">isIntersecting</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">loadingRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">isAllRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">current</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          pathname</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">router</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">asPath</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          query</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">handleUrlParams</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">routerRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">current</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            page</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">currentRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> scroll</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> shallow</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">400</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  []</span></span>
<span class="line"><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>补充知识点： <a href="https://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html" target="_blank" rel="noreferrer">IntersectionObserver API 使用教程</a></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> io </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">IntersectionObserver</span><span style="color:#BABED8;">(callback</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> option)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>IntersectionObserver 是浏览器原生提供的构造函数，接受两个参数：callback 是可见性变化时的回调函数，option 是配置对象（该参数可选）</p><p>构造函数的返回值是一个观察器实例。实例的 observe 方法可以指定观察哪个 DOM 节点。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 开始观察</span></span>
<span class="line"><span style="color:#BABED8;">io</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">observe</span><span style="color:#BABED8;">(document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">example</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 停止观察</span></span>
<span class="line"><span style="color:#BABED8;">io</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unobserve</span><span style="color:#BABED8;">(element)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 关闭观察器</span></span>
<span class="line"><span style="color:#BABED8;">io</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">disconnect</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>如果要观察多个节点，就要多次调用这个方法。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">io</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">observe</span><span style="color:#BABED8;">(elementA)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">io</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">observe</span><span style="color:#BABED8;">(elementB)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>该 IntersectionObserverEntry 接口的只读 <strong>isIntersecting</strong> 属性是一个布尔值，表示 true 目标元素是否与相交观察器的根相交。如果是 true，则 IntersectionObserverEntry 描述了到相交状态的转变；如果是 false，那么您知道过渡是从相交到不相交。</p><h4 id="_2-接口请求的参数处理和拿到数据以后的处理" tabindex="-1">2. 接口请求的参数处理和拿到数据以后的处理 <a class="header-anchor" href="#_2-接口请求的参数处理和拿到数据以后的处理" aria-label="Permalink to &quot;2. 接口请求的参数处理和拿到数据以后的处理&quot;">​</a></h4><p>接口参数处理： 确定当前页索引 如果购物车列表 shopCarList 为空且页码 val 大于 1，说明刷新了页面，购物车的做法是重置 page 为 1，后续就不需要了。直接获取第一页的数据就行。</p><p>接口请求到数据后： 修改某些属性，比如 loading 为 false； 如果拿到的 list 长度为 0，表示后续没有数据可以请求了，isAll 修改为 true 否则就处理数据，保存数据。 保存数据的时候需要判断，当前 page 为 1，直接 set 数据，否则，将新数据和旧数据合并</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> getProducts </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">parseInt</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">page</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">shopCarList</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">url</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      pathname</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">router</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">pathname</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      query</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">router</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">query</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> page</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">url</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">number</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#82AAFF;">isNaN</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">val</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">currentRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">current</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">loadingRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pageNo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">shopCarList</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">current</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setLoading</span><span style="color:#F07178;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">request</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> skip</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pageNo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> take</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">PGAE_SIZE</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">({</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">})</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">list</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">shopCarList</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">mountedRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">current</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">routerRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">router</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">query</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">loadingRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">isAll</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">list</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">isAllRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">isAll</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">currentRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#BABED8;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">isAll</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">currentRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">current</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">item</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#676E95;font-style:italic;">/* 商品数据处理 */</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">setShopCarList</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">list</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">setOtherShopCarList</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">otherShopCarList</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> [])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">isAll</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">setShopCarList</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">v</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">list</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">setLoading</span><span style="color:#F07178;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">err</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">mountedRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setLoading</span><span style="color:#F07178;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="_13-面试官-有什么想问我的" tabindex="-1">13. 面试官：有什么想问我的？ <a class="header-anchor" href="#_13-面试官-有什么想问我的" aria-label="Permalink to &quot;13. 面试官：有什么想问我的？&quot;">​</a></h2>`,143),e=[p];function t(c,r,F,y,D,i){return a(),n("div",null,e)}const E=s(o,[["render",t]]);export{A as __pageData,E as default};
