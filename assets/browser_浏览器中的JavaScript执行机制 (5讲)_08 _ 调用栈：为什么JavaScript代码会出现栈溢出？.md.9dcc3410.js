import{_ as s}from"./chunks/08-调用栈：为什么JavaScript代码会出现栈溢出？.841052f0.js";import{_ as a,o as n,c as l,V as p}from"./chunks/framework.bd00fe0c.js";const o="/blog-docs/assets/cover-picture-08.18618f24.png",t="/blog-docs/assets/image.b53b3918.png",e="/blog-docs/assets/image-1.2c7caffe.png",r="/blog-docs/assets/image-3.5b43742c.png",c="/blog-docs/assets/image-4.a903ef60.png",i="/blog-docs/assets/image-5.71589646.png",y="/blog-docs/assets/image-6.e61b2cac.png",F="/blog-docs/assets/image-7.c7a621b9.png",d="/blog-docs/assets/image-8.23b05475.png",D="/blog-docs/assets/image-9.1141b4a3.png",g="/blog-docs/assets/image-10.c8442b2d.png",B="/blog-docs/assets/image-11.b299fbf3.png",A="/blog-docs/assets/image-12.caa87cba.png",m="/blog-docs/assets/image-13.1f701165.png",q=JSON.parse('{"title":"08 | 调用栈：为什么 JavaScript 代码会出现栈溢出？","description":"","frontmatter":{},"headers":[],"relativePath":"browser/浏览器中的JavaScript执行机制 (5讲)/08 | 调用栈：为什么JavaScript代码会出现栈溢出？.md","filePath":"browser/浏览器中的JavaScript执行机制 (5讲)/08 | 调用栈：为什么JavaScript代码会出现栈溢出？.md","lastUpdated":1689231811000}'),v={name:"browser/浏览器中的JavaScript执行机制 (5讲)/08 | 调用栈：为什么JavaScript代码会出现栈溢出？.md"},_=p('<h1 id="_08-调用栈-为什么-javascript-代码会出现栈溢出" tabindex="-1">08 | 调用栈：为什么 JavaScript 代码会出现栈溢出？ <a class="header-anchor" href="#_08-调用栈-为什么-javascript-代码会出现栈溢出" aria-label="Permalink to &quot;08 | 调用栈：为什么 JavaScript 代码会出现栈溢出？&quot;">​</a></h1><p><img src="'+o+'" alt="Alt text"></p><audio preload="none" controls loop style="width:100%;"><source src="'+s+'" type="audio/mpeg"><p>你的浏览器不支持HTML5音频，你可以<a href="../mp3/08-调用栈：为什么JavaScript代码会出现栈溢出？.mp3">下载</a>这个音频文件</p></audio><p>在上篇文章中，我们讲到了，当一段代码被执行时，JavaScript 引擎先会对其进行编译，并创建执行上下文。但是并没有明确说明到底什么样的代码才算符合规范。</p><p>那么接下来我们就来明确下，哪些情况下代码才算是“一段”代码，才会在执行之前就进行编译并创建执行上下文。一般说来，有这么三种情况：</p><ol><li><p>当 JavaScript 执行全局代码的时候，会编译全局代码并创建全局执行上下文，而且在整个页面的生存周期内，全局执行上下文只有一份。</p></li><li><p>当调用一个函数的时候，函数体内的代码会被编译，并创建函数执行上下文，一般情况下，函数执行结束之后，创建的函数执行上下文会被销毁。</p></li><li><p>当使用 eval 函数的时候，eval 的代码也会被编译，并创建执行上下文。</p></li></ol><p>好了，又进一步理解了执行上下文，那本节我们就在这基础之上继续深入，一起聊聊<strong>调用栈</strong>。学习调用栈至少有以下三点好处：</p><ol><li><p>可以帮助你了解 JavaScript 引擎背后的工作原理；</p></li><li><p>让你有调试 JavaScript 代码的能力；</p></li><li><p>帮助你搞定面试，因为面试过程中，调用栈也是出境率非常高的题目。</p></li></ol><p>比如你在写 JavaScript 代码的时候，有时候可能会遇到栈溢出的错误，如下图所示：</p><p><img src="'+t+`" alt="栈溢出的错误" title="栈溢出的错误"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">栈溢出的错误</div><p>那为什么会出现这种错误呢？这就涉及到了<strong>调用栈</strong>的内容。你应该知道 JavaScript 中有很多函数，经常会出现在一个函数中调用另外一个函数的情况，<strong>调用栈就是用来管理函数调用关系的一种数据结构</strong>。因此要讲清楚调用栈，你还要先弄明白<strong>函数调用</strong>和<strong>栈结构</strong>。</p><h2 id="什么是函数调用" tabindex="-1">什么是函数调用 <a class="header-anchor" href="#什么是函数调用" aria-label="Permalink to &quot;什么是函数调用&quot;">​</a></h2><p>函数调用就是运行一个函数，具体使用方式是使用函数名称跟着一对小括号。下面我们看个简单的示例代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">add</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>这段代码很简单，先是创建了一个 add 函数，接着在代码的最下面又调用了该函数。</p><p>那么下面我们就利用这段简单的代码来解释下函数调用的过程。</p><p>在执行到函数 add() 之前，JavaScript 引擎会为上面这段代码创建全局执行上下文，包含了声明的函数和变量，你可以参考下图：</p><p><img src="`+e+'" alt="全局执行上下文" title="全局执行上下文"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">全局执行上下文</div><p>从图中可以看出，代码中全局变量和函数都保存在全局上下文的变量环境中。</p><p>执行上下文准备好之后，便开始执行全局代码，当执行到 add 这儿时，JavaScript 判断这是一个函数调用，那么将执行以下操作：</p><ul><li>首先，从<strong>全局执行上下文</strong>中，取出 add 函数代码。</li></ul><ul><li>其次，对 add 函数的这段代码进行编译，并创建<strong>该函数的执行上下文</strong>和<strong>可执行代码</strong>。</li></ul><ul><li>最后，执行代码，输出结果。</li></ul><p>完整流程你可以参考下图：</p><p><img src="'+r+'" alt="函数调用过程" title="函数调用过程"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">函数调用过程</div><p>就这样，当执行到 add 函数的时候，我们就有了两个执行上下文了——全局执行上下文和 add 函数的执行上下文。</p><p>也就是说在执行 JavaScript 时，可能会存在多个执行上下文，那么 JavaScript 引擎是如何管理这些执行上下文的呢？</p><p>答案是<strong>通过一种叫栈的数据结构来管理的</strong>。那什么是栈呢？它又是如何管理这些执行上下文呢？</p><h2 id="什么是栈" tabindex="-1">什么是栈 <a class="header-anchor" href="#什么是栈" aria-label="Permalink to &quot;什么是栈&quot;">​</a></h2><p>关于栈，你可以结合这么一个贴切的例子来理解，一条单车道的单行线，一端被堵住了，而另一端入口处没有任何提示信息，堵住之后就只能后进去的车子先出来，这时这个堵住的单行线就可以被看作是一个<strong>栈容器</strong>，车子开进单行线的操作叫做<strong>入栈</strong>，车子倒出去的操作叫做<strong>出栈</strong>。</p><p>在车流量较大的场景中，就会发生反复的入栈、栈满、出栈、空栈和再次入栈，一直循环。</p><p>所以，栈就是类似于一端被堵住的单行线，车子类似于栈中的元素，栈中的元素满足<strong>后进先出</strong>的特点。你可以参看下图：</p><p><img src="'+c+`" alt="栈示意图" title="栈示意图"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">栈示意图</div><h2 id="什么是-javascript-的调用栈" tabindex="-1">什么是 JavaScript 的调用栈 <a class="header-anchor" href="#什么是-javascript-的调用栈" aria-label="Permalink to &quot;什么是 JavaScript 的调用栈&quot;">​</a></h2><p>JavaScript 引擎正是利用栈的这种结构来管理执行上下文的。在执行上下文创建好后，JavaScript 引擎会将执行上下文压入栈中，通常把这种用来管理执行上下文的栈称为<strong>执行上下文栈</strong>，又称<strong>调用栈</strong>。</p><p>为便于你更好地理解调用栈，下面我们再来看段稍微复杂点的示例代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">b</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">c</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">c</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">addAll</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">b</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">c</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">d</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">b</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">c</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">d</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">addAll</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">6</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在上面这段代码中，你可以看到它是在 addAll 函数中调用了 add 函数，那在整个代码的执行过程中，调用栈是怎么变化的呢？</p><p>下面我们就一步步地分析在代码的执行过程中，调用栈的状态变化情况。</p><p><strong>第一步，创建全局上下文，并将其压入栈底</strong>。如下图所示：</p><p><img src="`+i+'" alt="全局执行上下文压栈" title="全局执行上下文压栈"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">全局执行上下文压栈</div><p>从图中你也可以看出，变量 a、函数 add 和 addAll 都保存到了全局上下文的变量环境对象中。</p><p>全局执行上下文压入到调用栈后，JavaScript 引擎便开始执行全局代码了。首先会执行 a=2 的赋值操作，执行该语句会将全局上下文变量环境中 a 的值设置为 2。设置后的全局上下文的状态如下图所示：</p><p><img src="'+y+'" alt="赋值操作改变执行上下文中的值" title="赋值操作改变执行上下文中的值"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">赋值操作改变执行上下文中的值</div><p>接下来，<strong>第二步是调用 addAll 函数</strong>。当调用该函数时，JavaScript 引擎会编译该函数，并为其创建一个执行上下文，最后还将该函数的执行上下文压入栈中，如下图所示：</p><p><img src="'+F+'" alt="执行 addAll 函数时的调用栈" title="执行 addAll 函数时的调用栈"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">执行 addAll 函数时的调用栈</div><p>addAll 函数的执行上下文创建好之后，便进入了函数代码的执行阶段了，这里先执行的是 d=10 的赋值操作，执行语句会将 addAll 函数执行上下文中的 d 由 undefined 变成了 10。</p><p>然后接着往下执行，<strong>第三步，当执行到 add 函数</strong>调用语句时，同样会为其创建执行上下文，并将其压入调用栈，如下图所示：</p><p><img src="'+d+'" alt="执行 add 函数时的调用栈" title="执行 add 函数时的调用栈"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">执行 add 函数时的调用栈</div><p>当 add 函数返回时，该函数的执行上下文就会从栈顶弹出，并将 result 的值设置为 add 函数的返回值，也就是 9。如下图所示：</p><p><img src="'+D+'" alt="add 函数执行结束时的调用栈" title="add 函数执行结束时的调用栈"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">add 函数执行结束时的调用栈</div><p>紧接着 addAll 执行最后一个相加操作后并返回，addAll 的执行上下文也会从栈顶部弹出，此时调用栈中就只剩下全局上下文了。最终如下图所示：</p><p><img src="'+g+'" alt="addAll 函数执行结束时的调用栈" title="addAll 函数执行结束时的调用栈"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">addAll 函数执行结束时的调用栈</div><p>至此，整个 JavaScript 流程执行结束了。</p><p>好了，现在你应该知道了<strong>调用栈是 JavaScript 引擎追踪函数执行的一个机制</strong>，当一次有多个函数被调用时，通过调用栈就能够追踪到哪个函数正在被执行以及各函数之间的调用关系。</p><h2 id="在开发中-如何利用好调用栈" tabindex="-1">在开发中，如何利用好调用栈 <a class="header-anchor" href="#在开发中-如何利用好调用栈" aria-label="Permalink to &quot;在开发中，如何利用好调用栈&quot;">​</a></h2><p>鉴于调用栈的重要性和实用性，那么接下来我们就一起来看看在实际工作中，应该如何查看和利用好调用栈。</p><h3 id="_1-如何利用浏览器查看调用栈的信息" tabindex="-1">1. 如何利用浏览器查看调用栈的信息 <a class="header-anchor" href="#_1-如何利用浏览器查看调用栈的信息" aria-label="Permalink to &quot;1. 如何利用浏览器查看调用栈的信息&quot;">​</a></h3><p>当你执行一段复杂的代码时，你可能很难从代码文件中分析其调用关系，这时候你可以在你想要查看的函数中加入断点，然后当执行到该函数时，就可以查看该函数的调用栈了。 这么说可能有点抽象，这里我们拿上面的那段代码做个演示，你可以打开“开发者工具”，点击“Source”标签，选择 JavaScript 代码的页面，然后在第 3 行加上断点，并刷新页面。你可以看到执行到 add 函数时，执行流程就暂停了，这时可以通过右边“call stack”来查看当前的调用栈的情况，如下图：</p><p><img src="'+B+'" alt="查看函数调用关系" title="查看函数调用关系"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">函数调用过程</div><p>从图中可以看出，右边的“call stack”下面显示出来了函数的调用关系：栈的最底部是 anonymous，也就是全局的函数入口；中间是 addAll 函数；顶部是 add 函数。这就清晰地反映了函数的调用关系，所以<strong>在分析复杂结构代码，或者检查 Bug 时，调用栈都是非常有用的</strong>。</p><p>除了通过断点来查看调用栈，你还可以使用 console.trace() 来输出当前的函数调用关系，比如在示例代码中的 add 函数里面加上了 console.trace()，你就可以看到控制台输出的结果，如下图：</p><p><img src="'+A+`" alt="使用 trace 函数输出当前调用栈信息" title="使用 trace 函数输出当前调用栈信息"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">使用 trace 函数输出当前调用栈信息</div><h3 id="_2-栈溢出-stack-overflow" tabindex="-1">2. 栈溢出（Stack Overflow） <a class="header-anchor" href="#_2-栈溢出-stack-overflow" aria-label="Permalink to &quot;2. 栈溢出（Stack Overflow）&quot;">​</a></h3><p>现在你知道了调用栈是一种用来管理执行上下文的数据结构，符合后进先出的规则。不过还有一点你要注意，<strong>调用栈是有大小的</strong>，当入栈的执行上下文超过一定数目，JavaScript 引擎就会报错，我们把这种错误叫做<strong>栈溢出</strong>。</p><p>特别是在你写递归代码的时候，就很容易出现栈溢出的情况。比如下面这段代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">division</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">division</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">b</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#82AAFF;">division</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>当执行时，就会抛出栈溢出错误，如下图：</p><p><img src="`+m+`" alt="栈溢出错误" title="栈溢出错误"></p><div style="text-align:center;font-size:12px;color:#999;margin-bottom:8px;">栈溢出错误</div><p>从上图你可以看到，抛出的错误信息为：超过了最大栈调用大小（Maximum call stack size exceeded）。</p><p>那为什么会出现这个问题呢？这是因为当 JavaScript 引擎开始执行这段代码时，它首先调用函数 division，并创建执行上下文，压入栈中；然而，这个函数是<strong>递归的，并且没有任何终止条件</strong>，所以它会一直创建新的函数执行上下文，并反复将其压入栈中，但栈是有容量限制的，超过最大数量后就会出现栈溢出的错误。</p><p>理解了栈溢出原因后，你就可以使用一些方法来避免或者解决栈溢出的问题，比如把递归调用的形式改造成其他形式，或者使用加入定时器的方法来把当前任务拆分为其他很多小任务。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>好了，今天的内容就讲到这里，下面来总结下今天的内容。</p><ul><li>每调用一个函数，JavaScript 引擎会为其创建执行上下文，并把该执行上下文压入调用栈，然后 JavaScript 引擎开始执行函数代码。</li></ul><ul><li>如果在一个函数 A 中调用了另外一个函数 B，那么 JavaScript 引擎会为 B 函数创建执行上下文，并将 B 函数的执行上下文压入栈顶。</li></ul><ul><li>当前函数执行完毕后，JavaScript 引擎会将该函数的执行上下文弹出栈。</li></ul><ul><li>当分配的调用栈空间被占满时，会引发“堆栈溢出”问题。</li></ul><p>栈是一种非常重要的数据结构，不光应用在 JavaScript 语言中，其他的编程语言，如 C/C++、Java、Python 等语言，在执行过程中也都使用了栈来管理函数之间的调用关系。所以栈是非常基础且重要的知识点，你必须得掌握。</p><h2 id="思考时间" tabindex="-1">思考时间 <a class="header-anchor" href="#思考时间" aria-label="Permalink to &quot;思考时间&quot;">​</a></h2><p>最后，我给你留个思考题，你可以看下面这段代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">runStack</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">n</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">runStack</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">runStack</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">50000</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>这是一段递归代码，可以通过传入参数 n，让代码递归执行 n 次，也就意味着调用栈的深度能达到 n，当输入一个较大的数时，比如 50000，就会出现栈溢出的问题，那么你能优化下这段代码，以解决栈溢出的问题吗？</p>`,96),u=[_];function b(h,f,E,x,S,C){return n(),l("div",null,u)}const z=a(v,[["render",b]]);export{q as __pageData,z as default};
