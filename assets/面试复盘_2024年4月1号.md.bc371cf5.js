import{_ as a,o as e,c as t,V as o}from"./chunks/framework.bd00fe0c.js";const i="/blog-docs/assets/image-5.3a15a70c.png",r="/blog-docs/assets/image-6.acf840cc.png",q=JSON.parse('{"title":"4 月 1 号面试题","description":"","frontmatter":{},"headers":[],"relativePath":"面试复盘/2024年4月1号.md","filePath":"面试复盘/2024年4月1号.md","lastUpdated":1711871512000}'),l={name:"面试复盘/2024年4月1号.md"},n=o('<h1 id="_4-月-1-号面试题" tabindex="-1">4 月 1 号面试题 <a class="header-anchor" href="#_4-月-1-号面试题" aria-label="Permalink to &quot;4 月 1 号面试题&quot;">​</a></h1><h2 id="_1-自我介绍" tabindex="-1">1. 自我介绍 <a class="header-anchor" href="#_1-自我介绍" aria-label="Permalink to &quot;1. 自我介绍&quot;">​</a></h2><h2 id="_2-链表" tabindex="-1">2. 链表 <a class="header-anchor" href="#_2-链表" aria-label="Permalink to &quot;2. 链表&quot;">​</a></h2><h2 id="_3-跨域几次请求" tabindex="-1">3. 跨域几次请求 <a class="header-anchor" href="#_3-跨域几次请求" aria-label="Permalink to &quot;3. 跨域几次请求&quot;">​</a></h2><p><strong>两次请求</strong></p><h4 id="第一次是-options-请求" tabindex="-1">第一次是 OPTIONS 请求 <a class="header-anchor" href="#第一次是-options-请求" aria-label="Permalink to &quot;第一次是 OPTIONS 请求&quot;">​</a></h4><p><img src="'+i+'" alt="alt text"></p><p>在发生正式请求之前，先发送一次预检请求，通过预检请求来检测实际请求是否可以被服务器接受。只要是带了自定义 header 头的跨域请求，都需要发生一次预检请求。浏览器会根据 OPTIONS 请求的响应结果来决定是否继续发送真实请求进行跨域资源请求。</p><p>触发预检请求的条件：</p><ol><li><p>产生了复杂请求 相对的是简单请求，简单请求的定义：</p><ul><li>请求方法是 GET、HEAD 或者 POST，请求方法是 POST 的时候，Content-Type 必须是 application/x-www-form-urlencoded、multipart/form-data 或者 text/plain 之一，或者没有 Content-Type。</li><li>请求没有自定义 HTTP 头（在实际项目开发中，一般需要将用户信息或者登陆的 token 放在 header 头中，传递给后端，用于用户信息验证，这种就属于 自定义 HTTP 头）</li></ul><p>所以，复杂请求是指 请求方法不是 GET、HEAD 或者 POST，或者请求头中包含自定义 HTTP 头的请求。</p></li><li><p>发生了跨域</p></li></ol><h4 id="第二次是简单-gte、head-或满足简单请求条件的-post-请求" tabindex="-1">第二次是简单（GTE、HEAD 或满足简单请求条件的 POST）请求 <a class="header-anchor" href="#第二次是简单-gte、head-或满足简单请求条件的-post-请求" aria-label="Permalink to &quot;第二次是简单（GTE、HEAD 或满足简单请求条件的 POST）请求&quot;">​</a></h4><p><img src="'+r+'" alt="alt text"></p><h2 id="_4-什么是同源策略" tabindex="-1">4. 什么是同源策略 <a class="header-anchor" href="#_4-什么是同源策略" aria-label="Permalink to &quot;4. 什么是同源策略&quot;">​</a></h2><p>同源策略是一种约定，是浏览器最核心也最基本的安全功能。在浏览器中，允许某个网页脚本访问另一个网页的数据，但前提是必须同源（即协议、域名、端口号都相同）。 目的：同源策略的目的是保护用户信息安全，防止恶意的网站窃取数据。 限制范围：</p><h2 id="_5-post-和-get-的区别" tabindex="-1">5. post 和 get 的区别 <a class="header-anchor" href="#_5-post-和-get-的区别" aria-label="Permalink to &quot;5. post 和 get 的区别&quot;">​</a></h2><h2 id="_6-cookie-和-session" tabindex="-1">6. cookie 和 session <a class="header-anchor" href="#_6-cookie-和-session" aria-label="Permalink to &quot;6. cookie 和 session&quot;">​</a></h2><h2 id="_7-umi-的封装" tabindex="-1">7. umi 的封装 <a class="header-anchor" href="#_7-umi-的封装" aria-label="Permalink to &quot;7. umi 的封装&quot;">​</a></h2><h2 id="_8-umi-全局状态管理" tabindex="-1">8. umi 全局状态管理 <a class="header-anchor" href="#_8-umi-全局状态管理" aria-label="Permalink to &quot;8. umi 全局状态管理&quot;">​</a></h2><h2 id="_9-axios" tabindex="-1">9. axios <a class="header-anchor" href="#_9-axios" aria-label="Permalink to &quot;9. axios&quot;">​</a></h2><h2 id="_10-三次握手和四次挥手的原因" tabindex="-1">10. 三次握手和四次挥手的原因 <a class="header-anchor" href="#_10-三次握手和四次挥手的原因" aria-label="Permalink to &quot;10. 三次握手和四次挥手的原因&quot;">​</a></h2><h2 id="_11-怎么部署项目" tabindex="-1">11. 怎么部署项目 <a class="header-anchor" href="#_11-怎么部署项目" aria-label="Permalink to &quot;11. 怎么部署项目&quot;">​</a></h2><h2 id="_12-antd-受控组件和非受控组件" tabindex="-1">12. antd 受控组件和非受控组件 <a class="header-anchor" href="#_12-antd-受控组件和非受控组件" aria-label="Permalink to &quot;12. antd 受控组件和非受控组件&quot;">​</a></h2><p>我们对某个组件状态的掌控，它的值是否只能由用户设置，而不能通过代码控制</p><h2 id="_13-react-中怎么进行兄弟组件通信" tabindex="-1">13. react 中怎么进行兄弟组件通信 <a class="header-anchor" href="#_13-react-中怎么进行兄弟组件通信" aria-label="Permalink to &quot;13. react 中怎么进行兄弟组件通信&quot;">​</a></h2><h2 id="_14-input-框的怎么变得受控" tabindex="-1">14. input 框的怎么变得受控 <a class="header-anchor" href="#_14-input-框的怎么变得受控" aria-label="Permalink to &quot;14.  input 框的怎么变得受控&quot;">​</a></h2>',25),s=[n];function h(d,c,_,u,p,m){return e(),t("div",null,s)}const P=a(l,[["render",h]]);export{q as __pageData,P as default};
