import{_ as a,o as e,c,V as p}from"./chunks/framework.bd00fe0c.js";const h=JSON.parse('{"title":"webpack 面试题","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/1.md","filePath":"webpack/1.md","lastUpdated":1698995422000}'),t={name:"webpack/1.md"},s=p('<h1 id="webpack-面试题" tabindex="-1">webpack 面试题 <a class="header-anchor" href="#webpack-面试题" aria-label="Permalink to &quot;webpack 面试题&quot;">​</a></h1><h2 id="_1-webpack-的作用是什么-谈谈你对它的理解" tabindex="-1">1. webpack 的作用是什么，谈谈你对它的理解 <a class="header-anchor" href="#_1-webpack-的作用是什么-谈谈你对它的理解" aria-label="Permalink to &quot;1. webpack 的作用是什么，谈谈你对它的理解&quot;">​</a></h2><p>现在的前端网页功能丰富，特别是 SPA（Single Page Web Application 单页应用）技术流行后，JavaScript 的复杂度增加和需要一大堆依赖包，还需要解决 Scss，Less 等新增样式的扩展写法的编译工作。</p><p>所以现代化的前端已经完全依赖于 webpack 的辅助了。</p><p>现在最流行的三个前端框架，可以说和 webpack 已经紧密相连，框架官方都推出了和自身框架依赖的 webpack 构建工具。</p><p>react.js + webpack vue.js + webpack angluar.js + webpack</p><h2 id="_2-webpack-的工作流程" tabindex="-1">2. webpack 的工作流程 <a class="header-anchor" href="#_2-webpack-的工作流程" aria-label="Permalink to &quot;2. webpack 的工作流程&quot;">​</a></h2><p>webpack 可以看做是模块打包机：它做的事情是，分析你的项目结构，找到 javascript 模块以及其他的一些浏览器不能直接运行的拓展语言（Sass，TypeScript 等），并将其转换和打包为合适的格式供浏览器使用。在 3.0 出现后，webpack 还肩负起了优化项目的责任。</p><h2 id="_3-webpack-打包原理" tabindex="-1">3. webpack 打包原理 <a class="header-anchor" href="#_3-webpack-打包原理" aria-label="Permalink to &quot;3. webpack 打包原理&quot;">​</a></h2><p>把一切都视为模块：不管是 css、js、Image 还是 html 都可以互相引用，通过定 entry.js，对所有依赖的文件进行跟踪，将各个模块通过 loader 和 plugings 处理，然后打包在一起。 按需加载：打包过程中 webpack 通过 code splitting 功能将文件分为多个 chunks，还可以将重复的部分单独提取出来作为 commonChunk，从而实现按需加载。把所有依赖打包成一个 bundle.js 文件，通过代码分割成单元片段并按需加载。</p>',10),r=[s];function o(n,b,i,k,l,_){return e(),c("div",null,r)}const w=a(t,[["render",o]]);export{h as __pageData,w as default};
